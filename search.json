[{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://darwin-eu.github.io/visOmopResults/articles/filterSummarisedResult.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Filter helpers","text":"Dealing  object can difficult handle specially trying filter. example, difficult tasks filter certain result_type many strata joined together filter one variables. hand exists tidy format makes easy filter, loose  object. exist functions work  objects. visOmopResults package contains functionalities helps process: filterSettings filter  object using settings() attribute. filterGroup filter  object using group_name-group_level tidy columns. filterStrata filter  object using strata_name-starta_level tidy columns. filterAdditional filter  object using additional_name-additional_level tidy columns. vignette also cover two types utility functions: unite* type functions: join multiple columns name-level structure. *Columns type functions: identify columns contained name-level structure. Now see examples.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/filterSummarisedResult.html","id":"filtersettings","dir":"Articles","previous_headings":"","what":"filterSettings","title":"Filter helpers","text":"example use mock data. Let’s generate two sets results: can change settings second set results simulating results come different package ans set results: can now merge results unique  object: potentially add settings addSettings(), filter finally eliminate columns. Let’s see example subset results my_parameter == TRUE: approach problems: efficient. use three different functions. settings attribute still contains sets: can solving three problems using filterSettings():","code":"library(visOmopResults) library(dplyr, warn.conflicts = FALSE) result1 <- mockSummarisedResult() result2 <- mockSummarisedResult() result2 <- result2 |>   omopgenerics::newSummarisedResult(settings = tibble(     result_id = 1L,     result_type = \"second_mock_result\",     package_name = \"omopgenerics\",     package_version = \"1.0.0\",     my_parameter = TRUE   )) result <- bind(result1, result2) settings(result) #> # A tibble: 2 × 5 #>   result_id result_type            package_name   package_version my_parameter #>       <int> <chr>                  <chr>          <chr>           <lgl>        #> 1         1 mock_summarised_result visOmopResults 0.4.0           NA           #> 2         2 second_mock_result     omopgenerics   1.0.0           TRUE result #> # A tibble: 252 × 13 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 242 more rows #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr> resultMyParam <- result |>   addSettings(settingsColumns = \"my_parameter\") |>   filter(my_parameter == TRUE) |>   select(!\"my_parameter\") resultMyParam #> # A tibble: 126 × 13 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         2 mock     cohort_name cohort1     overall           overall         #>  2         2 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         2 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         2 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         2 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         2 mock     cohort_name cohort1     sex               Male            #>  7         2 mock     cohort_name cohort1     sex               Female          #>  8         2 mock     cohort_name cohort1     age_group         <40             #>  9         2 mock     cohort_name cohort1     age_group         >=40            #> 10         2 mock     cohort_name cohort2     overall           overall         #> # ℹ 116 more rows #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr> settings(resultMyParam) #> # A tibble: 2 × 5 #>   result_id result_type            package_name   package_version my_parameter #>       <int> <chr>                  <chr>          <chr>           <lgl>        #> 1         1 mock_summarised_result visOmopResults 0.4.0           NA           #> 2         2 second_mock_result     omopgenerics   1.0.0           TRUE resultMyParam <- result |>   filterSettings(my_parameter == TRUE) resultMyParam #> # A tibble: 126 × 13 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         2 mock     cohort_name cohort1     overall           overall         #>  2         2 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         2 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         2 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         2 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         2 mock     cohort_name cohort1     sex               Male            #>  7         2 mock     cohort_name cohort1     sex               Female          #>  8         2 mock     cohort_name cohort1     age_group         <40             #>  9         2 mock     cohort_name cohort1     age_group         >=40            #> 10         2 mock     cohort_name cohort2     overall           overall         #> # ℹ 116 more rows #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr> settings(resultMyParam) #> # A tibble: 1 × 5 #>   result_id result_type        package_name package_version my_parameter #>       <int> <chr>              <chr>        <chr>           <lgl>        #> 1         2 second_mock_result omopgenerics 1.0.0           TRUE"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/filterSummarisedResult.html","id":"filterstrata","dir":"Articles","previous_headings":"","what":"filterStrata","title":"Filter helpers","text":"Using mock data can try filter rows contain data related ‘Female’, problematic strata_name-strata_level display difficult easily filter “Female” columns: One option use splitStrata(), filter() uniteStrata() : Problem : extremely inefficient (rows must splitted united back). need know strata columns (potentially use strataColumns()). use multiple functions. exactly function filterStrata(): filterGroup() filterAdditional() work exactly way filterStrata() analogous columns. nice functionality may filter column/setting exist output warning + return emptySummarisedResult() can quite hekpful occasions.","code":"result |>   select(strata_name, strata_level) |>   distinct() #> # A tibble: 9 × 2 #>   strata_name       strata_level    #>   <chr>             <chr>           #> 1 overall           overall         #> 2 age_group &&& sex <40 &&& Male    #> 3 age_group &&& sex >=40 &&& Male   #> 4 age_group &&& sex <40 &&& Female  #> 5 age_group &&& sex >=40 &&& Female #> 6 sex               Male            #> 7 sex               Female          #> 8 age_group         <40             #> 9 age_group         >=40 result |>   splitStrata() |>   filter(sex == \"Female\") |>   uniteStrata(c(\"age_group\", \"sex\")) #> # A tibble: 84 × 13 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  2         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  3         1 mock     cohort_name cohort1     sex               Female          #>  4         1 mock     cohort_name cohort2     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort2     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort2     sex               Female          #>  7         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  8         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  9         1 mock     cohort_name cohort1     sex               Female          #> 10         1 mock     cohort_name cohort2     age_group &&& sex <40 &&& Female  #> # ℹ 74 more rows #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr> result |>   filterStrata(sex == \"Female\") #> # A tibble: 84 × 13 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  2         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  3         1 mock     cohort_name cohort1     sex               Female          #>  4         1 mock     cohort_name cohort2     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort2     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort2     sex               Female          #>  7         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  8         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  9         1 mock     cohort_name cohort1     sex               Female          #> 10         1 mock     cohort_name cohort2     age_group &&& sex <40 &&& Female  #> # ℹ 74 more rows #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr> result |>   filterSettings(setting_that_does_not_exist == 1) #> Warning: ! Variable filtering does not exist, returning empty result: #> ℹ In argument: `setting_that_does_not_exist == 1`. #> # A tibble: 0 × 13 #> # ℹ 13 variables: result_id <int>, cdm_name <chr>, group_name <chr>, #> #   group_level <chr>, strata_name <chr>, strata_level <chr>, #> #   variable_name <chr>, variable_level <chr>, estimate_name <chr>, #> #   estimate_type <chr>, estimate_value <chr>, additional_name <chr>, #> #   additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/filterSummarisedResult.html","id":"unite-functions","dir":"Articles","previous_headings":"","what":"unite functions","title":"Filter helpers","text":"previous section mentioned function uniteStrata() without explaining functionality let’s cover couple examples. uniteGroup(), uniteStrata() uniteAdditional() functions opposite split*() type functions: Note missing included (missing: overall-overall considered), example: uniteStrata(cols = c(\"age_group\", \"sex\", \"year\")) output : Note split year character vector instead integer. future releases conserving type may possible. uniteGroup() uniteAdditional() work exactly way uniteStrata() analogous columns.","code":"result |>   splitStrata() #> # A tibble: 252 × 13 #>    result_id cdm_name group_name  group_level age_group sex     variable_name   #>        <int> <chr>    <chr>       <chr>       <chr>     <chr>   <chr>           #>  1         1 mock     cohort_name cohort1     overall   overall number subjects #>  2         1 mock     cohort_name cohort1     <40       Male    number subjects #>  3         1 mock     cohort_name cohort1     >=40      Male    number subjects #>  4         1 mock     cohort_name cohort1     <40       Female  number subjects #>  5         1 mock     cohort_name cohort1     >=40      Female  number subjects #>  6         1 mock     cohort_name cohort1     overall   Male    number subjects #>  7         1 mock     cohort_name cohort1     overall   Female  number subjects #>  8         1 mock     cohort_name cohort1     <40       overall number subjects #>  9         1 mock     cohort_name cohort1     >=40      overall number subjects #> 10         1 mock     cohort_name cohort2     overall   overall number subjects #> # ℹ 242 more rows #> # ℹ 6 more variables: variable_level <chr>, estimate_name <chr>, #> #   estimate_type <chr>, estimate_value <chr>, additional_name <chr>, #> #   additional_level <chr> result |>   splitStrata() |>   uniteStrata(c(\"age_group\", \"sex\")) #> # A tibble: 252 × 13 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 242 more rows #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/filterSummarisedResult.html","id":"columns","dir":"Articles","previous_headings":"","what":"Columns","title":"Filter helpers","text":"Splitting tidying  can give many advantages, seen across different vignettes. One problems may face ability know available settings add, many columns generated splitting group. ’s visOmopResults created helper functions: settingsColumns() gives setting names available  object. groupColumns() gives new columns generated splitting group_name-group_level pair different columns. strataColumns() gives new columns generated splitting strata_name-strata_level pair different columns. additionalColumns() gives new columns generated splitting additional_name-additional_level pair different columns. tidyColumns() gives columns object tidy (tidy(result)). function useful know columns can included plot table functions. Let’s see different values example mock data set:","code":"settingsColumns(result) #> [1] \"result_type\"     \"package_name\"    \"package_version\" \"my_parameter\" groupColumns(result) #> [1] \"cohort_name\" strataColumns(result) #> [1] \"age_group\" \"sex\" additionalColumns(result) #> character(0) tidyColumns(result) #>  [1] \"cdm_name\"        \"cohort_name\"     \"age_group\"       \"sex\"             #>  [5] \"variable_name\"   \"variable_level\"  \"count\"           \"mean\"            #>  [9] \"sd\"              \"percentage\"      \"result_type\"     \"package_name\"    #> [13] \"package_version\" \"my_parameter\""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/plots.html","id":"plotting-with-a-summarised_result","dir":"Articles","previous_headings":"","what":"Plotting with a <summarised_result>","title":"Plotting tools","text":"purpose vignette turn summarise dataset penguins palmerpenguins package using PatientProfiles::summariseResult()","code":"library(PatientProfiles) library(palmerpenguins) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  summariseIsland <- function(island) {   penguins |>     filter(.data$island == .env$island) |>     summariseResult(       group = \"species\",       includeOverallGroup = TRUE,       strata = list(\"year\", \"sex\", c(\"year\", \"sex\")),       variables = c(         \"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\",          \"sex\"),       estimates = c(         \"median\", \"q25\", \"q75\", \"min\", \"max\", \"count_missing\", \"count\",          \"percentage\", \"density\")     ) |>     suppressMessages() |>     mutate(cdm_name = island) }  penguinsSummary <- bind(   summariseIsland(\"Torgersen\"),    summariseIsland(\"Biscoe\"),    summariseIsland(\"Dream\") )"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/plots.html","id":"plotting-principles","dir":"Articles","previous_headings":"Plotting with a <summarised_result>","what":"Plotting principles","title":"Plotting tools","text":"Although input visOmopResult plot function can <summarised_result> referring inputs, use columns shown tidy format: column names seen <summarised_result> format: ’s important thing aware , otherwise populating arguments becomes bit tricky. always subset <summarised_result> variable_name interest calling plotting functions. advised combine results different variables don’t share common estimates want plot tidy form NAs created.","code":"tidyColumns(penguinsSummary) #>  [1] \"cdm_name\"        \"species\"         \"year\"            \"sex\"             #>  [5] \"variable_name\"   \"variable_level\"  \"count\"           \"median\"          #>  [9] \"q25\"             \"q75\"             \"min\"             \"max\"             #> [13] \"count_missing\"   \"density_x\"       \"density_y\"       \"percentage\"      #> [17] \"result_type\"     \"package_name\"    \"package_version\" colnames(penguinsSummary) #>  [1] \"result_id\"        \"cdm_name\"         \"group_name\"       \"group_level\"      #>  [5] \"strata_name\"      \"strata_level\"     \"variable_name\"    \"variable_level\"   #>  [9] \"estimate_name\"    \"estimate_type\"    \"estimate_value\"   \"additional_name\"  #> [13] \"additional_level\""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/plots.html","id":"scatter-plot","dir":"Articles","previous_headings":"Plotting with a <summarised_result>","what":"Scatter plot","title":"Plotting tools","text":"can create simple scatter plots using plotScatter() let’s see examples:","code":"penguinsSummary |>   filter(variable_name == \"bill_depth_mm\") |>   filterStrata(year != \"overall\", sex == \"overall\") |>   scatterPlot(     x = \"year\",      y = \"median\",     line = TRUE,      point = TRUE,     ribbon = FALSE,     facet = \"cdm_name\",     colour = \"species\"   ) penguinsSummary |>   filter(variable_name %in% c(\"bill_length_mm\", \"bill_depth_mm\"))|>   filterStrata(year == \"overall\", sex == \"overall\") |>   filterGroup(species != \"overall\") |>   scatterPlot(     x = \"density_x\",      y = \"density_y\",     line = TRUE,      point = FALSE,     ribbon = FALSE,     facet = cdm_name ~ variable_name,     colour = \"species\"   ) +   ggplot2::facet_grid(cdm_name ~ variable_name, scales = \"free_x\") penguinsSummary |>   filter(variable_name == \"flipper_length_mm\") |>   filterStrata(year != \"overall\", sex %in% c(\"female\", \"male\")) |>   scatterPlot(     x = c(\"year\", \"sex\"),      y = \"median\",     ymin = \"q25\",     ymax = \"q75\",     line = FALSE,      point = TRUE,     ribbon = FALSE,     facet = cdm_name ~ species,     colour = \"sex\",     group = c(\"year\", \"sex\")   ) +   ggplot2::coord_flip() +   ggplot2::labs(y = \"Flipper length (mm)\") penguinsSummary |>   filter(variable_name %in% c(     \"flipper_length_mm\", \"bill_length_mm\", \"bill_depth_mm\")) |>   filterStrata(sex == \"overall\") |>   scatterPlot(     x = \"year\",      y = \"median\",     ymin = \"min\",     ymax = \"max\",     line = FALSE,      point = TRUE,     ribbon = TRUE,     facet = cdm_name ~ species,     colour = \"variable_name\",     group = c(\"variable_name\")   )"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/plots.html","id":"bar-plot","dir":"Articles","previous_headings":"Plotting with a <summarised_result>","what":"Bar plot","title":"Plotting tools","text":"Let’s create simple bar plots:","code":"penguinsSummary |>   filter(variable_name == \"number records\") |>   filterGroup(species != \"overall\") |>   filterStrata(sex != \"overall\", year != \"overall\") |>   barPlot(     x = \"year\",     y = \"count\",     colour = \"sex\",     facet = cdm_name ~ species   )"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/plots.html","id":"box-plot","dir":"Articles","previous_headings":"Plotting with a <summarised_result>","what":"Box plot","title":"Plotting tools","text":"Let’s create box plots body mass:  can specify want facet using formula:  Arguments ~ specify rows, arguments columns, see another example faceting also sex columns. case colouring year:  Note didnt specify x levels x axis, box plots produced anyway.","code":"penguinsSummary |>   filter(variable_name == \"body_mass_g\") |>   boxPlot(x = \"year\", facet = c(\"cdm_name\", \"species\"), colour = \"sex\") penguinsSummary |>   filter(variable_name == \"body_mass_g\") |>   boxPlot(x = \"year\", facet = cdm_name ~ species, colour = \"sex\") penguinsSummary |>   filter(variable_name == \"body_mass_g\") |>   filterGroup(species != \"overall\") |>   filterStrata(sex %in% c(\"female\", \"male\"), year != \"overall\") |>   boxPlot(facet = cdm_name ~ species + sex, colour = \"year\")"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/plots.html","id":"plotting-with-a-data-frame","dir":"Articles","previous_headings":"","what":"Plotting with a <data.frame>","title":"Plotting tools","text":"Plotting functions can also used normal <data.frame>. case use tidy format penguinsSummary. can seen normal data.frame: can custom plotting, example replicating last plot tidy format:","code":"penguinsTidy <- penguinsSummary |>   filter(!estimate_name %in% c(\"density_x\", \"density_y\")) |> # remove density for simplicity   tidy() penguinsTidy |> glimpse() #> Rows: 720 #> Columns: 17 #> $ cdm_name        <chr> \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"T… #> $ species         <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\",… #> $ year            <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\",… #> $ sex             <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\",… #> $ variable_name   <chr> \"number records\", \"bill_length_mm\", \"bill_depth_mm\", \"… #> $ variable_level  <chr> NA, NA, NA, NA, NA, \"female\", \"male\", NA, NA, NA, NA, … #> $ count           <int> 52, NA, NA, NA, NA, 24, 23, 5, 20, 16, 16, NA, NA, NA,… #> $ median          <int> NA, 38, 18, 191, 3700, NA, NA, NA, NA, NA, NA, 38, 38,… #> $ q25             <int> NA, 36, 17, 187, 3338, NA, NA, NA, NA, NA, NA, 37, 35,… #> $ q75             <int> NA, 41, 19, 195, 4000, NA, NA, NA, NA, NA, NA, 39, 41,… #> $ min             <int> NA, 33, 15, 176, 2900, NA, NA, NA, NA, NA, NA, 34, 33,… #> $ max             <int> NA, 46, 21, 210, 4700, NA, NA, NA, NA, NA, NA, 46, 45,… #> $ count_missing   <int> NA, 1, 1, 1, 1, NA, NA, NA, NA, NA, NA, 1, 0, 0, 1, 0,… #> $ percentage      <dbl> NA, NA, NA, NA, NA, 46.153846, 44.230769, 9.615385, NA… #> $ result_type     <chr> \"summarise_table\", \"summarise_table\", \"summarise_table… #> $ package_name    <chr> \"PatientProfiles\", \"PatientProfiles\", \"PatientProfiles… #> $ package_version <chr> \"1.2.0\", \"1.2.0\", \"1.2.0\", \"1.2.0\", \"1.2.0\", \"1.2.0\", … penguinsTidy |> class() #> [1] \"tbl_df\"     \"tbl\"        \"data.frame\" penguinsTidy |>   filter(     variable_name == \"body_mass_g\",     species != \"overall\",     sex %in% c(\"female\", \"male\"),     year != \"overall\"   ) |>   boxPlot(facet = cdm_name ~ species + sex, colour = \"year\")"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/plots.html","id":"custom-plotting","dir":"Articles","previous_headings":"","what":"Custom plotting","title":"Plotting tools","text":"tidy format useful apply custom ggplot2 function may interested :","code":"library(ggplot2) penguinsSummary |>   filter(variable_name == \"number records\") |>   tidy() |>   ggplot(aes(x = year, y = sex, fill = count, label = count)) +   geom_tile() +   scale_fill_viridis_c(trans = \"log\") +    geom_text() +   facet_grid(cdm_name ~ species)"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/plots.html","id":"combine-with-ggplot2","dir":"Articles","previous_headings":"","what":"Combine with ggplot2","title":"Plotting tools","text":"plotting functions wrapper around ggplot2 package, outputs plotting functions can later customised ggplot2 similar tools. example can use ggplot2::labs() change labels ggplot2::theme() move location legend.  can also use ggplot2::ggsave() later save one plots ‘.png’ file.","code":"penguinsSummary |>   filter(     group_level != \"overall\",     strata_name == \"year &&& sex\",     !grepl(\"NA\", strata_level),     variable_name == \"body_mass_g\") |>   boxPlot(facet = cdm_name ~ species + sex, colour = \"year\") +   ylim(c(0, 6500)) +   labs(x = \"My custom x label\") +   theme(legend.position = \"top\") ggsave(   \"figure8.png\", plot = last_plot(), device = \"png\", width = 15, height = 12,    units = \"cm\", dpi = 300)"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/plots.html","id":"combine-with-plotly","dir":"Articles","previous_headings":"","what":"Combine with plotly","title":"Plotting tools","text":"Although package currently provide plotly functionality ggplots can easily converted <plotly> ones using function plotly::ggplotly(). can make interactivity plots better.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tables.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Formatting tables","text":"visOmopResults package provides user-friendly tools creating well-formatted tables plots publication-ready. vignette, focus specifically table formatting functionalities. package supports three table formats: <tibble>, <gt>, <flextable>. <tibble> <data.frame> R object, <gt> <flextable> designed create publication-ready tables can exported different formats (e.g., PNG, Word, PDF, HTML) used ShinyApps, RMarkdown, Quarto, . Although primary aim package simplify handling <summarised_result> class (see omopgenerics details), functionalities can applied <data.frame> certain requirements met.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tables.html","id":"types-of-table-functions","dir":"Articles","previous_headings":"Introduction","what":"Types of Table Functions","title":"Formatting tables","text":"two main categories table functions package: Main Table Functions: Comprehensive functions like visOmopTable() visTable() allow users fully format tables, including specifying headers, grouping columns, customizing styles. Additional Table Formatting Functions: format function set provides granular control specific table elements, enabling advanced customization beyond main functions. vignette guide usage functions.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tables.html","id":"main-functions","dir":"Articles","previous_headings":"","what":"Main Functions","title":"Formatting tables","text":"functions built top format functions, providing quick straightforward way format tables.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tables.html","id":"vistable","dir":"Articles","previous_headings":"Main Functions","what":"visTable()","title":"Formatting tables","text":"visTable() flexible function designed format <data.frame>. Let’s demonstrate usage dataset palmerpenguins package. can format data <gt> table using visTable() follows: use arguments estimateName header, <data.frame> must estimates arranged three columns: estimate_name, estimate_type, estimate_value. Let’s reshape example dataset accordingly demonstrate creating <flextable> object: Sex Estimate name Species Adelie Gentoo Chinstrap Island Biscoe Torgersen Dream Biscoe Dream female   Bill length (mm) 36.64 36.61 36.27 45.30 46.00  Bill depth (mm) 17.22 17.40 17.79 14.13 17.30  Flipper length (mm) 186.56 190.00 189.00 213.00 192.67 male   Bill length (mm) 40.76 40.92 40.11 48.54 51.40  Bill depth (mm) 19.03 18.84 18.89 15.70 19.60  Flipper length (mm) 192.56 193.50 195.00 222.09 202.78","code":"library(visOmopResults) library(palmerpenguins) library(dplyr) library(tidyr) x <- penguins |>    filter(!is.na(sex) & year == 2008) |>    select(!\"body_mass_g\") |>   summarise(across(ends_with(\"mm\"), ~mean(.x)), .by = c(\"species\", \"island\", \"sex\")) head(x) #> # A tibble: 6 × 6 #>   species island    sex    bill_length_mm bill_depth_mm flipper_length_mm #>   <fct>   <fct>     <fct>           <dbl>         <dbl>             <dbl> #> 1 Adelie  Biscoe    female           36.6          17.2              187. #> 2 Adelie  Biscoe    male             40.8          19.0              193. #> 3 Adelie  Torgersen female           36.6          17.4              190  #> 4 Adelie  Torgersen male             40.9          18.8              194. #> 5 Adelie  Dream     female           36.3          17.8              189  #> 6 Adelie  Dream     male             40.1          18.9              195 visTable(   result = x,   groupColumn = c(\"sex\"),   rename = c(\"Bill length (mm)\" = \"bill_length_mm\",              \"Bill depth (mm)\" = \"bill_depth_mm\",              \"Flipper length (mm)\" = \"flipper_length_mm\",              \"Body mass (g)\" = \"body_mass_g\"),   type = \"gt\",   hide = \"year\" ) # Transforming the dataset to include estimate columns x <- x |>   pivot_longer(     cols = ends_with(\"_mm\"),      names_to = \"estimate_name\",      values_to = \"estimate_value\"   ) |>   mutate(estimate_type = \"numeric\")  # Creating a formatted flextable visTable(   result = x,   estimateName = c(     \"Bill length (mm)\" = \"<bill_length_mm>\",     \"Bill depth (mm)\" = \"<bill_depth_mm>\",     \"Flipper length (mm)\" = \"<flipper_length_mm>\"   ),   header = c(\"species\", \"island\"),   groupColumn = \"sex\",   type = \"flextable\",   hide = c(\"year\", \"estimate_type\") )"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tables.html","id":"visomoptable","dir":"Articles","previous_headings":"Main Functions","what":"visOmopTable()","title":"Formatting tables","text":"visOmopTable() extends functionality visTable() additional features tailored specifically handling <summarised_result> objects, making easier work standardized result formats. Let’s demonstrate visOmopTable() mock <summarised_result>: workflow quite similar visTable(), includes specific enhancements <summarised_result> objects: Automatic splitting: result object always processed using splitAll() function. Thereby, column names use arguments must based split result. settingsColumns argument: Use argument specify settings displayed main table. columns specified can also referenced arguments header, rename, groupColumn. header argument: accepts specific <summarised_result> inputs, addition typical usage visTable(). example, use “strata” header display variables strata_name, use “settings” show settings specified settingsColumns. Hidden columns: result_id estimate_type columns always hidden serve helper columns internal processes. Suppressed estimates: result object processed suppress(), obscured estimates can displayed default na value “<{minCellCount}” corresponding minimum count value used. can controlled using showMinCellCount argument. next example, visOmopTable() generates <gt> table displaying suppressed estimates (counts 1,000,000) specified minimum cell count.","code":"# Creating a mock summarised result result <- mockSummarisedResult() |>   filter(strata_name == \"age_group &&& sex\")  # Displaying the first few rows head(result) #> # A tibble: 6 × 13 #>   result_id cdm_name group_name  group_level strata_name       strata_level    #>       <int> <chr>    <chr>       <chr>       <chr>             <chr>           #> 1         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #> 2         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #> 3         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #> 4         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #> 5         1 mock     cohort_name cohort2     age_group &&& sex <40 &&& Male    #> 6         1 mock     cohort_name cohort2     age_group &&& sex >=40 &&& Male   #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>  # Creating a formatted gt table visOmopTable(   result = result,   estimateName = c(     \"N%\" = \"<count> (<percentage>)\",     \"N\" = \"<count>\",     \"Mean (SD)\" = \"<mean> (<sd>)\"   ),   header = c(\"package_name\", \"age_group\"),   groupColumn = c(\"cohort_name\", \"sex\"),   settingsColumns = \"package_name\",   type = \"gt\" ) result |>   suppress(minCellCount = 1000000) |>   visOmopTable(     estimateName = c(       \"N%\" = \"<count> (<percentage>)\",       \"N\" = \"<count>\",       \"Mean (SD)\" = \"<mean> (<sd>)\"     ),     header = c(\"My visOmopTable\", \"group\"),     groupColumn = c(\"strata\"),     hide = c(\"cdm_name\"),     showMinCellCount = TRUE,     type = \"gt\"   )"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tables.html","id":"styling-tables","dir":"Articles","previous_headings":"Main Functions","what":"Styling tables","title":"Formatting tables","text":"Tables displayed visOmopResults() follow default style, customization possible .options argument. argument allows users modify various formatting aspects using options format functions (see format Functions section learn ). table details format function styling option belongs , along description option: view default .options settings used vis tables, use following function:","code":"optionsTable() #> $decimals #>    integer percentage    numeric proportion  #>          0          2          2          2  #>  #> $decimalMark #> [1] \".\" #>  #> $bigMark #> [1] \",\" #>  #> $keepNotFormatted #> [1] TRUE #>  #> $useFormatOrder #> [1] TRUE #>  #> $delim #> [1] \"\\n\" #>  #> $includeHeaderName #> [1] TRUE #>  #> $includeHeaderKey #> [1] TRUE #>  #> $style #> [1] \"default\" #>  #> $na #> [1] \"-\" #>  #> $title #> NULL #>  #> $subtitle #> NULL #>  #> $caption #> NULL #>  #> $groupAsColumn #> [1] FALSE #>  #> $groupOrder #> NULL #>  #> $merge #> [1] \"all_columns\""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tables.html","id":"styling-gt-and-flextable","dir":"Articles","previous_headings":"Main Functions > Styling tables","what":"Styling <gt> and <flextable>","title":"Formatting tables","text":"inspect code default styles <gt> <flextable>, use functions:","code":"gtStyle() #> list(header = list(gt::cell_fill(color = \"#c8c8c8\"), gt::cell_text(weight = \"bold\",  #>     align = \"center\")), header_name = list(gt::cell_fill(color = \"#d9d9d9\"),  #>     gt::cell_text(weight = \"bold\", align = \"center\")), header_level = list(gt::cell_fill(color = \"#e1e1e1\"),  #>     gt::cell_text(weight = \"bold\", align = \"center\")), column_name = list(gt::cell_text(weight = \"bold\",  #>     align = \"center\")), group_label = list(gt::cell_fill(color = \"#e9e9e9\"),  #>     gt::cell_text(weight = \"bold\")), title = list(gt::cell_text(weight = \"bold\",  #>     size = 15, align = \"center\")), subtitle = list(gt::cell_text(weight = \"bold\",  #>     size = 12, align = \"center\")), body = list())  flextableStyle() #> list(header = list(cell = officer::fp_cell(background.color = \"#c8c8c8\"),  #>     text = officer::fp_text(bold = TRUE)), header_name = list(cell = officer::fp_cell(background.color = \"#d9d9d9\"),  #>     text = officer::fp_text(bold = TRUE)), header_level = list(cell = officer::fp_cell(background.color = \"#e1e1e1\"),  #>     text = officer::fp_text(bold = TRUE)), column_name = list(text = officer::fp_text(bold = TRUE)),  #>     group_label = list(cell = officer::fp_cell(background.color = \"#e9e9e9\",  #>         border = officer::fp_border(color = \"gray\")), text = officer::fp_text(bold = TRUE)),  #>     title = list(text = officer::fp_text(bold = TRUE, font.size = 15)),  #>     subtitle = list(text = officer::fp_text(bold = TRUE, font.size = 12)),  #>     body = list())"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tables.html","id":"format-functions","dir":"Articles","previous_headings":"","what":"format Functions","title":"Formatting tables","text":"format set functions can used pipeline transform format <data.frame> <summarised_result> object. , ’ll demonstrate utilize functions step--step manner.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tables.html","id":"format-estimates","dir":"Articles","previous_headings":"format Functions","what":"1) Format Estimates","title":"Formatting tables","text":"formatEstimateName() formatEstimateValue() functions enable customize naming display estimates table. illustrate usage, ’ll continue result dataset. Let’s first take look estimates formatting applied:","code":"result |>    filterGroup(cohort_name == \"cohort1\") |>  # visOmopResult filter function   filterStrata(age_group == \"<40\", sex == \"Female\") |>  # visOmopResult filter function   select(variable_name, variable_level, estimate_name, estimate_type, estimate_value) #> # A tibble: 7 × 5 #>   variable_name   variable_level estimate_name estimate_type estimate_value   #>   <chr>           <chr>          <chr>         <chr>         <chr>            #> 1 number subjects NA             count         integer       1956698          #> 2 age             NA             mean          numeric       63.6465614894405 #> 3 age             NA             sd            numeric       3.15241752425209 #> 4 Medications     Amoxiciline    count         integer       27860            #> 5 Medications     Amoxiciline    percentage    percentage    21.3172711199149 #> 6 Medications     Ibuprofen      count         integer       66887            #> 7 Medications     Ibuprofen      percentage    percentage    91.8803214561194"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tables.html","id":"estimate-values","dir":"Articles","previous_headings":"format Functions > 1) Format Estimates","what":"1.1) Estimate values","title":"Formatting tables","text":"formatEstimateValue() function allows specify number decimals different estimate_types estimate_names, well customize decimal thousand separators. Let’s see previous estimates updated afterwars: can see, estimates now reflect specified formatting rules.","code":"# Formatting estimate values result <- result |>   formatEstimateValue(     decimals = c(integer = 0, numeric = 4, percentage = 2),     decimalMark = \".\",     bigMark = \",\"   )  # Displaying the formatted subset result |>    filterGroup(cohort_name == \"cohort1\") |>     filterStrata(age_group == \"<40\", sex == \"Female\") |>    select(variable_name, variable_level, estimate_name, estimate_type, estimate_value) #> # A tibble: 7 × 5 #>   variable_name   variable_level estimate_name estimate_type estimate_value #>   <chr>           <chr>          <chr>         <chr>         <chr>          #> 1 number subjects NA             count         integer       1,956,698      #> 2 age             NA             mean          numeric       63.6466        #> 3 age             NA             sd            numeric       3.1524         #> 4 Medications     Amoxiciline    count         integer       27,860         #> 5 Medications     Amoxiciline    percentage    percentage    21.32          #> 6 Medications     Ibuprofen      count         integer       66,887         #> 7 Medications     Ibuprofen      percentage    percentage    91.88"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tables.html","id":"estimate-names","dir":"Articles","previous_headings":"format Functions > 1) Format Estimates","what":"1.2) Estimate names","title":"Formatting tables","text":"Next, format estimate names using formatEstimateName() function. function allows us combine counts percentages “N (%)”, among estimate combinations Now, estimate names displayed specified, “N (%)” counts percentages. keepNotFormatted argument ensures unformatted rows remain dataset, useFormatOrder allows control display order estimates.","code":"# Formatting estimate names result <- result |>    formatEstimateName(     estimateName = c(       \"N (%)\" = \"<count> (<percentage>%)\",        \"N\" = \"<count>\",       \"Mean (SD)\" = \"<mean> (<sd>)\"     ),     keepNotFormatted = TRUE,     useFormatOrder = FALSE   )  # Displaying the formatted subset with new estimate names result |>    filterGroup(cohort_name == \"cohort1\") |>     filterStrata(age_group == \"<40\", sex == \"Female\") |>    select(variable_name, variable_level, estimate_name, estimate_type, estimate_value) #> # A tibble: 4 × 5 #>   variable_name   variable_level estimate_name estimate_type estimate_value   #>   <chr>           <chr>          <chr>         <chr>         <chr>            #> 1 number subjects NA             N             character     1,956,698        #> 2 age             NA             Mean (SD)     character     63.6466 (3.1524) #> 3 Medications     Amoxiciline    N (%)         character     27,860 (21.32%)  #> 4 Medications     Ibuprofen      N (%)         character     66,887 (91.88%)"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tables.html","id":"format-header","dir":"Articles","previous_headings":"format Functions","what":"2) Format Header","title":"Formatting tables","text":"formatHeader() used create complex multi-level headers tables, making easy present grouped data clearly.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tables.html","id":"header-levels","dir":"Articles","previous_headings":"format Functions > 2) Format Header","what":"Header levels","title":"Formatting tables","text":"3 different levels headers, identified following keys: header: Custom labels correspond column names table values. header_name: Labels derived column names. Can omitted includeHeaderName =  FALSE. header_level: Labels derived values within columns set header. keys, together delimiter header levels (delim) used formatTable() format style gt flextable tables. Let’s create multi-level header strata columns, including three keys. show column names transformed: table formatting, won’t include header_name labels. Let’s see looks exclude :","code":"result |>   mutate(across(c(\"strata_name\", \"strata_level\"), ~ gsub(\"&&&\", \"and\", .x))) |>   formatHeader(     header = c(\"Stratifications\", \"strata_name\", \"strata_level\"),     delim = \"\\n\",     includeHeaderName = TRUE,     includeHeaderKey = TRUE   ) |>    colnames() #>  [1] \"result_id\"                                                                                                                                    #>  [2] \"cdm_name\"                                                                                                                                     #>  [3] \"group_name\"                                                                                                                                   #>  [4] \"group_level\"                                                                                                                                  #>  [5] \"variable_name\"                                                                                                                                #>  [6] \"variable_level\"                                                                                                                               #>  [7] \"estimate_name\"                                                                                                                                #>  [8] \"estimate_type\"                                                                                                                                #>  [9] \"additional_name\"                                                                                                                              #> [10] \"additional_level\"                                                                                                                             #> [11] \"[header]Stratifications\\n[header_name]strata_name\\n[header_level]age_group and sex\\n[header_name]strata_level\\n[header_level]<40 and Male\"    #> [12] \"[header]Stratifications\\n[header_name]strata_name\\n[header_level]age_group and sex\\n[header_name]strata_level\\n[header_level]>=40 and Male\"   #> [13] \"[header]Stratifications\\n[header_name]strata_name\\n[header_level]age_group and sex\\n[header_name]strata_level\\n[header_level]<40 and Female\"  #> [14] \"[header]Stratifications\\n[header_name]strata_name\\n[header_level]age_group and sex\\n[header_name]strata_level\\n[header_level]>=40 and Female\" result <- result |>   mutate(across(c(\"strata_name\", \"strata_level\"), ~ gsub(\"&&&\", \"and\", .x))) |>   formatHeader(     header = c(\"Stratifications\", \"strata_name\", \"strata_level\"),     delim = \"\\n\",     includeHeaderName = FALSE,     includeHeaderKey = TRUE   )    colnames(result) #>  [1] \"result_id\"                                                                               #>  [2] \"cdm_name\"                                                                                #>  [3] \"group_name\"                                                                              #>  [4] \"group_level\"                                                                             #>  [5] \"variable_name\"                                                                           #>  [6] \"variable_level\"                                                                          #>  [7] \"estimate_name\"                                                                           #>  [8] \"estimate_type\"                                                                           #>  [9] \"additional_name\"                                                                         #> [10] \"additional_level\"                                                                        #> [11] \"[header]Stratifications\\n[header_level]age_group and sex\\n[header_level]<40 and Male\"    #> [12] \"[header]Stratifications\\n[header_level]age_group and sex\\n[header_level]>=40 and Male\"   #> [13] \"[header]Stratifications\\n[header_level]age_group and sex\\n[header_level]<40 and Female\"  #> [14] \"[header]Stratifications\\n[header_level]age_group and sex\\n[header_level]>=40 and Female\""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tables.html","id":"format-table","dir":"Articles","previous_headings":"format Functions","what":"3) Format Table","title":"Formatting tables","text":"formatTable() function final step formatting pipeline, formatted <data.frame> converted either <gt> <flextable>.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tables.html","id":"prepare-data","dir":"Articles","previous_headings":"format Functions > 3) Format Table","what":"Prepare data","title":"Formatting tables","text":"using formatTable(), ’ll tidy <data.frame> splitting group additional name-level columns (see vignette tidying <summarised_result>), drop unwanted columns:","code":"result <- result |>   splitGroup() |>   splitAdditional() |>   select(!c(\"result_id\", \"estimate_type\", \"cdm_name\")) head(result) #> # A tibble: 6 × 8 #>   cohort_name variable_name  variable_level estimate_name [header]Stratificati…¹ #>   <chr>       <chr>          <chr>          <chr>         <chr>                  #> 1 cohort1     number subjec… NA             N             3,203,857              #> 2 cohort2     number subjec… NA             N             7,353,196              #> 3 cohort1     age            NA             Mean (SD)     22.5563 (3.8918)       #> 4 cohort2     age            NA             Mean (SD)     68.0163 (0.6522)       #> 5 cohort1     Medications    Amoxiciline    N (%)         54,248 (92.00%)        #> 6 cohort2     Medications    Amoxiciline    N (%)         37,697 (71.83%)        #> # ℹ abbreviated name: #> #   ¹​`[header]Stratifications\\n[header_level]age_group and sex\\n[header_level]<40 and Male` #> # ℹ 3 more variables: #> #   `[header]Stratifications\\n[header_level]age_group and sex\\n[header_level]>=40 and Male` <chr>, #> #   `[header]Stratifications\\n[header_level]age_group and sex\\n[header_level]<40 and Female` <chr>, #> #   `[header]Stratifications\\n[header_level]age_group and sex\\n[header_level]>=40 and Female` <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tables.html","id":"use-formattable","dir":"Articles","previous_headings":"format Functions > 3) Format Table","what":"Use formatTable()","title":"Formatting tables","text":"Now data cleaned organized, formatTable() can used create well-structured <gt> <flextable> object. examples , used default style defined visOmopResults package (use gtStyle() flextableStyle() see styles). However, ’s possible customize appearance different parts table better suit needs.","code":"result |>   formatTable(     type = \"gt\",     delim = \"\\n\",     style = \"default\",     na = \"-\",     title = \"My formatted table!\",     subtitle = \"Created with the `visOmopResults` R package.\",     caption = NULL,     groupColumn = \"cohort_name\",     groupAsColumn = FALSE,     groupOrder = c(\"cohort2\", \"cohort1\"),     merge = \"variable_name\"   )"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tables.html","id":"customizing-table-styles","dir":"Articles","previous_headings":"format Functions > 3) Format Table","what":"Customizing Table Styles","title":"Formatting tables","text":"Let’s start applying custom style <gt> table: creating similarly styled <flextable>, office R package required access specific formatting functions. formatted table! Created `visOmopResults` R package. cohort_name variable_name variable_level estimate_name Stratifications age_group sex <40 Male >=40 Male <40 Female >=40 Female cohort2   number subjects - N 7,353,196 1,959,567 9,805,397 7,415,215  age - Mean (SD) 68.0163 (0.6522) 49.8846 (3.5421) 64.1679 (8.2520) 66.0284 (2.7382)  Medications Amoxiciline N (%) 37,697 (71.83%) 55,991 (24.13%) 85,708 (54.70%) 38,481 (83.48%)   Ibuprofen N (%) 1,148 (16.46%) 88,825 (66.32%) 99,635 (85.66%) 50,019 (92.65%) cohort1   number subjects - N 3,203,857 4,023,282 1,956,698 4,035,381  age - Mean (SD) 22.5563 (3.8918) 30.0831 (4.6119) 63.6466 (3.1524) 47.9025 (1.7468)  Medications Amoxiciline N (%) 54,248 (92.00%) 54,460 (40.07%) 27,860 (21.32%) 44,670 (67.18%)   Ibuprofen N (%) 21,843 (56.69%) 41,836 (25.30%) 66,887 (91.88%) 50,765 (86.74%)","code":"result |>   formatTable(     type = \"gt\",     delim = \"\\n\",     style = list(       \"header\" = list(gt::cell_text(weight = \"bold\"),                        gt::cell_fill(color = \"orange\")),       \"header_level\" = list(gt::cell_text(weight = \"bold\"),                        gt::cell_fill(color = \"yellow\")),       \"column_name\" = gt::cell_text(weight = \"bold\"),       \"group_label\" = list(gt::cell_fill(color = \"blue\"),                            gt::cell_text(color = \"white\", weight = \"bold\")),       \"title\" = list(gt::cell_text(size = 20, weight = \"bold\")),       \"subtitle\" = list(gt::cell_text(size = 15)),       \"body\" = gt::cell_text(color = \"red\")     ),     na = \"-\",     title = \"My formatted table!\",     subtitle = \"Created with the `visOmopResults` R package.\",     caption = NULL,     groupColumn = \"cohort_name\",     groupAsColumn = FALSE,     groupOrder = c(\"cohort2\", \"cohort1\"),     merge = \"variable_name\"   ) result |>   formatTable(     type = \"flextable\",     delim = \"\\n\",     style = list(       \"header\" = list(         \"cell\" = officer::fp_cell(background.color = \"orange\"),         \"text\" = officer::fp_text(bold = TRUE)),       \"header_level\" = list(         \"cell\" = officer::fp_cell(background.color = \"yellow\"),         \"text\" = officer::fp_text(bold = TRUE)),       \"column_name\" = list(\"text\" = officer::fp_text(bold = TRUE)),       \"group_label\" = list(         \"cell\" = officer::fp_cell(background.color = \"blue\"),         \"text\" = officer::fp_text(bold = TRUE, color = \"white\")),       \"title\" = list(\"text\" = officer::fp_text(bold = TRUE, font.size = 20)),       \"subtitle\" = list(\"text\" = officer::fp_text(font.size = 15)),       \"body\" = list(\"text\" = officer::fp_text(color = \"red\"))     ),     na = \"-\",     title = \"My formatted table!\",     subtitle = \"Created with the `visOmopResults` R package.\",     caption = NULL,     groupColumn = \"cohort_name\",     groupAsColumn = FALSE,     groupOrder = c(\"cohort2\", \"cohort1\"),     merge = \"variable_name\"   )"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tidySummarisedResult.html","id":"summarised_result-format","dir":"Articles","previous_headings":"","what":"<summarised_result> format","title":"Tidy your summarised result object","text":"<summarised_result> format standard output defined omopgenerics. fact standardised output make powerful tool multiple functions can export format built functionalities top , can seen tables plots vignettes. standard output can times hard manipulate custom analysis. visOmopResults contains tools tidy <summarised_result> object covered vignette.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tidySummarisedResult.html","id":"tidy-summarised_result","dir":"Articles","previous_headings":"","what":"Tidy <summarised_result>","title":"Tidy your summarised result object","text":"visOmopResults defines method tidy <summarised_result> object, function :","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tidySummarisedResult.html","id":"split-group-strata-and-additional-pairs-into-separate-columns","dir":"Articles","previous_headings":"Tidy <summarised_result>","what":"1. Split group, strata, and additional pairs into separate columns:","title":"Tidy your summarised result object","text":"<summarised_result> object following pair columns: group_name-group_level, strata_name-strata_level, additional_name-additional_level. pairs use &&& separator combine multiple fields, example want combine cohort_name age_group group_name-group_level pair: group_name = \"cohort_name &&& age_group\" group_level = \"my_cohort &&& <40\". default aggregation produced group_name-group_level pair: group_name = \"overall\" group_level = \"overall\". ORIGINAL FORMAT: tidy format puts one values columns. Making easier manipulate time output standardised anymore <summarised_result> object different number names columns. Missing values filled “overall” label. TIDY FORMAT:","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tidySummarisedResult.html","id":"add-settings-of-the-summarised_result-object-as-columns","dir":"Articles","previous_headings":"Tidy <summarised_result>","what":"2. Add settings of the <summarised_result> object as columns:","title":"Tidy your summarised result object","text":"<summarised_result> object setting attribute relates ‘result_id’ column different set settings. columns ‘result_type’, ‘package_name’ ‘package_version’ always present settings, may extra parameters depending object created. <summarised_result> format need use settings() functions see variables: ORIGINAL FORMAT: settings: <summarised_result>: tidy format add settings columns, making value repeated multiple times (one row per result_id settings, whereas can multiple rows <summarised_result> object). column ‘result_id’ eliminated provide information anymore. loose standardisation (multiple different settings), gain flexibility: TIDY FORMAT:","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tidySummarisedResult.html","id":"pivot-estimates-as-columns","dir":"Articles","previous_headings":"Tidy <summarised_result>","what":"3. Pivot estimates as columns:","title":"Tidy your summarised result object","text":"<summarised_result> format estimates displayed 3 columns: ‘estimate_name’ indicates name estimate. ‘estimate_type’ indicates type estimate (casted character). Possible values : numeric, integer, date, character, proportion, percentage, logical. ‘estimate_value’ value estimate <character>. ORIGINAL FORMAT: tidy format pivot estimates, creating new column one ‘estimate_name’ values. columns casted ‘estimate_type’. multiple estimate_type(s) estimate_name won’t casted displayed character (warning thrown). Missing data populated NAs. TIDY FORMAT:","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tidySummarisedResult.html","id":"example","dir":"Articles","previous_headings":"Tidy <summarised_result>","what":"Example","title":"Tidy your summarised result object","text":"Let’s see simple example toy data:","code":"library(visOmopResults) result <- mockSummarisedResult() result |>   tidy() #> # A tibble: 72 × 13 #>    cdm_name cohort_name age_group sex     variable_name   variable_level   count #>    <chr>    <chr>       <chr>     <chr>   <chr>           <chr>            <int> #>  1 mock     cohort1     overall   overall number subjects NA             9200055 #>  2 mock     cohort1     <40       Male    number subjects NA             4007202 #>  3 mock     cohort1     >=40      Male    number subjects NA             2131727 #>  4 mock     cohort1     <40       Female  number subjects NA             6717668 #>  5 mock     cohort1     >=40      Female  number subjects NA              586141 #>  6 mock     cohort1     overall   Male    number subjects NA             9970691 #>  7 mock     cohort1     overall   Female  number subjects NA             1490355 #>  8 mock     cohort1     <40       overall number subjects NA             5185566 #>  9 mock     cohort1     >=40      overall number subjects NA             8461201 #> 10 mock     cohort2     overall   overall number subjects NA             7182697 #> # ℹ 62 more rows #> # ℹ 6 more variables: mean <dbl>, sd <dbl>, percentage <dbl>, #> #   result_type <chr>, package_name <chr>, package_version <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tidySummarisedResult.html","id":"customise-your-tidy-summarised_result","dir":"Articles","previous_headings":"","what":"Customise your tidy summarised_result","title":"Tidy your summarised result object","text":"several functions customise tidy version <summarised_result> object. main one : tidySummarisedResult(). function can choose one pairs splitted: splitGroup = TRUE splits pair group_name-group_level columns. splitStrata = TRUE splits pair strata_name-strata_level columns. splitAdditional = TRUE splits pair additional_name-additional_level columns. settings columns added <summarised_result> object can chosen settingsColumns argument. one argument pivotEstimatesBy decide variables want use pivot , four options: NULL/character() pivot anything. c(\"estimates_name\") pivot estimate_name. c(\"variable_level\", \"estimates_name\") pivot estimate_name variable_level. c(\"variable_name\", \"variable_level\", \"estimates_name\") pivot estimate_name, variable_level variable_name. Note ‘variable_level’ can contain NA values, ignored naming part. default values tidySummarisedResult() make nearly equivalent tidy method (‘result_id’ eliminated tidySummarisedResult()). can customised behaviour: one options custom functions:","code":"tidySummarisedResult(result) #> # A tibble: 72 × 14 #>    result_id cdm_name cohort_name age_group sex     variable_name variable_level #>        <int> <chr>    <chr>       <chr>     <chr>   <chr>         <chr>          #>  1         1 mock     cohort1     overall   overall number subje… NA             #>  2         1 mock     cohort1     <40       Male    number subje… NA             #>  3         1 mock     cohort1     >=40      Male    number subje… NA             #>  4         1 mock     cohort1     <40       Female  number subje… NA             #>  5         1 mock     cohort1     >=40      Female  number subje… NA             #>  6         1 mock     cohort1     overall   Male    number subje… NA             #>  7         1 mock     cohort1     overall   Female  number subje… NA             #>  8         1 mock     cohort1     <40       overall number subje… NA             #>  9         1 mock     cohort1     >=40      overall number subje… NA             #> 10         1 mock     cohort2     overall   overall number subje… NA             #> # ℹ 62 more rows #> # ℹ 7 more variables: count <int>, mean <dbl>, sd <dbl>, percentage <dbl>, #> #   result_type <chr>, package_name <chr>, package_version <chr> result |>   tidySummarisedResult(     splitAdditional = FALSE,     settingsColumns = \"package_name\",     pivotEstimatesBy = c(\"variable_level\", \"estimate_name\")   ) #> # A tibble: 54 × 16 #>    result_id cdm_name cohort_name age_group sex    variable_name additional_name #>        <int> <chr>    <chr>       <chr>     <chr>  <chr>         <chr>           #>  1         1 mock     cohort1     overall   overa… number subje… overall         #>  2         1 mock     cohort1     <40       Male   number subje… overall         #>  3         1 mock     cohort1     >=40      Male   number subje… overall         #>  4         1 mock     cohort1     <40       Female number subje… overall         #>  5         1 mock     cohort1     >=40      Female number subje… overall         #>  6         1 mock     cohort1     overall   Male   number subje… overall         #>  7         1 mock     cohort1     overall   Female number subje… overall         #>  8         1 mock     cohort1     <40       overa… number subje… overall         #>  9         1 mock     cohort1     >=40      overa… number subje… overall         #> 10         1 mock     cohort2     overall   overa… number subje… overall         #> # ℹ 44 more rows #> # ℹ 9 more variables: additional_level <chr>, count <int>, mean <dbl>, #> #   sd <dbl>, Amoxiciline_count <int>, Amoxiciline_percentage <dbl>, #> #   Ibuprofen_count <int>, Ibuprofen_percentage <dbl>, package_name <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tidySummarisedResult.html","id":"split","dir":"Articles","previous_headings":"Customise your tidy summarised_result","what":"Split","title":"Tidy your summarised result object","text":"functions split provided independent: splitGroup() splits pair group_name-group_level columns. splitStrata() splits pair strata_name-strata_level columns. splitAdditional() splits pair additional_name-additional_level columns. also function: - splitAll() splits pair x_name-x_level found data.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tidySummarisedResult.html","id":"pivot-estimates","dir":"Articles","previous_headings":"Customise your tidy summarised_result","what":"Pivot estimates","title":"Tidy your summarised result object","text":"pivotEstimates() can used pivot variables interested .","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tidySummarisedResult.html","id":"add-settings","dir":"Articles","previous_headings":"Customise your tidy summarised_result","what":"Add settings","title":"Tidy your summarised result object","text":"addSettings() used add settings want new columns <summarised_result> object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/utilityFunctions.html","id":"column-retrieval-functions","dir":"Articles","previous_headings":"","what":"Column retrieval functions","title":"Utility functions","text":"Column retrieval functions designed simplify extraction specific columns variables within name-level columns <summarised_result> objects. section, review different column functions provide use-case example.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/utilityFunctions.html","id":"variables-in-name-level-columns","dir":"Articles","previous_headings":"Column retrieval functions","what":"Variables in name-level columns","title":"Utility functions","text":"following functions useful identifying variables stored name-level pairs: groupColumns() strataColumns() additionalColumns() example, let’s see strata included mock <summarised_result>: function returns strata columns generated result split strata.","code":"# Set-up library(visOmopResults) library(dplyr)  # Create a mock summarized result result <- mockSummarisedResult() head(result) #> # A tibble: 6 × 13 #>   result_id cdm_name group_name  group_level strata_name       strata_level    #>       <int> <chr>    <chr>       <chr>       <chr>             <chr>           #> 1         1 mock     cohort_name cohort1     overall           overall         #> 2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #> 3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #> 4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #> 5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #> 6         1 mock     cohort_name cohort1     sex               Male            #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>  # Get strata columns strataColumns(result) #> [1] \"age_group\" \"sex\""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/utilityFunctions.html","id":"settings","dir":"Articles","previous_headings":"Column retrieval functions","what":"Settings","title":"Utility functions","text":"settingsColumns() function returns settings linked <summarised_result>:","code":"# Display settings tibble settings(result) #> # A tibble: 1 × 4 #>   result_id result_type            package_name   package_version #>       <int> <chr>                  <chr>          <chr>           #> 1         1 mock_summarised_result visOmopResults 0.4.0  # Get which settings are present using `settingsColumns()` settingsColumns(result) #> [1] \"result_type\"     \"package_name\"    \"package_version\""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/utilityFunctions.html","id":"tidy-columns","dir":"Articles","previous_headings":"Column retrieval functions","what":"Tidy columns","title":"Utility functions","text":"tidyColumns() function provides columns  tidy format:","code":"# Show tidy result: tidy(result) |> head() #> # A tibble: 6 × 13 #>   cdm_name cohort_name age_group sex   variable_name variable_level  count  mean #>   <chr>    <chr>       <chr>     <chr> <chr>         <chr>           <int> <dbl> #> 1 mock     cohort1     overall   over… number subje… NA             8.08e5    NA #> 2 mock     cohort1     <40       Male  number subje… NA             8.34e6    NA #> 3 mock     cohort1     >=40      Male  number subje… NA             6.01e6    NA #> 4 mock     cohort1     <40       Fema… number subje… NA             1.57e6    NA #> 5 mock     cohort1     >=40      Fema… number subje… NA             7.40e4    NA #> 6 mock     cohort1     overall   Male  number subje… NA             4.66e6    NA #> # ℹ 5 more variables: sd <dbl>, percentage <dbl>, result_type <chr>, #> #   package_name <chr>, package_version <chr>  # Get the tidy columns with `tidyColumns()` tidyColumns(result) #>  [1] \"cdm_name\"        \"cohort_name\"     \"age_group\"       \"sex\"             #>  [5] \"variable_name\"   \"variable_level\"  \"count\"           \"mean\"            #>  [9] \"sd\"              \"percentage\"      \"result_type\"     \"package_name\"    #> [13] \"package_version\""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/utilityFunctions.html","id":"use-case","dir":"Articles","previous_headings":"Column retrieval functions","what":"Use-case","title":"Utility functions","text":"functionalities can used table plot functions. instance, let’s plot number subjects cohort strata mock result. ’ll first filter result focus variable interest, use barPlot() (see vignette plots information use plotting functions).","code":"result <- result |>   filter(variable_name == \"number subjects\")  barPlot(   result = result,    x = groupColumns(result),    y = \"count\",    facet = strataColumns(result),    colour = groupColumns(result) )"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/utilityFunctions.html","id":"unite-functions","dir":"Articles","previous_headings":"","what":"Unite functions","title":"Utility functions","text":"unite functions serve complementary tools split functions (see vignette tidying <summarised_result>), allowing generate name-level pair columns targeted columns within <dataframe>. three unite functions allow create group, strata, additional name-level columns specified sets columns: uniteAdditional() uniteGroup() uniteStrata() example, create group_name group_level columns tibble, can use: functions can helpful creating <summarised_result>.","code":"# Create and show mock data data <- tibble(   denominator_cohort_name = c(\"general_population\", \"older_than_60\", \"younger_than_60\"),   outcome_cohort_name = c(\"stroke\", \"stroke\", \"stroke\") ) head(data) #> # A tibble: 3 × 2 #>   denominator_cohort_name outcome_cohort_name #>   <chr>                   <chr>               #> 1 general_population      stroke              #> 2 older_than_60           stroke              #> 3 younger_than_60         stroke  # Unite into group name-level columns data |>   uniteGroup(cols = c(\"denominator_cohort_name\", \"outcome_cohort_name\")) #> # A tibble: 3 × 2 #>   group_name                                      group_level                   #>   <chr>                                           <chr>                         #> 1 denominator_cohort_name &&& outcome_cohort_name general_population &&& stroke #> 2 denominator_cohort_name &&& outcome_cohort_name older_than_60 &&& stroke      #> 3 denominator_cohort_name &&& outcome_cohort_name younger_than_60 &&& stroke"},{"path":"https://darwin-eu.github.io/visOmopResults/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martí Català. Author. Núria Mercadé-Besora. Author, maintainer. Yuchen Guo. Author.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Català M, Mercadé-Besora N, Guo Y (2024). visOmopResults: Graphs Tables OMOP Results. R package version 0.4.0, https://darwin-eu.github.io/visOmopResults/.","code":"@Manual{,   title = {visOmopResults: Graphs and Tables for OMOP Results},   author = {Martí Català and Núria Mercadé-Besora and Yuchen Guo},   year = {2024},   note = {R package version 0.4.0},   url = {https://darwin-eu.github.io/visOmopResults/}, }"},{"path":[]},{"path":"https://darwin-eu.github.io/visOmopResults/index.html","id":"package-overview","dir":"","previous_headings":"","what":"Package overview","title":"Graphs and Tables for OMOP Results","text":"visOmopResults offers set functions tailored format objects class <summarised_result> (defined omopgenerics package). provides functionality : transform data, create table visualizations, generate plot visualizations. visualizations highly versatile reporting results Shiny apps, RMarkdown, Quarto, , supporting various output formats HTML, PNG, Word, PDF.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/index.html","id":"lets-get-started","dir":"","previous_headings":"","what":"Let’s get started","title":"Graphs and Tables for OMOP Results","text":"can install latest version visOmopResults CRAN: can install development version GitHub : <summarised_result> standardised output format utilized across various packages, including: CohortCharacteristics DrugUtilisation IncidencePrevalence PatientProfiles CodelistGenerator CohortSurvival CohortSymmetry Although standard output format essential, can sometimes challenging manage. visOmopResults package aims simplify process. demonstrate package’s functionality, let’s start using mock result:","code":"install.packages(\"visOmopResults\") # install.packages(\"pak\") pak::pkg_install(\"darwin-eu/visOmopResults\") library(visOmopResults) result <- mockSummarisedResult()"},{"path":"https://darwin-eu.github.io/visOmopResults/index.html","id":"transformation-of-a-summarised_result-object","dir":"","previous_headings":"","what":"Transformation of a <summarised_result> object","title":"Graphs and Tables for OMOP Results","text":"tidy version summarised can obtained tidy function: tidy format longer standardized offers easier manipulation. tidy() provides straightforward transformation, customizable sibling function tidySummarisedResult() allows specify exactly ’d like tidy <summarised_result> object:","code":"tidy(result) #> # A tibble: 72 × 13 #>    cdm_name cohort_name age_group sex     variable_name   variable_level   count #>    <chr>    <chr>       <chr>     <chr>   <chr>           <chr>            <int> #>  1 mock     cohort1     overall   overall number subjects <NA>           8073003 #>  2 mock     cohort1     <40       Male    number subjects <NA>           8850788 #>  3 mock     cohort1     >=40      Male    number subjects <NA>           3811096 #>  4 mock     cohort1     <40       Female  number subjects <NA>           7230087 #>  5 mock     cohort1     >=40      Female  number subjects <NA>           6508723 #>  6 mock     cohort1     overall   Male    number subjects <NA>           7643684 #>  7 mock     cohort1     overall   Female  number subjects <NA>           4209114 #>  8 mock     cohort1     <40       overall number subjects <NA>           5850048 #>  9 mock     cohort1     >=40      overall number subjects <NA>           8239237 #> 10 mock     cohort2     overall   overall number subjects <NA>           7597918 #> # ℹ 62 more rows #> # ℹ 6 more variables: mean <dbl>, sd <dbl>, percentage <dbl>, #> #   result_type <chr>, package_name <chr>, package_version <chr> result |>   tidySummarisedResult(     splitStrata = FALSE,     settingsColumns = \"package_name\",      pivotEstimatesBy = NULL   ) #> # A tibble: 126 × 11 #>    result_id cdm_name cohort_name strata_name       strata_level   variable_name #>        <int> <chr>    <chr>       <chr>             <chr>          <chr>         #>  1         1 mock     cohort1     overall           overall        number subje… #>  2         1 mock     cohort1     age_group &&& sex <40 &&& Male   number subje… #>  3         1 mock     cohort1     age_group &&& sex >=40 &&& Male  number subje… #>  4         1 mock     cohort1     age_group &&& sex <40 &&& Female number subje… #>  5         1 mock     cohort1     age_group &&& sex >=40 &&& Fema… number subje… #>  6         1 mock     cohort1     sex               Male           number subje… #>  7         1 mock     cohort1     sex               Female         number subje… #>  8         1 mock     cohort1     age_group         <40            number subje… #>  9         1 mock     cohort1     age_group         >=40           number subje… #> 10         1 mock     cohort2     overall           overall        number subje… #> # ℹ 116 more rows #> # ℹ 5 more variables: variable_level <chr>, estimate_name <chr>, #> #   estimate_type <chr>, estimate_value <chr>, package_name <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/index.html","id":"filter-a-summarised_result-object","dir":"","previous_headings":"","what":"Filter a <summarised_result> object","title":"Graphs and Tables for OMOP Results","text":"<summarised_result> object essentially <data.frame>, can filtered easily using dplyr::filter(). However, filtering variables within name-level structures present settings can challenging. following functions simplify process: filterSettings() filterGroup() filterStrata() filterAdditional() examples use :","code":"result |>   filterSettings(package_name == \"visOmopResults\") #> # A tibble: 126 × 13 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 116 more rows #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr> result |>   filterSettings(package_name == \"other\") #> # A tibble: 0 × 13 #> # ℹ 13 variables: result_id <int>, cdm_name <chr>, group_name <chr>, #> #   group_level <chr>, strata_name <chr>, strata_level <chr>, #> #   variable_name <chr>, variable_level <chr>, estimate_name <chr>, #> #   estimate_type <chr>, estimate_value <chr>, additional_name <chr>, #> #   additional_level <chr> result |>   filterStrata(sex == \"Female\") #> # A tibble: 42 × 13 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  2         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  3         1 mock     cohort_name cohort1     sex               Female          #>  4         1 mock     cohort_name cohort2     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort2     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort2     sex               Female          #>  7         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  8         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  9         1 mock     cohort_name cohort1     sex               Female          #> 10         1 mock     cohort_name cohort2     age_group &&& sex <40 &&& Female  #> # ℹ 32 more rows #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/index.html","id":"tables-visualisations","dir":"","previous_headings":"","what":"Tables visualisations","title":"Graphs and Tables for OMOP Results","text":"Currently table functionalities built around 3 packages: tibble, gt, flextable. two main functions: visOmopTable(): Creates well-formatted table specifically <summarised_result> object. visTable(): Creates nicely formatted table <data.frame> object. Let’s see simple example:","code":"result |>   visOmopTable(     type = \"flextable\", # to change to gt when issue 223 is fixed     estimateName = c(       \"N(%)\" = \"<count> (<percentage>%)\",        \"N\" = \"<count>\",        \"mean (sd)\" = \"<mean> (<sd>)\"),     header = c(\"sex\"),     settingsColumns = NULL,     groupColumn = c(\"cohort_name\", \"age_group\"),     rename = c(\"Variable\" = \"variable_name\", \" \" = \"variable_level\"),     hide = \"cdm_name\"   )"},{"path":"https://darwin-eu.github.io/visOmopResults/index.html","id":"plots-visualisations","dir":"","previous_headings":"","what":"Plots visualisations","title":"Graphs and Tables for OMOP Results","text":"Currently plot functionalities built around ggplot2. output plot functions <ggplot2> object can customised. three plotting functions: plotScatter() create scatter plot. plotBar() create bar plot. plotBox() create box plot. Let’s see can create simple boxplot age using tool:","code":"library(dplyr) result |>   filter(variable_name == \"number subjects\") |>   filterStrata(sex != \"overall\") |>   barPlot(x = \"age_group\",            y = \"count\",           facet = \"cohort_name\",            colour = \"sex\")"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/addSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"Add settings columns to a summarised_result object — addSettings","title":"Add settings columns to a summarised_result object — addSettings","text":"Add settings columns summarised_result object","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/addSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add settings columns to a summarised_result object — addSettings","text":"","code":"addSettings(   result,   settingsColumns = colnames(settings(result)),   columns = lifecycle::deprecated() )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/addSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add settings columns to a summarised_result object — addSettings","text":"result summarised_result object. settingsColumns Settings added columns, default settings added. NULL empty character vector, settings added. columns","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/addSettings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add settings columns to a summarised_result object — addSettings","text":"summarised_result object added setting columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/addSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add settings columns to a summarised_result object — addSettings","text":"","code":"library(visOmopResults) mockSummarisedResult() |>   addSettings(settingsColumns = c(\"result_type\")) #> # A tibble: 126 × 14 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 116 more rows #> # ℹ 8 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>, result_type <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/additionalColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify variables in additional_name column — additionalColumns","title":"Identify variables in additional_name column — additionalColumns","text":"Identifies returns unique values additional_name column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/additionalColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify variables in additional_name column — additionalColumns","text":"","code":"additionalColumns(result)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/additionalColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify variables in additional_name column — additionalColumns","text":"result tibble.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/additionalColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify variables in additional_name column — additionalColumns","text":"Unique values additional name column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/additionalColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify variables in additional_name column — additionalColumns","text":"","code":"mockSummarisedResult() |>   additionalColumns() #> character(0)"},{"path":[]},{"path":"https://darwin-eu.github.io/visOmopResults/reference/barPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a bar plot visualisation from a summarised result object — barPlot","text":"","code":"barPlot(result, x, y, facet = NULL, colour = NULL)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/barPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a bar plot visualisation from a summarised result object — barPlot","text":"result summarised result object. x Column estimate name used x variable. y Column estimate name used y variable facet Variables facet , formula can provided specify variables used rows ones columns. colour Columns use determine colors.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/barPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a bar plot visualisation from a summarised result object — barPlot","text":"plot object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/barPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a bar plot visualisation from a summarised result object — barPlot","text":"","code":"# \\donttest{ result <- mockSummarisedResult() |> dplyr::filter(variable_name == \"age\")  barPlot(   result = result,   x = \"cohort_name\",   y = \"mean\",   facet = c(\"age_group\", \"sex\"),   colour = \"sex\")  # }"},{"path":[]},{"path":"https://darwin-eu.github.io/visOmopResults/reference/boxPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a box plot visualisation from a summarised_result object — boxPlot","text":"","code":"boxPlot(   result,   x = NULL,   lower = \"q25\",   middle = \"median\",   upper = \"q75\",   ymin = \"min\",   ymax = \"max\",   facet = NULL,   colour = NULL )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/boxPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a box plot visualisation from a summarised_result object — boxPlot","text":"result summarised result object. x Columns use x axes. lower Estimate name lower quantile box. middle Estimate name middle line box. upper Estimate name upper quantile box. ymin Estimate name lower limit bars. ymax Estimate name upper limit bars. facet Variables facet , formula can provided specify variables used rows ones columns. colour Columns use determine colors.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/boxPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a box plot visualisation from a summarised_result object — boxPlot","text":"ggplot2 object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterAdditional.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the additional_name-additional_level pair in a summarised_result — filterAdditional","title":"Filter the additional_name-additional_level pair in a summarised_result — filterAdditional","text":"Filter additional_name-additional_level pair summarised_result","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterAdditional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the additional_name-additional_level pair in a summarised_result — filterAdditional","text":"","code":"filterAdditional(result, ...)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterAdditional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter the additional_name-additional_level pair in a summarised_result — filterAdditional","text":"result summarised_result object. ... Expressions return logical value (additionalColumns() used evaluate expression), defined terms variables .data. multiple expressions included, combined & operator. rows conditions evaluate TRUE kept.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterAdditional.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the additional_name-additional_level pair in a summarised_result — filterAdditional","text":"summarised_result object rows fulfill required specified additional.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterAdditional.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter the additional_name-additional_level pair in a summarised_result — filterAdditional","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(omopgenerics) #>  #> Attaching package: ‘omopgenerics’ #> The following object is masked from ‘package:stats’: #>  #>     filter  x <- tibble(   \"result_id\" = 1L,   \"cdm_name\" = \"eunomia\",   \"group_name\" = \"cohort_name\",   \"group_level\" = c(\"cohort1\", \"cohort2\", \"cohort3\"),   \"strata_name\" = \"sex\",   \"strata_level\" = \"Female\",   \"variable_name\" = \"number subjects\",   \"variable_level\" = NA_character_,   \"estimate_name\" = \"count\",   \"estimate_type\" = \"integer\",   \"estimate_value\" = c(\"100\", \"44\", \"14\"),   \"additional_name\" = c(\"year\", \"time_step\", \"year &&& time_step\"),   \"additional_level\" = c(\"2010\", \"4\", \"2015 &&& 5\") ) |>   newSummarisedResult() #> Warning: `result_type`, `package_name`, and `package_version` are not provided will be #> populated as \"\" in settings  x |>   filterAdditional(year == \"2010\") #> # A tibble: 1 × 13 #>   result_id cdm_name group_name  group_level strata_name strata_level #>       <int> <chr>    <chr>       <chr>       <chr>       <chr>        #> 1         1 eunomia  cohort_name cohort1     sex         Female       #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the group_name-group_level pair in a summarised_result — filterGroup","title":"Filter the group_name-group_level pair in a summarised_result — filterGroup","text":"Filter group_name-group_level pair summarised_result","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the group_name-group_level pair in a summarised_result — filterGroup","text":"","code":"filterGroup(result, ...)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter the group_name-group_level pair in a summarised_result — filterGroup","text":"result summarised_result object. ... Expressions return logical value (groupColumns() used evaluate expression), defined terms variables .data. multiple expressions included, combined & operator. rows conditions evaluate TRUE kept.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the group_name-group_level pair in a summarised_result — filterGroup","text":"summarised_result object rows fulfill required specified group.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter the group_name-group_level pair in a summarised_result — filterGroup","text":"","code":"library(dplyr) library(omopgenerics)  x <- tibble(   \"result_id\" = 1L,   \"cdm_name\" = \"eunomia\",   \"group_name\" = c(\"cohort_name\", \"age_group &&& cohort_name\", \"age_group\"),   \"group_level\" = c(\"my_cohort\", \">40 &&& second_cohort\", \"<40\"),   \"strata_name\" = \"sex\",   \"strata_level\" = \"Female\",   \"variable_name\" = \"number subjects\",   \"variable_level\" = NA_character_,   \"estimate_name\" = \"count\",   \"estimate_type\" = \"integer\",   \"estimate_value\" = c(\"100\", \"44\", \"14\"),   \"additional_name\" = \"overall\",   \"additional_level\" = \"overall\" ) |>   newSummarisedResult() #> Warning: `result_type`, `package_name`, and `package_version` are not provided will be #> populated as \"\" in settings  x |>   filterGroup(cohort_name == \"second_cohort\") #> # A tibble: 1 × 13 #>   result_id cdm_name group_name             group_level strata_name strata_level #>       <int> <chr>    <chr>                  <chr>       <chr>       <chr>        #> 1         1 eunomia  age_group &&& cohort_… >40 &&& se… sex         Female       #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a summarised_result using the settings — filterSettings","title":"Filter a summarised_result using the settings — filterSettings","text":"Filter summarised_result using settings","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a summarised_result using the settings — filterSettings","text":"","code":"filterSettings(result, ...)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a summarised_result using the settings — filterSettings","text":"result summarised_result object. ... Expressions return logical value (columns settings used evaluate expression), defined terms variables .data. multiple expressions included, combined & operator. rows conditions evaluate TRUE kept.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterSettings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter a summarised_result using the settings — filterSettings","text":"summarised_result object result_id rows fulfill required specified settings.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter a summarised_result using the settings — filterSettings","text":"","code":"library(dplyr) library(omopgenerics)  x <- tibble(   \"result_id\" = as.integer(c(1, 2)),   \"cdm_name\" = c(\"cprd\", \"eunomia\"),   \"group_name\" = \"sex\",   \"group_level\" = \"male\",   \"strata_name\" = \"sex\",   \"strata_level\" = \"male\",   \"variable_name\" = \"Age group\",   \"variable_level\" = \"10 to 50\",   \"estimate_name\" = \"count\",   \"estimate_type\" = \"numeric\",   \"estimate_value\" = \"5\",   \"additional_name\" = \"overall\",   \"additional_level\" = \"overall\" ) |>   newSummarisedResult(settings = tibble(     \"result_id\" = c(1, 2), \"custom\" = c(\"A\", \"B\")   )) #> Warning: `result_type`, `package_name`, and `package_version` are not provided will be #> populated as \"\" in settings #> Warning: `sex` is present in both 'group' and 'strata'. This will be an error in the #> next release.  x #> # A tibble: 2 × 13 #>   result_id cdm_name group_name group_level strata_name strata_level #>       <int> <chr>    <chr>      <chr>       <chr>       <chr>        #> 1         1 cprd     sex        male        sex         male         #> 2         2 eunomia  sex        male        sex         male         #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>  x |> filterSettings(custom == \"A\") #> # A tibble: 1 × 13 #>   result_id cdm_name group_name group_level strata_name strata_level #>       <int> <chr>    <chr>      <chr>       <chr>       <chr>        #> 1         1 cprd     sex        male        sex         male         #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterStrata.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the strata_name-strata_level pair in a summarised_result — filterStrata","title":"Filter the strata_name-strata_level pair in a summarised_result — filterStrata","text":"Filter strata_name-strata_level pair summarised_result","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterStrata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the strata_name-strata_level pair in a summarised_result — filterStrata","text":"","code":"filterStrata(result, ...)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterStrata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter the strata_name-strata_level pair in a summarised_result — filterStrata","text":"result summarised_result object. ... Expressions return logical value (strataColumns() used evaluate expression), defined terms variables .data. multiple expressions included, combined & operator. rows conditions evaluate TRUE kept.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterStrata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the strata_name-strata_level pair in a summarised_result — filterStrata","text":"summarised_result object rows fulfill required specified strata.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterStrata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter the strata_name-strata_level pair in a summarised_result — filterStrata","text":"","code":"library(dplyr) library(omopgenerics)  x <- tibble(   \"result_id\" = 1L,   \"cdm_name\" = \"eunomia\",   \"group_name\" = \"cohort_name\",   \"group_level\" = \"my_cohort\",   \"strata_name\" = c(\"sex\", \"sex &&& age_group\", \"sex &&& year\"),   \"strata_level\" = c(\"Female\", \"Male &&& <40\", \"Female &&& 2010\"),   \"variable_name\" = \"number subjects\",   \"variable_level\" = NA_character_,   \"estimate_name\" = \"count\",   \"estimate_type\" = \"integer\",   \"estimate_value\" = c(\"100\", \"44\", \"14\"),   \"additional_name\" = \"overall\",   \"additional_level\" = \"overall\" ) |>   newSummarisedResult() #> Warning: `result_type`, `package_name`, and `package_version` are not provided will be #> populated as \"\" in settings  x |>   filterStrata(sex == \"Female\") #> # A tibble: 2 × 13 #>   result_id cdm_name group_name  group_level strata_name  strata_level    #>       <int> <chr>    <chr>       <chr>       <chr>        <chr>           #> 1         1 eunomia  cohort_name my_cohort   sex          Female          #> 2         1 eunomia  cohort_name my_cohort   sex &&& year Female &&& 2010 #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/flextableStyle.html","id":null,"dir":"Reference","previous_headings":"","what":"Default style code expresion for flextable tables. — flextableStyle","title":"Default style code expresion for flextable tables. — flextableStyle","text":"Default style code expresion flextable tables.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/flextableStyle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default style code expresion for flextable tables. — flextableStyle","text":"","code":"flextableStyle(styleName = \"default\")"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/flextableStyle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default style code expresion for flextable tables. — flextableStyle","text":"styleName Name style. Currently package just one predefined style (\"default\").","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateName.html","id":null,"dir":"Reference","previous_headings":"","what":"Formats estimate_name and estimate_value column — formatEstimateName","title":"Formats estimate_name and estimate_value column — formatEstimateName","text":"Formats estimate_name estimate_value columns changing name estimate name /joining different estimates together single row.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formats estimate_name and estimate_value column — formatEstimateName","text":"","code":"formatEstimateName(   result,   estimateName = NULL,   keepNotFormatted = TRUE,   useFormatOrder = TRUE,   estimateNameFormat = lifecycle::deprecated() )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formats estimate_name and estimate_value column — formatEstimateName","text":"result summarised_result. estimateName Named list estimate name's join, sorted computation order. Indicate estimate_name's <...>. keepNotFormatted Whether keep rows formatted. useFormatOrder Whether use order estimate names appear estimateName (TRUE), use order input dataframe (FALSE). estimateNameFormat deprecated.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formats estimate_name and estimate_value column — formatEstimateName","text":"summarised_result object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formats estimate_name and estimate_value column — formatEstimateName","text":"","code":"result <- mockSummarisedResult() result |>   formatEstimateName(     estimateName = c(       \"N (%)\" = \"<count> (<percentage>%)\", \"N\" = \"<count>\"     ),     keepNotFormatted = FALSE   ) #> # A tibble: 54 × 13 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 44 more rows #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateValue.html","id":null,"dir":"Reference","previous_headings":"","what":"Formats the estimate_value column — formatEstimateValue","title":"Formats the estimate_value column — formatEstimateValue","text":"Formats estimate_value column summarised_result object editing number decimals, decimal thousand/millions separator marks.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateValue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formats the estimate_value column — formatEstimateValue","text":"","code":"formatEstimateValue(   result,   decimals = c(integer = 0, numeric = 2, percentage = 1, proportion = 3),   decimalMark = \".\",   bigMark = \",\" )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateValue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formats the estimate_value column — formatEstimateValue","text":"result summarised_result. decimals Number decimals per estimate type (integer, numeric, percentage, proportion), estimate name, estimate values (introduce number decimals). decimalMark Decimal separator mark. bigMark Thousand millions separator mark.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateValue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formats the estimate_value column — formatEstimateValue","text":"summarised_result.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateValue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formats the estimate_value column — formatEstimateValue","text":"","code":"result <- mockSummarisedResult()  result |> formatEstimateValue(decimals = 1) #> # A tibble: 126 × 13 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 116 more rows #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>  result |> formatEstimateValue(decimals = c(integer = 0, numeric = 1)) #> # A tibble: 126 × 13 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 116 more rows #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>  result |>   formatEstimateValue(decimals = c(numeric = 1, count = 0)) #> # A tibble: 126 × 13 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 116 more rows #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatHeader.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a header for gt and flextable objects — formatHeader","title":"Create a header for gt and flextable objects — formatHeader","text":"Pivots summarised_result object based column names header, generating specific column names subsequent header formatting formatTable function.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatHeader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a header for gt and flextable objects — formatHeader","text":"","code":"formatHeader(   result,   header,   delim = \"\\n\",   includeHeaderName = TRUE,   includeHeaderKey = TRUE )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatHeader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a header for gt and flextable objects — formatHeader","text":"result summarised_result. header Names variables make headers. delim Delimiter use separate headers. includeHeaderName Whether include column name header. includeHeaderKey Whether include header key (header, header_name, header_level) header type column names.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatHeader.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a header for gt and flextable objects — formatHeader","text":"tibble rows pivotted columns key names subsequent header formatting.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatHeader.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a header for gt and flextable objects — formatHeader","text":"","code":"result <- mockSummarisedResult()  result |>   formatHeader(     header = c(       \"Study cohorts\", \"group_level\", \"Study strata\", \"strata_name\",       \"strata_level\"     ),     includeHeaderName = FALSE   ) #> # A tibble: 7 × 27 #>   result_id cdm_name group_name  variable_name   variable_level estimate_name #>       <int> <chr>    <chr>       <chr>           <chr>          <chr>         #> 1         1 mock     cohort_name number subjects NA             count         #> 2         1 mock     cohort_name age             NA             mean          #> 3         1 mock     cohort_name age             NA             sd            #> 4         1 mock     cohort_name Medications     Amoxiciline    count         #> 5         1 mock     cohort_name Medications     Amoxiciline    percentage    #> 6         1 mock     cohort_name Medications     Ibuprofen      count         #> 7         1 mock     cohort_name Medications     Ibuprofen      percentage    #> # ℹ 21 more variables: estimate_type <chr>, additional_name <chr>, #> #   additional_level <chr>, #> #   `[header]Study cohorts\\n[header_level]cohort1\\n[header]Study strata\\n[header_level]overall\\n[header_level]overall` <chr>, #> #   `[header]Study cohorts\\n[header_level]cohort1\\n[header]Study strata\\n[header_level]age_group &&& sex\\n[header_level]<40 &&& Male` <chr>, #> #   `[header]Study cohorts\\n[header_level]cohort1\\n[header]Study strata\\n[header_level]age_group &&& sex\\n[header_level]>=40 &&& Male` <chr>, #> #   `[header]Study cohorts\\n[header_level]cohort1\\n[header]Study strata\\n[header_level]age_group &&& sex\\n[header_level]<40 &&& Female` <chr>, #> #   `[header]Study cohorts\\n[header_level]cohort1\\n[header]Study strata\\n[header_level]age_group &&& sex\\n[header_level]>=40 &&& Female` <chr>, …"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a flextable or gt object from a dataframe — formatTable","title":"Creates a flextable or gt object from a dataframe — formatTable","text":"Creates flextable object dataframe using delimiter span header, allows easily customise table style.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a flextable or gt object from a dataframe — formatTable","text":"","code":"formatTable(   x,   type = \"gt\",   delim = \"\\n\",   style = \"default\",   na = \"-\",   title = NULL,   subtitle = NULL,   caption = NULL,   groupColumn = NULL,   groupAsColumn = FALSE,   groupOrder = NULL,   merge = NULL )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a flextable or gt object from a dataframe — formatTable","text":"x dataframe. type type desired formatted table. Options : \"gt\", \"flextable\". delim Delimiter. style Named list specifies style different parts gt flextable table generated. Accepted style entries : title, subtitle, header, header_name, header_level, column_name, group_label, body. Alternatively, use \"default\" get visOmopResults style, NULL gt/flextable style. Keep mind styling code different gt flextable. see \"deafult\" gt style code use gtStyle(), flextableStyle() flextable default code style. na display missing values. title Title table, NULL title. subtitle Subtitle table, NULL subtitle. caption Caption table, NULL caption. Text markdown formatting style (e.g. *caption * caption italics). groupColumn Specifies columns use group labels. default, new group name combination column names, joined \"_\". assign custom group name, provide named list : list(newGroupName = c(\"variable_name\", \"variable_level\")) groupAsColumn Whether display group labels column (TRUE) rows (FALSE). groupOrder Order display group labels. merge Names columns merge vertically consecutive row cells identical values. Alternatively, use \"all_columns\" apply merging columns, use NULL indicate merging.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a flextable or gt object from a dataframe — formatTable","text":"flextable object. flextable gt object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a flextable or gt object from a dataframe — formatTable","text":"fxTable example group_level result_id cdm_name group_name variable_name variable_level estimate_name estimate_type additional_name additional_level Study strata overall age_group &&& sex sex age_group overall <40 &&& Male >=40 &&& Male <40 &&& Female >=40 &&& Female Male Female <40 >=40 cohort1 1 mock cohort_name number subjects -- count integer overall overall 6,502,987 1,552,945 5,083,099 858,704 5,030,267 385,719 8,240,329 2,859,856 2,467,509    age -- mean numeric overall overall 24.0 63.9 50.3 25.1 97.9 65.7 9.0 63.1 87.7      sd numeric overall overall 1.7 2.3 8.5 3.5 0.7 0.3 1.2 0.1 7.4    Medications Amoxiciline count integer overall overall 25,575 55,232 25,158 62,845 31,612 92,452 90,649 9,197 73,780      percentage percentage overall overall 71.9317963346839 93.6428893357515 42.943161376752 28.618732560426 77.0643183263019 61.6498636547476 15.9274747595191 40.1598005788401 0.164648867212236     Ibuprofen count integer overall overall 80,930 92,256 67,502 9,397 19,746 47,555 71,437 53,808 87,538      percentage percentage overall overall 54.5915438327938 94.7317183716223 3.8526406744495 64.764387672767 7.96190109103918 43.2930769631639 76.0893133934587 29.3758839834481 10.7331892941147 cohort2 1 mock cohort_name number subjects -- count integer overall overall 3,979,936 6,320,929 9,485,788 3,401,192 6,273,660 8,249,154 1,451,154 9,671,391 860,390    age -- mean numeric overall overall 93.0 41.9 49.6 35.3 24.9 95.9 36.0 19.9 72.6      sd numeric overall overall 9.2 9.8 4.1 2.7 4.9 0.5 0.0 5.0 2.4    Medications Amoxiciline count integer overall overall 56,974 69,649 70,077 3,994 43,152 81,423 56,659 58,825 88,031      percentage percentage overall overall 41.7966035660356 76.3934360351413 79.4477666728199 24.2587020387873 75.9170953882858 2.91041533928365 43.7340782955289 53.0409487430006 42.9831350920722     Ibuprofen count integer overall overall 29,359 22,477 69,092 31,233 48,330 12,180 69,001 31,573 81,619      percentage percentage overall overall 7.29944417253137 35.6314577395096 57.1560842683539 67.7988059120253 69.0719101810828 37.3410821193829 9.79780545458198 9.90097080357373 77.4801583494991","code":"# Example 1 mockSummarisedResult() |>   formatEstimateValue(decimals = c(integer = 0, numeric = 1)) |>   formatHeader(     header = c(\"Study strata\", \"strata_name\", \"strata_level\"),     includeHeaderName = FALSE   ) |>   formatTable(     type = \"flextable\",     style = \"default\",     na = \"--\",     title = \"fxTable example\",     subtitle = NULL,     caption = NULL,     groupColumn = \"group_level\",     groupAsColumn = TRUE,     groupOrder = c(\"cohort1\", \"cohort2\"),     merge = \"all_columns\"   ) .cl-b60cf9b0{}.cl-b604ce8e{font-family:'Arial';font-size:15pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-b604cea2{font-family:'Arial';font-size:10pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-b604cea3{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-b607d16a{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-b607d174{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-b607d175{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-b607f30c{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.2pt solid rgba(190, 190, 190, 1.00);border-top: 1.2pt solid rgba(190, 190, 190, 1.00);border-left: 1.2pt solid rgba(190, 190, 190, 1.00);border-right: 1.2pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-b607f30d{width:0.75in;background-color:rgba(200, 200, 200, 1.00);vertical-align: middle;border-bottom: 1.2pt solid rgba(190, 190, 190, 1.00);border-top: 1.2pt solid rgba(190, 190, 190, 1.00);border-left: 1.2pt solid rgba(190, 190, 190, 1.00);border-right: 1.2pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-b607f316{width:0.75in;background-color:rgba(225, 225, 225, 1.00);vertical-align: middle;border-bottom: 1.2pt solid rgba(190, 190, 190, 1.00);border-top: 1.2pt solid rgba(190, 190, 190, 1.00);border-left: 1.2pt solid rgba(190, 190, 190, 1.00);border-right: 1.2pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-b607f317{width:0.75in;background-color:rgba(233, 233, 233, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 1pt solid rgba(190, 190, 190, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-b607f320{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-b607f321{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-b607f322{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-b607f32a{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-b607f32b{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-b607f334{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}fxTable examplegroup_levelresult_idcdm_namegroup_namevariable_namevariable_levelestimate_nameestimate_typeadditional_nameadditional_levelStudy strataoverallage_group &&& sexsexage_groupoverall<40 &&& Male>=40 &&& Male<40 &&& Female>=40 &&& FemaleMaleFemale<40>=40cohort11mockcohort_namenumber subjects--countintegeroveralloverall6,502,9871,552,9455,083,099858,7045,030,267385,7198,240,3292,859,8562,467,509age--meannumericoveralloverall24.063.950.325.197.965.79.063.187.7sdnumericoveralloverall1.72.38.53.50.70.31.20.17.4MedicationsAmoxicilinecountintegeroveralloverall25,57555,23225,15862,84531,61292,45290,6499,19773,780percentagepercentageoveralloverall71.931796334683993.642889335751542.94316137675228.61873256042677.064318326301961.649863654747615.927474759519140.15980057884010.164648867212236Ibuprofencountintegeroveralloverall80,93092,25667,5029,39719,74647,55571,43753,80887,538percentagepercentageoveralloverall54.591543832793894.73171837162233.852640674449564.7643876727677.9619010910391843.293076963163976.089313393458729.375883983448110.7331892941147cohort21mockcohort_namenumber subjects--countintegeroveralloverall3,979,9366,320,9299,485,7883,401,1926,273,6608,249,1541,451,1549,671,391860,390age--meannumericoveralloverall93.041.949.635.324.995.936.019.972.6sdnumericoveralloverall9.29.84.12.74.90.50.05.02.4MedicationsAmoxicilinecountintegeroveralloverall56,97469,64970,0773,99443,15281,42356,65958,82588,031percentagepercentageoveralloverall41.796603566035676.393436035141379.447766672819924.258702038787375.91709538828582.9104153392836543.734078295528953.040948743000642.9831350920722Ibuprofencountintegeroveralloverall29,35922,47769,09231,23348,33012,18069,00131,57381,619percentagepercentageoveralloverall7.2994441725313735.631457739509657.156084268353967.798805912025369.071910181082837.34108211938299.797805454581989.9009708035737377.4801583494991 # Example 2 mockSummarisedResult() |>   formatEstimateValue(decimals = c(integer = 0, numeric = 1)) |>   formatHeader(header = c(\"Study strata\", \"strata_name\", \"strata_level\"),               includeHeaderName = FALSE) |>   formatTable(     type = \"gt\",     style = list(\"header\" = list(       gt::cell_fill(color = \"#d9d9d9\"),       gt::cell_text(weight = \"bold\")),       \"header_level\" = list(gt::cell_fill(color = \"#e1e1e1\"),                             gt::cell_text(weight = \"bold\")),       \"column_name\" = list(gt::cell_text(weight = \"bold\")),       \"title\" = list(gt::cell_text(weight = \"bold\"),                      gt::cell_fill(color = \"#c8c8c8\")),       \"group_label\" = gt::cell_fill(color = \"#e1e1e1\")),     na = \"--\",     title = \"gtTable example\",     subtitle = NULL,     caption = NULL,     groupColumn = \"group_level\",     groupAsColumn = FALSE,     groupOrder = c(\"cohort1\", \"cohort2\"),     merge = \"all_columns\"   )     gtTable example                     Study strata            result_id       cdm_name       group_name       variable_name       variable_level       estimate_name       estimate_type       additional_name       additional_level                overall                       age_group &&& sex                       sex                       age_group            overall       <40 &&& Male       >=40 &&& Male       <40 &&& Female       >=40 &&& Female       Male       Female       <40       >=40     cohort1     1 mock cohort_name number subjects -- count integer overall overall 1,514,956 3,946,066 9,349,984 7,395,896 6,356,681 3,382,199 9,624,163 1,117,899 6,504,853   age -- mean numeric overall overall 50.1 16.6 36.1 65.2 87.4 72.8 41.2 15.9 84.6     sd numeric overall overall 3.9 9.0 2.8 1.4 4.5 1.1 8.8 5.3 7.4   Medications Amoxiciline count integer overall overall 8,444 3,405 31,096 78,471 28,040 16,528 43,359 81,405 68,651     percentage percentage overall overall 81.5023199422285 30.3833421086892 93.1795864831656 54.043101449497 25.4818350775167 47.7587363682687 70.4463991336524 0.750555354170501 77.2408777615055    Ibuprofen count integer overall overall 32,731 61,475 7,917 51,906 30,628 67,140 39,367 74,785 13,893     percentage percentage overall overall 74.6071676257998 72.3450553836301 61.4524137461558 47.3980569280684 57.8461039112881 24.159372295253 11.4378662081435 29.8344632610679 48.4119494911283cohort2     1 mock cohort_name number subjects -- count integer overall overall 9,835,116 1,791,275 1,379,704 565,586 5,463,676 4,665,048 8,963,784 185,314 8,509,742   age -- mean numeric overall overall 88.4 39.6 3.8 95.1 78.4 21.9 33.1 17.8 36.3     sd numeric overall overall 7.2 2.6 6.7 2.1 6.9 1.9 7.8 0.2 9.3   Medications Amoxiciline count integer overall overall 77,731 9,120 74,262 39,667 29,603 74,292 46,651 77,303 2,212     percentage percentage overall overall 26.5793564263731 97.104093618691 19.0525120124221 1.96958889719099 61.2376979552209 52.5731408968568 63.4520042454824 39.5447959192097 17.4868220463395    Ibuprofen count integer overall overall 37,734 64,138 99,419 36,856 33,735 91,369 90,942 23,838 41,168     percentage percentage overall overall 56.7406318150461 75.395310902968 54.5425235992298 75.9677961235866 21.2967462604865 83.9265023823828 40.6697055324912 87.3739800183102 88.2156537845731"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/fxTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a flextable object from a dataframe — fxTable","title":"Creates a flextable object from a dataframe — fxTable","text":"Creates flextable object dataframe using delimiter span header, allows easily customise table style.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/fxTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a flextable object from a dataframe — fxTable","text":"","code":"fxTable(   x,   delim = \"\\n\",   style = \"default\",   na = \"-\",   title = NULL,   subtitle = NULL,   caption = NULL,   groupColumn = NULL,   groupAsColumn = FALSE,   groupOrder = NULL,   colsToMergeRows = NULL )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/fxTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a flextable object from a dataframe — fxTable","text":"x dataframe. delim Delimiter. style Named list specifies style different parts gt flextable table generated. Accepted style entries : title, subtitle, header, header_name, header_level, column_name, group_label, body. Alternatively, use \"default\" get visOmopResults style, NULL gt/flextable style. Keep mind styling code different gt flextable. see \"deafult\" gt style code use gtStyle(), flextableStyle() flextable default code style. na display missing values. title Title table, NULL title. subtitle Subtitle table, NULL subtitle. caption Caption table, NULL caption. Text markdown formatting style (e.g. *caption * caption italics). groupColumn Specifies columns use group labels. default, new group name combination column names, joined \"_\". assign custom group name, provide named list : list(newGroupName = c(\"variable_name\", \"variable_level\")) groupAsColumn Whether display group labels column (TRUE) rows (FALSE). groupOrder Order display group labels. colsToMergeRows Names columns merge vertically consecutive row cells identical values. Alternatively, use \"all_columns\" apply merging columns, use NULL indicate merging.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/fxTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a flextable object from a dataframe — fxTable","text":"flextable object. flextable object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/groupColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify variables in group_name column — groupColumns","title":"Identify variables in group_name column — groupColumns","text":"Identifies returns unique values group_name column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/groupColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify variables in group_name column — groupColumns","text":"","code":"groupColumns(result)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/groupColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify variables in group_name column — groupColumns","text":"result tibble.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/groupColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify variables in group_name column — groupColumns","text":"Unique values group name column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/groupColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify variables in group_name column — groupColumns","text":"","code":"mockSummarisedResult() |>   groupColumns() #> [1] \"cohort_name\""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/gtStyle.html","id":null,"dir":"Reference","previous_headings":"","what":"Default style code expresion for gt tables. — gtStyle","title":"Default style code expresion for gt tables. — gtStyle","text":"Default style code expresion gt tables.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/gtStyle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default style code expresion for gt tables. — gtStyle","text":"","code":"gtStyle(styleName = \"default\")"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/gtStyle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default style code expresion for gt tables. — gtStyle","text":"styleName Name style. Currently package just one predefined style (\"default\").","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/gtTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a gt object from a dataframe — gtTable","title":"Creates a gt object from a dataframe — gtTable","text":"Creates flextable object dataframe using delimiter span header, allows easily customise table style.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/gtTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a gt object from a dataframe — gtTable","text":"","code":"gtTable(   x,   delim = \"\\n\",   style = \"default\",   na = \"-\",   title = NULL,   subtitle = NULL,   caption = NULL,   groupColumn = NULL,   groupAsColumn = FALSE,   groupOrder = NULL,   colsToMergeRows = NULL )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/gtTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a gt object from a dataframe — gtTable","text":"x dataframe. delim Delimiter. style Named list specifies style different parts gt flextable table generated. Accepted style entries : title, subtitle, header, header_name, header_level, column_name, group_label, body. Alternatively, use \"default\" get visOmopResults style, NULL gt/flextable style. Keep mind styling code different gt flextable. see \"deafult\" gt style code use gtStyle(), flextableStyle() flextable default code style. na display missing values. title Title table, NULL title. subtitle Subtitle table, NULL subtitle. caption Caption table, NULL caption. Text markdown formatting style (e.g. *caption * caption italics). groupColumn Specifies columns use group labels. default, new group name combination column names, joined \"_\". assign custom group name, provide named list : list(newGroupName = c(\"variable_name\", \"variable_level\")) groupAsColumn Whether display group labels column (TRUE) rows (FALSE). groupOrder Order display group labels. colsToMergeRows Names columns merge vertically consecutive row cells identical values. Alternatively, use \"all_columns\" apply merging columns, use NULL indicate merging.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/gtTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a gt object from a dataframe — gtTable","text":"gt object. gt table.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/mockSummarisedResult.html","id":null,"dir":"Reference","previous_headings":"","what":"A summarised_result object filled with mock data — mockSummarisedResult","title":"A summarised_result object filled with mock data — mockSummarisedResult","text":"Creates object class summarised_result mock data illustration purposes.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/mockSummarisedResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A summarised_result object filled with mock data — mockSummarisedResult","text":"","code":"mockSummarisedResult()"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/mockSummarisedResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A summarised_result object filled with mock data — mockSummarisedResult","text":"object class summarised_result mock data.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/mockSummarisedResult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A summarised_result object filled with mock data — mockSummarisedResult","text":"","code":"mockSummarisedResult() #> # A tibble: 126 × 13 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 116 more rows #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/optionsTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Additional arguments for the function visOmopTable — optionsTable","title":"Additional arguments for the function visOmopTable — optionsTable","text":"provides list allowed inputs .option argument visOmopTable given default value.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/optionsTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additional arguments for the function visOmopTable — optionsTable","text":"","code":"optionsTable()"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/optionsTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Additional arguments for the function visOmopTable — optionsTable","text":"default .options named list.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/optionsTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Additional arguments for the function visOmopTable — optionsTable","text":"","code":"{ optionsTable() } #> $decimals #>    integer percentage    numeric proportion  #>          0          2          2          2  #>  #> $decimalMark #> [1] \".\" #>  #> $bigMark #> [1] \",\" #>  #> $keepNotFormatted #> [1] TRUE #>  #> $useFormatOrder #> [1] TRUE #>  #> $delim #> [1] \"\\n\" #>  #> $includeHeaderName #> [1] TRUE #>  #> $includeHeaderKey #> [1] TRUE #>  #> $style #> [1] \"default\" #>  #> $na #> [1] \"-\" #>  #> $title #> NULL #>  #> $subtitle #> NULL #>  #> $caption #> NULL #>  #> $groupAsColumn #> [1] FALSE #>  #> $groupOrder #> NULL #>  #> $merge #> [1] \"all_columns\" #>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/optionsVisOmopTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated — optionsVisOmopTable","title":"Deprecated — optionsVisOmopTable","text":"Deprecated","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/optionsVisOmopTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated — optionsVisOmopTable","text":"","code":"optionsVisOmopTable()"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/optionsVisOmopTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated — optionsVisOmopTable","text":"list options","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/pivotEstimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Set estimates as columns — pivotEstimates","title":"Set estimates as columns — pivotEstimates","text":"Pivot estimates new columns result table.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/pivotEstimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set estimates as columns — pivotEstimates","text":"","code":"pivotEstimates(result, pivotEstimatesBy = \"estimate_name\", nameStyle = NULL)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/pivotEstimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set estimates as columns — pivotEstimates","text":"result summarised_result. pivotEstimatesBy Names pivot wider estimate values. NULL table pivotted. nameStyle Name style (glue package specifications) customise names pivotting estimates. NULL standard tidyr::pivot_wider formatting used.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/pivotEstimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set estimates as columns — pivotEstimates","text":"tibble.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/pivotEstimates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set estimates as columns — pivotEstimates","text":"","code":"result <- mockSummarisedResult() result |> pivotEstimates() #> # A tibble: 72 × 14 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 62 more rows #> # ℹ 8 more variables: variable_name <chr>, variable_level <chr>, #> #   additional_name <chr>, additional_level <chr>, count <int>, mean <dbl>, #> #   sd <dbl>, percentage <dbl>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics tidy omopgenerics bind, exportSummarisedResult, importSummarisedResult, settings, suppress","code":""},{"path":[]},{"path":"https://darwin-eu.github.io/visOmopResults/reference/scatterPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a scatter plot visualisation from a summarised result object — scatterPlot","text":"","code":"scatterPlot(   result,   x,   y,   line,   point,   ribbon,   ymin = NULL,   ymax = NULL,   facet = NULL,   colour = NULL,   group = colour )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/scatterPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a scatter plot visualisation from a summarised result object — scatterPlot","text":"result summarised result object. x Column estimate name used x variable. y Column estimate name used y variable line Whether plot line using geom_line. point Whether plot points using geom_point. ribbon Whether plot ribbon using geom_ribbon. ymin Lower limit error bars, provided plot using geom_errorbar. ymax Upper limit error bars, provided plot using geom_errorbar. facet Variables facet , formula can provided specify variables used rows ones columns. colour Columns use determine colors. group Columns use determine group.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/scatterPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a scatter plot visualisation from a summarised result object — scatterPlot","text":"plot object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/scatterPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a scatter plot visualisation from a summarised result object — scatterPlot","text":"","code":"# \\donttest{ result <- mockSummarisedResult() |>   dplyr::filter(variable_name == \"age\")  scatterPlot(   result = result,   x = \"cohort_name\",   y = \"mean\",   line = TRUE,   point = TRUE,   ribbon = FALSE,   facet = age_group ~ sex)  # }"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/settingsColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify settings columns of a summarised_result — settingsColumns","title":"Identify settings columns of a summarised_result — settingsColumns","text":"Identifies returns columns settings table obtained using settings() summarised_result object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/settingsColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify settings columns of a summarised_result — settingsColumns","text":"","code":"settingsColumns(result)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/settingsColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify settings columns of a summarised_result — settingsColumns","text":"result summarised_result.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/settingsColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify settings columns of a summarised_result — settingsColumns","text":"Vector names settings columns","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/settingsColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify settings columns of a summarised_result — settingsColumns","text":"","code":"mockSummarisedResult() |>   settingsColumns() #> [1] \"result_type\"     \"package_name\"    \"package_version\""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitAdditional.html","id":null,"dir":"Reference","previous_headings":"","what":"Split additional_name and additional_level columns — splitAdditional","title":"Split additional_name and additional_level columns — splitAdditional","text":"Pivots input dataframe values column additional_name transformed columns contain values additional_level column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitAdditional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split additional_name and additional_level columns — splitAdditional","text":"","code":"splitAdditional(result, keep = FALSE, fill = \"overall\")"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitAdditional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split additional_name and additional_level columns — splitAdditional","text":"result dataframe least columns additional_name additional_level. keep Whether keep original group_name group_level columns. fill Optionally, character specifies value filled missing.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitAdditional.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split additional_name and additional_level columns — splitAdditional","text":"dataframe.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitAdditional.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split additional_name and additional_level columns — splitAdditional","text":"","code":"mockSummarisedResult() |>   splitAdditional() #> # A tibble: 126 × 11 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 116 more rows #> # ℹ 5 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitAll.html","id":null,"dir":"Reference","previous_headings":"","what":"Split all pairs name-level into columns. — splitAll","title":"Split all pairs name-level into columns. — splitAll","text":"Pivots input dataframe pair name-level columns transformed columns (name) contain values corresponding level.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitAll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split all pairs name-level into columns. — splitAll","text":"","code":"splitAll(result, keep = FALSE, fill = \"overall\", exclude = \"variable\")"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitAll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split all pairs name-level into columns. — splitAll","text":"result data.frame. keep Whether keep original name-level columns. fill character specifies value filled missing. exclude Name column pair exclude.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitAll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split all pairs name-level into columns. — splitAll","text":"dataframe group, strata additional columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitAll.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split all pairs name-level into columns. — splitAll","text":"","code":"mockSummarisedResult() |>   splitAll() #> # A tibble: 126 × 10 #>    result_id cdm_name cohort_name age_group sex     variable_name variable_level #>        <int> <chr>    <chr>       <chr>     <chr>   <chr>         <chr>          #>  1         1 mock     cohort1     overall   overall number subje… NA             #>  2         1 mock     cohort1     <40       Male    number subje… NA             #>  3         1 mock     cohort1     >=40      Male    number subje… NA             #>  4         1 mock     cohort1     <40       Female  number subje… NA             #>  5         1 mock     cohort1     >=40      Female  number subje… NA             #>  6         1 mock     cohort1     overall   Male    number subje… NA             #>  7         1 mock     cohort1     overall   Female  number subje… NA             #>  8         1 mock     cohort1     <40       overall number subje… NA             #>  9         1 mock     cohort1     >=40      overall number subje… NA             #> 10         1 mock     cohort2     overall   overall number subje… NA             #> # ℹ 116 more rows #> # ℹ 3 more variables: estimate_name <chr>, estimate_type <chr>, #> #   estimate_value <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Split group_name and group_level columns — splitGroup","title":"Split group_name and group_level columns — splitGroup","text":"Pivots input dataframe values column group_name transformed columns contain values group_level column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split group_name and group_level columns — splitGroup","text":"","code":"splitGroup(result, keep = FALSE, fill = \"overall\")"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split group_name and group_level columns — splitGroup","text":"result dataframe least columns group_name group_level. keep Whether keep original group_name group_level columns. fill Optionally, character specifies value filled missing.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split group_name and group_level columns — splitGroup","text":"dataframe.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split group_name and group_level columns — splitGroup","text":"","code":"mockSummarisedResult() |>   splitGroup() #> # A tibble: 126 × 12 #>    result_id cdm_name cohort_name strata_name       strata_level   variable_name #>        <int> <chr>    <chr>       <chr>             <chr>          <chr>         #>  1         1 mock     cohort1     overall           overall        number subje… #>  2         1 mock     cohort1     age_group &&& sex <40 &&& Male   number subje… #>  3         1 mock     cohort1     age_group &&& sex >=40 &&& Male  number subje… #>  4         1 mock     cohort1     age_group &&& sex <40 &&& Female number subje… #>  5         1 mock     cohort1     age_group &&& sex >=40 &&& Fema… number subje… #>  6         1 mock     cohort1     sex               Male           number subje… #>  7         1 mock     cohort1     sex               Female         number subje… #>  8         1 mock     cohort1     age_group         <40            number subje… #>  9         1 mock     cohort1     age_group         >=40           number subje… #> 10         1 mock     cohort2     overall           overall        number subje… #> # ℹ 116 more rows #> # ℹ 6 more variables: variable_level <chr>, estimate_name <chr>, #> #   estimate_type <chr>, estimate_value <chr>, additional_name <chr>, #> #   additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitNameLevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Split name and level columns into the columns — splitNameLevel","title":"Split name and level columns into the columns — splitNameLevel","text":"Pivots input dataframe values name columns transformed columns, values come specified level column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitNameLevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split name and level columns into the columns — splitNameLevel","text":"","code":"splitNameLevel(   result,   name = \"group_name\",   level = \"group_level\",   keep = FALSE,   fill = \"overall\" )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitNameLevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split name and level columns into the columns — splitNameLevel","text":"result summarised_result object. name Column names. level Column levels. keep Whether keep original group_name group_level columns. fill Optionally, character specifies value filled missing.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitNameLevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split name and level columns into the columns — splitNameLevel","text":"dataframe specified name column values columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitStrata.html","id":null,"dir":"Reference","previous_headings":"","what":"Split strata_name and strata_level columns — splitStrata","title":"Split strata_name and strata_level columns — splitStrata","text":"Pivots input dataframe values column strata_name transformed columns contain values strata_level column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitStrata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split strata_name and strata_level columns — splitStrata","text":"","code":"splitStrata(result, keep = FALSE, fill = \"overall\")"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitStrata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split strata_name and strata_level columns — splitStrata","text":"result dataframe least columns strata_name strata_level. keep Whether keep original group_name group_level columns. fill Optionally, character specifies value filled missing.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitStrata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split strata_name and strata_level columns — splitStrata","text":"dataframe.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitStrata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split strata_name and strata_level columns — splitStrata","text":"","code":"mockSummarisedResult() |>   splitStrata() #> # A tibble: 126 × 13 #>    result_id cdm_name group_name  group_level age_group sex     variable_name   #>        <int> <chr>    <chr>       <chr>       <chr>     <chr>   <chr>           #>  1         1 mock     cohort_name cohort1     overall   overall number subjects #>  2         1 mock     cohort_name cohort1     <40       Male    number subjects #>  3         1 mock     cohort_name cohort1     >=40      Male    number subjects #>  4         1 mock     cohort_name cohort1     <40       Female  number subjects #>  5         1 mock     cohort_name cohort1     >=40      Female  number subjects #>  6         1 mock     cohort_name cohort1     overall   Male    number subjects #>  7         1 mock     cohort_name cohort1     overall   Female  number subjects #>  8         1 mock     cohort_name cohort1     <40       overall number subjects #>  9         1 mock     cohort_name cohort1     >=40      overall number subjects #> 10         1 mock     cohort_name cohort2     overall   overall number subjects #> # ℹ 116 more rows #> # ℹ 6 more variables: variable_level <chr>, estimate_name <chr>, #> #   estimate_type <chr>, estimate_value <chr>, additional_name <chr>, #> #   additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/strataColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify variables in strata_name column — strataColumns","title":"Identify variables in strata_name column — strataColumns","text":"Identifies returns unique values strata_name column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/strataColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify variables in strata_name column — strataColumns","text":"","code":"strataColumns(result)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/strataColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify variables in strata_name column — strataColumns","text":"result tibble.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/strataColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify variables in strata_name column — strataColumns","text":"Unique values strata name column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/strataColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify variables in strata_name column — strataColumns","text":"","code":"mockSummarisedResult() |>   strataColumns() #> [1] \"age_group\" \"sex\""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidy.summarised_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a summarised_result object into a tidy tibble — tidy.summarised_result","title":"Turn a summarised_result object into a tidy tibble — tidy.summarised_result","text":"Provides tools obtaining tidy version summarised_result object. tidy version include settings columns, estimate_value pivotted columns using estimate_name names, group, strata, additional splitted. want customise tidy operations, please use tidySummarisedResult().","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidy.summarised_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a summarised_result object into a tidy tibble — tidy.summarised_result","text":"","code":"# S3 method for class 'summarised_result' tidy(x, ...)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidy.summarised_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a summarised_result object into a tidy tibble — tidy.summarised_result","text":"x summarised_result. ... compatibility (used).","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidy.summarised_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn a summarised_result object into a tidy tibble — tidy.summarised_result","text":"tibble.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidy.summarised_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn a summarised_result object into a tidy tibble — tidy.summarised_result","text":"","code":"result <- mockSummarisedResult() result |> tidy() #> # A tibble: 72 × 13 #>    cdm_name cohort_name age_group sex     variable_name   variable_level   count #>    <chr>    <chr>       <chr>     <chr>   <chr>           <chr>            <int> #>  1 mock     cohort1     overall   overall number subjects NA             5518207 #>  2 mock     cohort1     <40       Male    number subjects NA             9262120 #>  3 mock     cohort1     >=40      Male    number subjects NA             5830144 #>  4 mock     cohort1     <40       Female  number subjects NA              745444 #>  5 mock     cohort1     >=40      Female  number subjects NA             1032387 #>  6 mock     cohort1     overall   Male    number subjects NA             9288374 #>  7 mock     cohort1     overall   Female  number subjects NA             2535113 #>  8 mock     cohort1     <40       overall number subjects NA             2286501 #>  9 mock     cohort1     >=40      overall number subjects NA             3285193 #> 10 mock     cohort2     overall   overall number subjects NA             3804787 #> # ℹ 62 more rows #> # ℹ 6 more variables: mean <dbl>, sd <dbl>, percentage <dbl>, #> #   result_type <chr>, package_name <chr>, package_version <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidyColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify tidy columns of a summarised_result — tidyColumns","title":"Identify tidy columns of a summarised_result — tidyColumns","text":"Identifies returns columns tidy version summarised_result .","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidyColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify tidy columns of a summarised_result — tidyColumns","text":"","code":"tidyColumns(result)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidyColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify tidy columns of a summarised_result — tidyColumns","text":"result summarised_result.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidyColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify tidy columns of a summarised_result — tidyColumns","text":"Table columns applying tidy() function summarisd result.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidyColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify tidy columns of a summarised_result — tidyColumns","text":"","code":"mockSummarisedResult() |>   tidyColumns() #>  [1] \"cdm_name\"        \"cohort_name\"     \"age_group\"       \"sex\"             #>  [5] \"variable_name\"   \"variable_level\"  \"count\"           \"mean\"            #>  [9] \"sd\"              \"percentage\"      \"result_type\"     \"package_name\"    #> [13] \"package_version\""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidySummarisedResult.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a custom tidy visualization of a summarised_result object — tidySummarisedResult","title":"Get a custom tidy visualization of a summarised_result object — tidySummarisedResult","text":"Provides tools obtaining tidy version summarised_result object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidySummarisedResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a custom tidy visualization of a summarised_result object — tidySummarisedResult","text":"","code":"tidySummarisedResult(   result,   splitGroup = TRUE,   splitStrata = TRUE,   splitAdditional = TRUE,   settingsColumns = colnames(settings(result)),   pivotEstimatesBy = \"estimate_name\",   nameStyle = NULL )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidySummarisedResult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a custom tidy visualization of a summarised_result object — tidySummarisedResult","text":"result summarised_result. splitGroup TRUE split group name-level column pair. splitStrata TRUE split group name-level column pair. splitAdditional TRUE split group name-level column pair. settingsColumns Settings added columns, default settings added. NULL empty character vector, settings added. pivotEstimatesBy Names pivot wider estimate values. NULL table pivotted. nameStyle Name style (glue package specifications) customise names pivotting estimates. NULL standard tidyr::pivot_wider formatting used.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidySummarisedResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a custom tidy visualization of a summarised_result object — tidySummarisedResult","text":"tibble.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidySummarisedResult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a custom tidy visualization of a summarised_result object — tidySummarisedResult","text":"","code":"{ result <- mockSummarisedResult()  result |> tidySummarisedResult()  result |>   tidySummarisedResult(     settingsColumns =character(),     pivotEstimatesBy = c(\"variable_name\", \"variable_level\", \"estimate_name\")   )  result |>   tidySummarisedResult(     settingsColumns =character(),     pivotEstimatesBy = c(\"variable_name\", \"variable_level\", \"estimate_name\"),     nameStyle = \"{estimate_name}_{variable_name}_{variable_level}\"   ) } #> # A tibble: 18 × 12 #>    result_id cdm_name cohort_name age_group sex     `count_number subjects` #>        <int> <chr>    <chr>       <chr>     <chr>                     <int> #>  1         1 mock     cohort1     overall   overall                 3757580 #>  2         1 mock     cohort1     <40       Male                    1368529 #>  3         1 mock     cohort1     >=40      Male                     986021 #>  4         1 mock     cohort1     <40       Female                  6423973 #>  5         1 mock     cohort1     >=40      Female                  8174897 #>  6         1 mock     cohort1     overall   Male                    1567231 #>  7         1 mock     cohort1     overall   Female                  5118733 #>  8         1 mock     cohort1     <40       overall                 7105515 #>  9         1 mock     cohort1     >=40      overall                 3634426 #> 10         1 mock     cohort2     overall   overall                 6686055 #> 11         1 mock     cohort2     <40       Male                    7204168 #> 12         1 mock     cohort2     >=40      Male                    5419602 #> 13         1 mock     cohort2     <40       Female                  3933305 #> 14         1 mock     cohort2     >=40      Female                  3998490 #> 15         1 mock     cohort2     overall   Male                    2749445 #> 16         1 mock     cohort2     overall   Female                  1644105 #> 17         1 mock     cohort2     <40       overall                 8670615 #> 18         1 mock     cohort2     >=40      overall                 6532899 #> # ℹ 6 more variables: mean_age <dbl>, sd_age <dbl>, #> #   count_Medications_Amoxiciline <int>, #> #   percentage_Medications_Amoxiciline <dbl>, #> #   count_Medications_Ibuprofen <int>, percentage_Medications_Ibuprofen <dbl>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteAdditional.html","id":null,"dir":"Reference","previous_headings":"","what":"Unite one or more columns in additional_name-additional_level format — uniteAdditional","title":"Unite one or more columns in additional_name-additional_level format — uniteAdditional","text":"Unites targeted table columns additional_name-additional_level columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteAdditional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unite one or more columns in additional_name-additional_level format — uniteAdditional","text":"","code":"uniteAdditional(   x,   cols = character(0),   keep = FALSE,   ignore = c(NA, \"overall\") )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteAdditional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unite one or more columns in additional_name-additional_level format — uniteAdditional","text":"x Tibble dataframe. cols Columns aggregate. keep Whether keep original columns. ignore Level values ignore.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteAdditional.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unite one or more columns in additional_name-additional_level format — uniteAdditional","text":"tibble new columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteAdditional.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unite one or more columns in additional_name-additional_level format — uniteAdditional","text":"","code":"x <- dplyr::tibble(   variable = \"number subjects\",   value = c(10, 15, 40, 78),   sex = c(\"Male\", \"Female\", \"Male\", \"Female\"),   age_group = c(\"<40\", \">40\", \">40\", \"<40\") )  x |>   uniteAdditional(c(\"sex\", \"age_group\")) #> # A tibble: 4 × 4 #>   variable        value additional_name   additional_level #>   <chr>           <dbl> <chr>             <chr>            #> 1 number subjects    10 sex &&& age_group Male &&& <40     #> 2 number subjects    15 sex &&& age_group Female &&& >40   #> 3 number subjects    40 sex &&& age_group Male &&& >40     #> 4 number subjects    78 sex &&& age_group Female &&& <40"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Unite one or more columns in group_name-group_level format — uniteGroup","title":"Unite one or more columns in group_name-group_level format — uniteGroup","text":"Unites targeted table columns group_name-group_level columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unite one or more columns in group_name-group_level format — uniteGroup","text":"","code":"uniteGroup(x, cols = character(0), keep = FALSE, ignore = c(NA, \"overall\"))"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unite one or more columns in group_name-group_level format — uniteGroup","text":"x Tibble dataframe. cols Columns aggregate. keep Whether keep original columns. ignore Level values ignore.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unite one or more columns in group_name-group_level format — uniteGroup","text":"tibble new columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unite one or more columns in group_name-group_level format — uniteGroup","text":"","code":"x <- dplyr::tibble(   variable = \"number subjects\",   value = c(10, 15, 40, 78),   sex = c(\"Male\", \"Female\", \"Male\", \"Female\"),   age_group = c(\"<40\", \">40\", \">40\", \"<40\") )  x |>   uniteGroup(c(\"sex\", \"age_group\")) #> # A tibble: 4 × 4 #>   variable        value group_name        group_level    #>   <chr>           <dbl> <chr>             <chr>          #> 1 number subjects    10 sex &&& age_group Male &&& <40   #> 2 number subjects    15 sex &&& age_group Female &&& >40 #> 3 number subjects    40 sex &&& age_group Male &&& >40   #> 4 number subjects    78 sex &&& age_group Female &&& <40"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteNameLevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Unite one or more columns in name-level format — uniteNameLevel","title":"Unite one or more columns in name-level format — uniteNameLevel","text":"Unites targeted table columns pair name-level columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteNameLevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unite one or more columns in name-level format — uniteNameLevel","text":"","code":"uniteNameLevel(   x,   cols = character(0),   name = \"group_name\",   level = \"group_level\",   keep = FALSE,   ignore = c(NA, \"overall\") )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteNameLevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unite one or more columns in name-level format — uniteNameLevel","text":"x dataframe. cols Columns aggregate. name Column name name column. level Column name level column. keep Whether keep original columns. ignore Level values ignore.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteNameLevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unite one or more columns in name-level format — uniteNameLevel","text":"tibble new columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteStrata.html","id":null,"dir":"Reference","previous_headings":"","what":"Unite one or more columns in strata_name-strata_level format — uniteStrata","title":"Unite one or more columns in strata_name-strata_level format — uniteStrata","text":"Unites targeted table columns strata_name-strata_level columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteStrata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unite one or more columns in strata_name-strata_level format — uniteStrata","text":"","code":"uniteStrata(x, cols = character(0), keep = FALSE, ignore = c(NA, \"overall\"))"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteStrata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unite one or more columns in strata_name-strata_level format — uniteStrata","text":"x Tibble dataframe. cols Columns aggregate. keep Whether keep original columns. ignore Level values ignore.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteStrata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unite one or more columns in strata_name-strata_level format — uniteStrata","text":"tibble new columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteStrata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unite one or more columns in strata_name-strata_level format — uniteStrata","text":"","code":"x <- dplyr::tibble(   variable = \"number subjects\",   value = c(10, 15, 40, 78),   sex = c(\"Male\", \"Female\", \"Male\", \"Female\"),   age_group = c(\"<40\", \">40\", \">40\", \"<40\") )  x |>   uniteStrata(c(\"sex\", \"age_group\")) #> # A tibble: 4 × 4 #>   variable        value strata_name       strata_level   #>   <chr>           <dbl> <chr>             <chr>          #> 1 number subjects    10 sex &&& age_group Male &&& <40   #> 2 number subjects    15 sex &&& age_group Female &&& >40 #> 3 number subjects    40 sex &&& age_group Male &&& >40   #> 4 number subjects    78 sex &&& age_group Female &&& <40"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visOmopResults-package.html","id":null,"dir":"Reference","previous_headings":"","what":"visOmopResults: Graphs and Tables for OMOP Results — visOmopResults-package","title":"visOmopResults: Graphs and Tables for OMOP Results — visOmopResults-package","text":"Provides methods transform omop_result objects formatted tables figures, facilitating visualization study results working Observational Medical Outcomes Partnership (OMOP) Common Data Model.","code":""},{"path":[]},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visOmopResults-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"visOmopResults: Graphs and Tables for OMOP Results — visOmopResults-package","text":"Maintainer: Núria Mercadé-Besora nuria.mercadebesora@ndorms.ox.ac.uk (ORCID) Authors: Martí Català marti.catalasabate@ndorms.ox.ac.uk (ORCID) Yuchen Guo yuchen.guo@ndorms.ox.ac.uk (ORCID)","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visOmopTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a summarised_result object into a gt, flextable, or tibble object — visOmopTable","title":"Format a summarised_result object into a gt, flextable, or tibble object — visOmopTable","text":"function combines functionalities formatEstimateValue(), estimateName(), formatHeader(), formatTable() single function specifically summarised_result objects.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visOmopTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a summarised_result object into a gt, flextable, or tibble object — visOmopTable","text":"","code":"visOmopTable(   result,   estimateName = character(),   header = character(),   settingsColumns = character(),   groupColumn = character(),   rename = character(),   type = \"gt\",   hide = character(),   showMinCellCount = TRUE,   .options = list(),   split = lifecycle::deprecated(),   excludeColumns = lifecycle::deprecated(),   formatEstimateName = lifecycle::deprecated(),   renameColumns = lifecycle::deprecated() )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visOmopTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a summarised_result object into a gt, flextable, or tibble object — visOmopTable","text":"result summarised_result object. estimateName named list estimate names join, sorted computation order. Use <...> indicate estimate names. header vector specifying elements include header. order elements matters, first topmost header. input vector elements can : Column names split summarised result generated splitAll() Settings specified settings argument group, strata, additional, variable, estimate, /settings refer columns within groups input create overall header labels specified location. settingsColumns character vector names settings include table. groupColumn Columns use group labels. default, name new group tidy* column names separated \";\". specify custom group name, use named list : list(\"newGroupName\" = c(\"variable_name\", \"variable_level\")). *tidy: tidy format applied column names replaces \"_\" space converts sentence case. Use rename customize specific column names. rename named vector customize column names, e.g., c(\"Database name\" = \"cdm_name\"). function renames column names specified tidy* format. type type desired formatted table. Options : \"gt\", \"flextable\", \"tibble\". hide Columns drop output table. default, result_id estimate_type always dropped. showMinCellCount TRUE, suppressed estimates indicated \"<{min_cell_count}\", otherwise, default na defined .options used. .options named list additional formatting options. visOmopResults::optionsTable() shows allowed arguments default values. split  excludeColumns  formatEstimateName  renameColumns","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visOmopTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a summarised_result object into a gt, flextable, or tibble object — visOmopTable","text":"tibble, gt, flextable object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visOmopTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a summarised_result object into a gt, flextable, or tibble object — visOmopTable","text":"","code":"result <- mockSummarisedResult() result |>   visOmopTable(     estimateName = c(\"N%\" = \"<count> (<percentage>)\",                      \"N\" = \"<count>\",                      \"Mean (SD)\" = \"<mean> (<sd>)\"),     header = c(\"group\"),     rename = c(\"Database name\" = \"cdm_name\"),     groupColumn = strataColumns(result)   ) #> ! Results have not been suppressed.     Database name       Variable name       Variable level       Estimate name                Cohort name            cohort1       cohort2     overall; overall     mock number subjects - N 4,465,442 1,264,907 age - Mean (SD) 9.22 (5.47) 66.62 (9.91) Medications Amoxiciline N% 37,612 (66.83) 67,942 (16.17)  Ibuprofen N% 28,753 (64.21) 66,332 (97.12)<40; Male     mock number subjects - N 8,662,614 6,692,826 age - Mean (SD) 20.70 (3.36) 54.09 (9.18) Medications Amoxiciline N% 82,503 (91.82) 26,774 (27.48)  Ibuprofen N% 52,927 (83.24) 75,633 (76.41)>=40; Male     mock number subjects - N 5,034,348 5,922,902 age - Mean (SD) 24.37 (9.11) 12.10 (9.95) Medications Amoxiciline N% 68,307 (9.43) 22,833 (88.25)  Ibuprofen N% 1,485 (54.96) 57,988 (12.78)<40; Female     mock number subjects - N 1,728,484 2,012,155 age - Mean (SD) 64.94 (8.64) 29.15 (8.53) Medications Amoxiciline N% 31,822 (82.09) 42,519 (81.28)  Ibuprofen N% 40,212 (4.89) 55,531 (87.86)>=40; Female     mock number subjects - N 7,934,050 4,249,537 age - Mean (SD) 26.02 (1.06) 90.69 (8.87) Medications Amoxiciline N% 13,475 (34.73) 83,123 (30.24)  Ibuprofen N% 14,421 (28.57) 4,483 (38.98)overall; Male     mock number subjects - N 7,581,437 2,110,110 age - Mean (SD) 32.32 (7.49) 17.82 (4.57) Medications Amoxiciline N% 94,329 (84.52) 18,203 (8.40)  Ibuprofen N% 8,474 (85.79) 42,031 (19.38)overall; Female     mock number subjects - N 1,844,521 481,151 age - Mean (SD) 66.12 (5.83) 91.40 (1.05) Medications Amoxiciline N% 59,753 (80.79) 56,066 (39.76)  Ibuprofen N% 85,104 (55.64) 73,966 (18.56)<40; overall     mock number subjects - N 3,355,369 4,739,725 age - Mean (SD) 23.71 (5.12) 58.30 (2.80) Medications Amoxiciline N% 72,500 (70.35) 63,604 (4.93)  Ibuprofen N% 48,387 (45.66) 51,352 (86.25)>=40; overall     mock number subjects - N 2,341,331 9,722,978 age - Mean (SD) 82.83 (2.94) 40.14 (6.56) Medications Amoxiciline N% 31,387 (13.77) 22,084 (37.14)  Ibuprofen N% 85,678 (63.83) 15,981 (55.44)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a formatted table from a data.table — visTable","title":"Generate a formatted table from a data.table — visTable","text":"function combines functionalities formatEstimateValue(), estimateName(), formatHeader(), formatTable() single function. require input table summarised_result, expect specific fields apply formatting.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a formatted table from a data.table — visTable","text":"","code":"visTable(   result,   estimateName = character(),   header = character(),   groupColumn = character(),   rename = character(),   type = \"gt\",   hide = character(),   .options = list() )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a formatted table from a data.table — visTable","text":"result table format. estimateName named list estimate names join, sorted computation order. Use <...> indicate estimate names. argument requires table estimate_name estimate_value columns. header vector specifying elements include header. order elements matters, first topmost header. vector elements can column names labels overall headers. table must contain estimate_value column pivot headers. groupColumn Columns use group labels. default, name new group tidy* column names separated \";\". specify custom group name, use named list : list(\"newGroupName\" = c(\"variable_name\", \"variable_level\")). *tidy: tidy format applied column names replaces \"_\" space converts sentence case. Use rename customize specific column names. rename named vector customize column names, e.g., c(\"Database name\" = \"cdm_name\"). function rename column names specified tidy* format. type desired format output table. Options : \"gt\", \"flextable\", \"tibble\". hide Columns drop output table. .options named list additional formatting options. visOmopResults::optionsTable() shows allowed arguments default values.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a formatted table from a data.table — visTable","text":"tibble, gt, flextable object.","code":""},{"path":[]},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a formatted table from a data.table — visTable","text":"","code":"result <- mockSummarisedResult() result |>   visTable(     estimateName = c(\"N%\" = \"<count> (<percentage>)\",                      \"N\" = \"<count>\",                      \"Mean (SD)\" = \"<mean> (<sd>)\"),     header = c(\"Estimate\"),     rename = c(\"Database name\" = \"cdm_name\"),     groupColumn = c(\"strata_name\", \"strata_level\"),     hide = c(\"additional_name\", \"additional_level\", \"estimate_type\", \"result_type\")   )     Result id       Database name       Group name       Group level       Variable name       Variable level       Estimate name       Estimate     overall; overall     1 mock cohort_name cohort1 number subjects - N 8,743,179   cohort2 number subjects - N 3,837,050   cohort1 age - Mean (SD) 29.13 (8.89)   cohort2 age - Mean (SD) 21.28 (1.92)   cohort1 Medications Amoxiciline N% 72,168 (9.26)   cohort2 Medications Amoxiciline N% 38,546 (74.59)   cohort1 Medications Ibuprofen N% 36,778 (25.42)   cohort2 Medications Ibuprofen N% 50,216 (53.86)age_group &&& sex; <40 &&& Male     1 mock cohort_name cohort1 number subjects - N 8,605,497   cohort2 number subjects - N 4,240,499   cohort1 age - Mean (SD) 22.44 (9.08)   cohort2 age - Mean (SD) 93.48 (9.31)   cohort1 Medications Amoxiciline N% 95,924 (50.69)   cohort2 Medications Amoxiciline N% 21,571 (91.59)   cohort1 Medications Ibuprofen N% 71,532 (34.64)   cohort2 Medications Ibuprofen N% 70,070 (27.21)age_group &&& sex; >=40 &&& Male     1 mock cohort_name cohort1 number subjects - N 6,456,449   cohort2 number subjects - N 3,046,179   cohort1 age - Mean (SD) 47.11 (8.59)   cohort2 age - Mean (SD) 29.27 (3.79)   cohort1 Medications Amoxiciline N% 9,535 (87.95)   cohort2 Medications Amoxiciline N% 70,239 (27.07)   cohort1 Medications Ibuprofen N% 46,572 (70.84)   cohort2 Medications Ibuprofen N% 19,766 (6.56)age_group &&& sex; <40 &&& Female     1 mock cohort_name cohort1 number subjects - N 7,642,874   cohort2 number subjects - N 6,072,955   cohort1 age - Mean (SD) 58.92 (9.46)   cohort2 age - Mean (SD) 28.11 (8.11)   cohort1 Medications Amoxiciline N% 54,442 (81.86)   cohort2 Medications Amoxiciline N% 34,056 (9.63)   cohort1 Medications Ibuprofen N% 27,049 (0.06)   cohort2 Medications Ibuprofen N% 84,422 (95.03)age_group &&& sex; >=40 &&& Female     1 mock cohort_name cohort1 number subjects - N 6,267,808   cohort2 number subjects - N 6,449,619   cohort1 age - Mean (SD) 84.90 (2.70)   cohort2 age - Mean (SD) 70.65 (0.41)   cohort1 Medications Amoxiciline N% 62,427 (59.15)   cohort2 Medications Amoxiciline N% 52,228 (45.92)   cohort1 Medications Ibuprofen N% 4,282 (29.48)   cohort2 Medications Ibuprofen N% 89,271 (52.54)sex; Male     1 mock cohort_name cohort1 number subjects - N 5,345,031   cohort2 number subjects - N 1,397,020   cohort1 age - Mean (SD) 79.42 (5.29)   cohort2 age - Mean (SD) 95.30 (2.96)   cohort1 Medications Amoxiciline N% 78,174 (52.17)   cohort2 Medications Amoxiciline N% 68,310 (73.72)   cohort1 Medications Ibuprofen N% 65,450 (17.98)   cohort2 Medications Ibuprofen N% 79,712 (79.98)sex; Female     1 mock cohort_name cohort1 number subjects - N 2,033,205   cohort2 number subjects - N 9,989,548   cohort1 age - Mean (SD) 58.52 (6.94)   cohort2 age - Mean (SD) 4.84 (8.51)   cohort1 Medications Amoxiciline N% 88,379 (68.55)   cohort2 Medications Amoxiciline N% 98,207 (22.07)   cohort1 Medications Ibuprofen N% 17,641 (43.20)   cohort2 Medications Ibuprofen N% 64,233 (1.61)age_group; <40     1 mock cohort_name cohort1 number subjects - N 9,183,192   cohort2 number subjects - N 99,190   cohort1 age - Mean (SD) 67.11 (2.39)   cohort2 age - Mean (SD) 15.84 (9.01)   cohort1 Medications Amoxiciline N% 90,206 (95.64)   cohort2 Medications Amoxiciline N% 57,374 (84.13)   cohort1 Medications Ibuprofen N% 81,509 (89.71)   cohort2 Medications Ibuprofen N% 66,098 (63.24)age_group; >=40     1 mock cohort_name cohort1 number subjects - N 9,184,110   cohort2 number subjects - N 1,999,574   cohort1 age - Mean (SD) 31.05 (6.77)   cohort2 age - Mean (SD) 69.98 (9.88)   cohort1 Medications Amoxiciline N% 81,939 (29.62)   cohort2 Medications Amoxiciline N% 78,171 (10.55)   cohort1 Medications Ibuprofen N% 79,208 (22.16)   cohort2 Medications Ibuprofen N% 21,905 (63.66)"}]
