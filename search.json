[{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://darwin-eu.github.io/visOmopResults/articles/formatFunctions.html","id":"formatting-functions-in-a-pipeline","dir":"Articles","previous_headings":"","what":"Formatting functions in a pipeline","title":"format functions","text":"First, load relevant libraries generate summarised_result mock results.","code":"library(visOmopResults) library(dplyr) mock_sr <- mockSummarisedResult() mock_sr |> glimpse() #> Rows: 126 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ cdm_name         <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock… #> $ group_name       <chr> \"cohort_name\", \"cohort_name\", \"cohort_name\", \"cohort_… #> $ group_level      <chr> \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\"… #> $ strata_name      <chr> \"overall\", \"age_group &&& sex\", \"age_group &&& sex\", … #> $ strata_level     <chr> \"overall\", \"<40 &&& Male\", \">=40 &&& Male\", \"<40 &&& … #> $ variable_name    <chr> \"number subjects\", \"number subjects\", \"number subject… #> $ variable_level   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ estimate_name    <chr> \"count\", \"count\", \"count\", \"count\", \"count\", \"count\",… #> $ estimate_type    <chr> \"integer\", \"integer\", \"integer\", \"integer\", \"integer\"… #> $ estimate_value   <chr> \"807501\", \"8343330\", \"6007609\", \"1572084\", \"73994\", \"… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"…"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/formatFunctions.html","id":"formatestimatevalue","dir":"Articles","previous_headings":"Formatting functions in a pipeline","what":"1. formatEstimateValue()","title":"format functions","text":"function provides tools format estimate_value column: choose number decimals display estimate_type estimate_name (decimals), change change decimal thousand/million separator mark (decimalMark bigMark respectively) default, decimals integer values set 0, numeric 2, percentage 1, proportion 3. defaulted decimal mark “.” thousand/million separator “,”. want number decimals estimates, instead named vector decimal argument can numeric pointing number decimals.","code":"mock_sr <- mock_sr |> formatEstimateValue() mock_sr |> glimpse() #> Rows: 126 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ cdm_name         <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock… #> $ group_name       <chr> \"cohort_name\", \"cohort_name\", \"cohort_name\", \"cohort_… #> $ group_level      <chr> \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\"… #> $ strata_name      <chr> \"overall\", \"age_group &&& sex\", \"age_group &&& sex\", … #> $ strata_level     <chr> \"overall\", \"<40 &&& Male\", \">=40 &&& Male\", \"<40 &&& … #> $ variable_name    <chr> \"number subjects\", \"number subjects\", \"number subject… #> $ variable_level   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ estimate_name    <chr> \"count\", \"count\", \"count\", \"count\", \"count\", \"count\",… #> $ estimate_type    <chr> \"integer\", \"integer\", \"integer\", \"integer\", \"integer\"… #> $ estimate_value   <chr> \"807,501\", \"8,343,330\", \"6,007,609\", \"1,572,084\", \"73… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"…"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/formatFunctions.html","id":"formatestimatename","dir":"Articles","previous_headings":"Formatting functions in a pipeline","what":"2. formatEstimateName()","title":"format functions","text":"can customise estimate display changing estimate name joining different estimates row. instance, can display counts percentages together “N (%)”. estimateNameFormat combinations can specified. Values estimate_name’s column specified <…>. new estimate_name names vector, value named. Additional input arguments keepNotFormatted specify whether formatted rows returned dropped. useFormatOrder TRUE, estimates presented order given estimateNameFormat, FALSE, original order kept (one estimate, new position first estimates merged).","code":"mock_sr <- mock_sr |>    formatEstimateName(     estimateNameFormat = c(       \"N (%)\" = \"<count> (<percentage>%)\",        \"N\" = \"<count>\",       \"Mean (SD)\" = \"<mean> (<sd>)\"     ),     keepNotFormatted = FALSE,     useFormatOrder = FALSE   ) mock_sr |> glimpse() #> Rows: 72 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ cdm_name         <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock… #> $ group_name       <chr> \"cohort_name\", \"cohort_name\", \"cohort_name\", \"cohort_… #> $ group_level      <chr> \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\"… #> $ strata_name      <chr> \"overall\", \"age_group &&& sex\", \"age_group &&& sex\", … #> $ strata_level     <chr> \"overall\", \"<40 &&& Male\", \">=40 &&& Male\", \"<40 &&& … #> $ variable_name    <chr> \"number subjects\", \"number subjects\", \"number subject… #> $ variable_level   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ estimate_name    <chr> \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\"… #> $ estimate_type    <chr> \"character\", \"character\", \"character\", \"character\", \"… #> $ estimate_value   <chr> \"807,501\", \"8,343,330\", \"6,007,609\", \"1,572,084\", \"73… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"…"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/formatFunctions.html","id":"formatheader","dir":"Articles","previous_headings":"Formatting functions in a pipeline","what":"3. formatHeader()","title":"format functions","text":"function helps create nice header flextable gt table. instance, instead column specifying group name level, might one header. Header keys: 3 different types headers, identified keys “header”, “header_name”, “header_level”. header: Header labels passed header part input table (columns names values). header_name: Header labels come column names input table. header_level: Header labels come values selected columns input table. instance, might want pivot “group_level” upper header called “Names cohorts”. proceed follows: label keys can removed includeHeaderKey set FALSE. However, keys header allow style separately different header types next step (fxTable gtTable). wish remove header pointing column name (group_level), can set includeHeaderName FALSE. Continuing example, want pivot strata (name level), , want column names (, strata_name strata_level) appear header: Notice, substitute keyWord “&&&” “”, get nice header.","code":"mock_sr |>   formatHeader(     header = c(\"Names of the cohorts\", \"group_level\"),     delim = \"\\n\",     includeHeaderName = TRUE,     includeHeaderKey = TRUE   ) |>   glimpse() #> Rows: 36 #> Columns: 13 #> $ result_id                                                                       <int> … #> $ cdm_name                                                                        <chr> … #> $ group_name                                                                      <chr> … #> $ strata_name                                                                     <chr> … #> $ strata_level                                                                    <chr> … #> $ variable_name                                                                   <chr> … #> $ variable_level                                                                  <chr> … #> $ estimate_name                                                                   <chr> … #> $ estimate_type                                                                   <chr> … #> $ additional_name                                                                 <chr> … #> $ additional_level                                                                <chr> … #> $ `[header]Names of the cohorts\\n[header_name]group_level\\n[header_level]cohort1` <chr> … #> $ `[header]Names of the cohorts\\n[header_name]group_level\\n[header_level]cohort2` <chr> … mock_sr <- mock_sr |>   mutate(across(c(\"strata_name\", \"strata_level\"), ~ gsub(\"&&&\", \"and\", .x))) |>   formatHeader(     header = c(\"Stratifications\", \"strata_name\", \"strata_level\"),     delim = \"\\n\",     includeHeaderName = FALSE,     includeHeaderKey = TRUE   )   mock_sr |> glimpse() #> Rows: 8 #> Columns: 19 #> $ result_id                                                                                 <int> … #> $ cdm_name                                                                                  <chr> … #> $ group_name                                                                                <chr> … #> $ group_level                                                                               <chr> … #> $ variable_name                                                                             <chr> … #> $ variable_level                                                                            <chr> … #> $ estimate_name                                                                             <chr> … #> $ estimate_type                                                                             <chr> … #> $ additional_name                                                                           <chr> … #> $ additional_level                                                                          <chr> … #> $ `[header]Stratifications\\n[header_level]overall\\n[header_level]overall`                   <chr> … #> $ `[header]Stratifications\\n[header_level]age_group and sex\\n[header_level]<40 and Male`    <chr> … #> $ `[header]Stratifications\\n[header_level]age_group and sex\\n[header_level]>=40 and Male`   <chr> … #> $ `[header]Stratifications\\n[header_level]age_group and sex\\n[header_level]<40 and Female`  <chr> … #> $ `[header]Stratifications\\n[header_level]age_group and sex\\n[header_level]>=40 and Female` <chr> … #> $ `[header]Stratifications\\n[header_level]sex\\n[header_level]Male`                          <chr> … #> $ `[header]Stratifications\\n[header_level]sex\\n[header_level]Female`                        <chr> … #> $ `[header]Stratifications\\n[header_level]age_group\\n[header_level]<40`                     <chr> … #> $ `[header]Stratifications\\n[header_level]age_group\\n[header_level]>=40`                    <chr> …"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/formatFunctions.html","id":"gttable-and-fxtable","dir":"Articles","previous_headings":"Formatting functions in a pipeline","what":"4. gtTable() and fxTable()","title":"format functions","text":"Finally, functions gtTable fxTable transform tibble gt flextable object respectively. functions provide several tools personalise formatted table.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/formatFunctions.html","id":"gttable","dir":"Articles","previous_headings":"Formatting functions in a pipeline > 4. gtTable() and fxTable()","what":"gtTable()","title":"format functions","text":"Let’s start manipulating dataframe columns want display, use gtTable default values: Now, want group results “cohort_name”. specifically want row name cohort results cohort, cohort1 comes cohort2. Additionally, want merge rows contain information columns. get table use gtTable follows: might also want modify default style table. instance, might want highlight cohort_name labels blue background, body text red, use combination orange yellow header. can style argument:","code":"# first we select the columns we want: mock_sr <- mock_sr |>   splitGroup() |>   select(!all_of(c(     \"cdm_name\", \"estimate_type\", \"result_id\",\"additional_name\",      \"additional_level\"   )))  mock_sr |>  gtTable() mock_sr |>     gtTable(     groupNameCol = \"cohort_name\",     groupNameAsColumn = FALSE,     groupOrder = c(\"cohort1\", \"cohort2\"),     colsToMergeRows = \"all_columns\"   ) mock_sr |>     gtTable(     style = list(       \"header\" = list(gt::cell_text(weight = \"bold\"),                        gt::cell_fill(color = \"orange\")),       \"header_level\" = list(gt::cell_text(weight = \"bold\"),                        gt::cell_fill(color = \"yellow\")),       \"column_name\" = gt::cell_text(weight = \"bold\"),       \"group_label\" = list(gt::cell_fill(color = \"blue\"),                            gt::cell_text(color = \"white\", weight = \"bold\")),       \"body\" = gt::cell_text(color = \"red\")     ),     groupNameCol = \"cohort_name\",     groupNameAsColumn = FALSE,     groupOrder = c(\"cohort1\", \"cohort2\"),     colsToMergeRows = \"all_columns\"   )"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/formatFunctions.html","id":"fxtable","dir":"Articles","previous_headings":"Formatting functions in a pipeline > 4. gtTable() and fxTable()","what":"fxTable()","title":"format functions","text":"obtain similar result flextable object, can use fxTable arguments , however, style must adapted use officer package since accepted flextable. cohort_name variable_name variable_level estimate_name Stratifications overall age_group sex sex age_group overall <40 Male >=40 Male <40 Female >=40 Female Male Female <40 >=40 cohort1 number subjects - N 807,501 8,343,330 6,007,609 1,572,084 73,994 4,663,935 4,977,774 2,897,672 7,328,820 cohort2 number subjects - N 7,725,215 8,746,007 1,749,406 342,413 3,203,857 4,023,282 1,956,698 4,035,381 636,615 cohort1 age - Mean (SD) 38.87 (7.06) 97.55 (9.49) 28.99 (1.80) 67.84 (2.17) 73.53 (6.80) 19.60 (4.99) 98.05 (6.42) 74.15 (6.60) 5.14 (0.96) cohort2 age - Mean (SD) 53.02 (7.66) 69.58 (7.70) 68.86 (9.91) 3.12 (9.71) 22.56 (3.89) 30.08 (4.61) 63.65 (3.15) 47.90 (1.75) 43.22 (5.32) cohort1 Medications Amoxiciline N (%) 49,364 (2.8%) 77,931 (46.6%) 20,418 (39.0%) 71,340 (2.0%) 6,522 (37.7%) 35,421 (56.0%) 82,520 (85.7%) 27,382 (38.5%) 57,004 (52.8%) cohort2 Medications Amoxiciline N (%) 33,572 (60.1%) 59,626 (26.1%) 19,152 (29.0%) 94,776 (48.0%) 54,248 (92.0%) 54,460 (40.1%) 27,860 (21.3%) 44,670 (67.2%) 37,151 (5.9%) cohort1 Medications Ibuprofen N (%) 99,707 (51.2%) 14,904 (83.6%) 51,856 (70.9%) 84,612 (87.4%) 71,827 (1.1%) 24,131 (88.8%) 54,704 (99.6%) 83,480 (50.0%) 2,796 (35.9%) cohort2 Medications Ibuprofen N (%) 46,938 (77.5%) 80,568 (58.4%) 81,405 (63.4%) 40,391 (85.9%) 21,843 (56.7%) 41,836 (25.3%) 66,887 (91.9%) 50,765 (86.7%) 66,036 (24.9%)","code":"mock_sr |>     fxTable(     style = list(       \"header\" = list(         \"cell\" = officer::fp_cell(background.color = \"orange\"),         \"text\" = officer::fp_text(bold = TRUE)),       \"header_level\" = list(         \"cell\" = officer::fp_cell(background.color = \"yellow\"),         \"text\" = officer::fp_text(bold = TRUE)),       \"column_name\" = list(\"text\" = officer::fp_text(bold = TRUE)),       \"group_label\" = list(         \"cell\" = officer::fp_cell(background.color = \"blue\"),         \"text\" = officer::fp_text(bold = TRUE, color = \"white\")),       \"body\" = list(\"text\" = officer::fp_text(color = \"red\"))     ),     groupNameCol = \"cohort_name\",     groupNameAsColumn = FALSE,     groupOrder = c(\"cohort1\", \"cohort2\"),     colsToMergeRows = \"all_columns\"   )"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/formatFunctions.html","id":"visomoptable-all-at-once","dir":"Articles","previous_headings":"","what":"visOmopTable(): all at once","title":"format functions","text":"function wraps tools seen far format summarised result . convenient one function, level table manipulation allowed less pipeline. First, create new mock summarised result: instance, want flextable strata header, write “strata” header instead strata_name strata_level. , can input header keys (e.g. “Stratifications” example ). split argument points name-level columns split (group, strata /additional). Refer vignette split unite information functionality. default, returns gt table, can changed “flextable” “tibble” type argument. groupColumn can used create groups table body. instance, looking previous table, might want group cohort name: Additional options can specified .options argument. options taken format functions gt/fx table functions seen . see list allowed arguments default values use optionsVisOmopTable():","code":"mock_sr2 <- mockSummarisedResult() mock_sr2 |> visOmopTable(   formatEstimateName = c(\"N%\" = \"<count> (<percentage>)\",                          \"N\" = \"<count>\",                          \"Mean (SD)\" = \"<mean> (<sd>)\"),   header = c(\"Stratifications\", \"strata\"),   split = c(\"group\",\"additional\") ) mock_sr2 |> visOmopTable(   formatEstimateName = c(\"N%\" = \"<count> (<percentage>)\",                          \"N\" = \"<count>\",                          \"Mean (SD)\" = \"<mean> (<sd>)\"),   header = c(\"Stratifications\", \"strata\"),   split = c(\"group\",\"additional\"),   groupColumn = \"cohort_name\" ) optionsVisOmopTable() #> $decimals #>    integer percentage    numeric proportion  #>          0          2          2          2  #>  #> $decimalMark #> [1] \".\" #>  #> $bigMark #> [1] \",\" #>  #> $keepNotFormatted #> [1] TRUE #>  #> $useFormatOrder #> [1] TRUE #>  #> $delim #> [1] \"\\n\" #>  #> $includeHeaderKey #> [1] TRUE #>  #> $style #> [1] \"default\" #>  #> $na #> [1] \"-\" #>  #> $title #> NULL #>  #> $subtitle #> NULL #>  #> $caption #> NULL #>  #> $groupAsColumn #> [1] FALSE #>  #> $groupOrder #> NULL #>  #> $colsToMergeRows #> [1] \"all_columns\""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/splitAndUnite.html","id":"summarised_result","dir":"Articles","previous_headings":"","what":"summarised_result","title":"split and unite functions","text":"First, let’s load relevant libraries generate mock summarised_result object use following examples. summarised_result contains 3 types name-level paired columns targeted set unite split functions. group columns typically can contain information cohorts, strata columns data stratification group, finally additional columns include information covered group strata.","code":"library(visOmopResults) library(dplyr) mock_sr <- mockSummarisedResult() mock_sr |> glimpse() #> Rows: 126 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ cdm_name         <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock… #> $ group_name       <chr> \"cohort_name\", \"cohort_name\", \"cohort_name\", \"cohort_… #> $ group_level      <chr> \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\"… #> $ strata_name      <chr> \"overall\", \"age_group &&& sex\", \"age_group &&& sex\", … #> $ strata_level     <chr> \"overall\", \"<40 &&& Male\", \">=40 &&& Male\", \"<40 &&& … #> $ variable_name    <chr> \"number subjects\", \"number subjects\", \"number subject… #> $ variable_level   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ estimate_name    <chr> \"count\", \"count\", \"count\", \"count\", \"count\", \"count\",… #> $ estimate_type    <chr> \"integer\", \"integer\", \"integer\", \"integer\", \"integer\"… #> $ estimate_value   <chr> \"807501\", \"8343330\", \"6007609\", \"1572084\", \"73994\", \"… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"…"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/splitAndUnite.html","id":"split-functions","dir":"Articles","previous_headings":"","what":"Split functions","title":"split and unite functions","text":"idea split functions pivot “name” (e.g. group_name) column split value column column dataframe, values taken “level” (e.g. group_level) column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/splitAndUnite.html","id":"splitgroup-splitstrata-and-splitadditional","dir":"Articles","previous_headings":"Split functions","what":"splitGroup(), splitStrata(), and splitAdditional()","title":"split and unite functions","text":"instance, splitGroup function target group_name-group_level columns seen . Similar splitStrata, functions splitGroup split group_name group_level columns, splitAdditional split additional name-level pair. Finally, function splitAll split group, strata, additional . Note using splitStrata summarised_result object, longer strata_name-strata_level pair, instead two new columns corresponding stratifications, age_group sex.","code":"mock_sr |> splitGroup() |> glimpse() #> Rows: 126 #> Columns: 12 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ cdm_name         <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock… #> $ cohort_name      <chr> \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\"… #> $ strata_name      <chr> \"overall\", \"age_group &&& sex\", \"age_group &&& sex\", … #> $ strata_level     <chr> \"overall\", \"<40 &&& Male\", \">=40 &&& Male\", \"<40 &&& … #> $ variable_name    <chr> \"number subjects\", \"number subjects\", \"number subject… #> $ variable_level   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ estimate_name    <chr> \"count\", \"count\", \"count\", \"count\", \"count\", \"count\",… #> $ estimate_type    <chr> \"integer\", \"integer\", \"integer\", \"integer\", \"integer\"… #> $ estimate_value   <chr> \"807501\", \"8343330\", \"6007609\", \"1572084\", \"73994\", \"… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… mock_sr |> splitStrata() |> glimpse() #> Rows: 126 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ cdm_name         <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock… #> $ group_name       <chr> \"cohort_name\", \"cohort_name\", \"cohort_name\", \"cohort_… #> $ group_level      <chr> \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\"… #> $ age_group        <chr> \"overall\", \"<40\", \">=40\", \"<40\", \">=40\", \"overall\", \"… #> $ sex              <chr> \"overall\", \"Male\", \"Male\", \"Female\", \"Female\", \"Male\"… #> $ variable_name    <chr> \"number subjects\", \"number subjects\", \"number subject… #> $ variable_level   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ estimate_name    <chr> \"count\", \"count\", \"count\", \"count\", \"count\", \"count\",… #> $ estimate_type    <chr> \"integer\", \"integer\", \"integer\", \"integer\", \"integer\"… #> $ estimate_value   <chr> \"807501\", \"8343330\", \"6007609\", \"1572084\", \"73994\", \"… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… mock_sr |> splitAdditional() |> glimpse() #> Rows: 126 #> Columns: 11 #> $ result_id      <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… #> $ cdm_name       <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\",… #> $ group_name     <chr> \"cohort_name\", \"cohort_name\", \"cohort_name\", \"cohort_na… #> $ group_level    <chr> \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", … #> $ strata_name    <chr> \"overall\", \"age_group &&& sex\", \"age_group &&& sex\", \"a… #> $ strata_level   <chr> \"overall\", \"<40 &&& Male\", \">=40 &&& Male\", \"<40 &&& Fe… #> $ variable_name  <chr> \"number subjects\", \"number subjects\", \"number subjects\"… #> $ variable_level <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ estimate_name  <chr> \"count\", \"count\", \"count\", \"count\", \"count\", \"count\", \"… #> $ estimate_type  <chr> \"integer\", \"integer\", \"integer\", \"integer\", \"integer\", … #> $ estimate_value <chr> \"807501\", \"8343330\", \"6007609\", \"1572084\", \"73994\", \"46… mock_sr |> splitAll() |> glimpse() #> Rows: 126 #> Columns: 10 #> $ result_id      <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… #> $ cdm_name       <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\",… #> $ cohort_name    <chr> \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", … #> $ age_group      <chr> \"overall\", \"<40\", \">=40\", \"<40\", \">=40\", \"overall\", \"ov… #> $ sex            <chr> \"overall\", \"Male\", \"Male\", \"Female\", \"Female\", \"Male\", … #> $ variable_name  <chr> \"number subjects\", \"number subjects\", \"number subjects\"… #> $ variable_level <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ estimate_name  <chr> \"count\", \"count\", \"count\", \"count\", \"count\", \"count\", \"… #> $ estimate_type  <chr> \"integer\", \"integer\", \"integer\", \"integer\", \"integer\", … #> $ estimate_value <chr> \"807501\", \"8343330\", \"6007609\", \"1572084\", \"73994\", \"46…"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/splitAndUnite.html","id":"keyword","dir":"Articles","previous_headings":"Split functions > splitGroup(), splitStrata(), and splitAdditional()","what":"!! Keyword: &&&","title":"split and unite functions","text":"Looking results , observe splitting done values “name” column, also among values containing key word “&&&”. , “sex &&& age_group” splitted sex age_group columns, instead generating column called “sex &&& age_group”.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/splitAndUnite.html","id":"splitnamelevel","dir":"Articles","previous_headings":"Split functions","what":"splitNameLevel()","title":"split and unite functions","text":"function splitNameLevel provides tailored splitting dataframe. function can take dataframe restrictions naming name-level pair columns, since can specified name level arguments. instance let’s use following table: function splitNameLevel, additionally argument overall previously seen, argument keep set whether want keep columns splitting.","code":"data_to_split <- tibble(   denominator = \"general_population\",   outcome = \"stroke\",   input_arguments = c(\"wash_out &&& previous_observation\"),   input_arguments_values = c(\"60 &&& 180\") ) data_to_split  #> # A tibble: 1 × 4 #>   denominator        outcome input_arguments              input_arguments_values #>   <chr>              <chr>   <chr>                        <chr>                  #> 1 general_population stroke  wash_out &&& previous_obser… 60 &&& 180 data_to_split |>   splitNameLevel(     name = \"input_arguments\",     level = \"input_arguments_values\"   ) #> # A tibble: 1 × 4 #>   denominator        outcome wash_out previous_observation #>   <chr>              <chr>   <chr>    <chr>                #> 1 general_population stroke  60       180"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/splitAndUnite.html","id":"unite-functions","dir":"Articles","previous_headings":"","what":"Unite functions","title":"split and unite functions","text":"unite functions complementary split ones. meant generate name-level pair columns targeted columns within dataframe.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/splitAndUnite.html","id":"unitegroup-unitestrata-and-uniteadditional","dir":"Articles","previous_headings":"Unite functions","what":"uniteGroup(), uniteStrata(), and uniteAdditional()","title":"split and unite functions","text":"work summarised_result objects, uniteGroup, uniteStrata, uniteAdditional functions generate group, strata, additional name-level columns respectively given set columns. instance, following example want create group_name group_level columns: part columns unite argument (cols), argument ignore, default: ignore = c(NA, \"overall\"). means , levels within ignore ignored. example case ignore obtain NA output: default (ignore = c(NA, \"overall\")) obtain output names levels non-NA values returned, rows values NA uses “overall”.","code":"to_unite_group <- tibble(   denominator_cohort_name = c(\"general_population\", \"older_than_60\", \"younger_than_60\"),   outcome_cohort_name = c(\"stroke\", \"stroke\", \"stroke\") )  to_unite_group |>   uniteGroup(cols = c(\"denominator_cohort_name\", \"outcome_cohort_name\")) #> # A tibble: 3 × 2 #>   group_name                                      group_level                   #>   <chr>                                           <chr>                         #> 1 denominator_cohort_name &&& outcome_cohort_name general_population &&& stroke #> 2 denominator_cohort_name &&& outcome_cohort_name older_than_60 &&& stroke      #> 3 denominator_cohort_name &&& outcome_cohort_name younger_than_60 &&& stroke to_unite_strata <- tibble(     age = c(NA, \">40\", \"<=40\", NA, NA, NA, NA, NA, \">40\", \"<=40\"),     sex = c(NA, NA, NA, \"F\", \"M\", NA, NA, NA, \"F\", \"M\"),     region = c(NA, NA, NA, NA, NA, \"North\", \"South\", \"Center\", NA, NA)   )  to_unite_strata |>   uniteStrata(cols = c(\"age\", \"sex\", \"region\"),               ignore = character()) #> # A tibble: 10 × 2 #>    strata_name            strata_level         #>    <chr>                  <chr>                #>  1 age &&& sex &&& region NA &&& NA &&& NA     #>  2 age &&& sex &&& region >40 &&& NA &&& NA    #>  3 age &&& sex &&& region <=40 &&& NA &&& NA   #>  4 age &&& sex &&& region NA &&& F &&& NA      #>  5 age &&& sex &&& region NA &&& M &&& NA      #>  6 age &&& sex &&& region NA &&& NA &&& North  #>  7 age &&& sex &&& region NA &&& NA &&& South  #>  8 age &&& sex &&& region NA &&& NA &&& Center #>  9 age &&& sex &&& region >40 &&& F &&& NA     #> 10 age &&& sex &&& region <=40 &&& M &&& NA to_unite_strata |>   uniteStrata(cols = c(\"age\", \"sex\", \"region\")) #> # A tibble: 10 × 2 #>    strata_name strata_level #>    <chr>       <chr>        #>  1 overall     overall      #>  2 age         >40          #>  3 age         <=40         #>  4 sex         F            #>  5 sex         M            #>  6 region      North        #>  7 region      South        #>  8 region      Center       #>  9 age &&& sex >40 &&& F    #> 10 age &&& sex <=40 &&& M"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/splitAndUnite.html","id":"unitenamelevel","dir":"Articles","previous_headings":"Unite functions","what":"uniteNameLevel()","title":"split and unite functions","text":"Lastly, function uniteNameLevel, idem splitNameLevel, provides flexibility name-level column naming, addition keep argument (FALSE default) choose whether keep targeted columns. instance, repeat previous example keep set TRUE obtain following output:","code":"to_unite_strata |>   uniteNameLevel(cols = c(\"age\", \"sex\", \"region\"),                  name = \"name\",                  level = \"level\",                  keep = TRUE) #> # A tibble: 10 × 5 #>    age   sex   region name        level      #>    <chr> <chr> <chr>  <chr>       <chr>      #>  1 NA    NA    NA     overall     overall    #>  2 >40   NA    NA     age         >40        #>  3 <=40  NA    NA     age         <=40       #>  4 NA    F     NA     sex         F          #>  5 NA    M     NA     sex         M          #>  6 NA    NA    North  region      North      #>  7 NA    NA    South  region      South      #>  8 NA    NA    Center region      Center     #>  9 >40   F     NA     age &&& sex >40 &&& F  #> 10 <=40  M     NA     age &&& sex <=40 &&& M"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tidy.html","id":"estimates","dir":"Articles","previous_headings":"","what":"Estimates","title":"tidy","text":"First, let’s load relevant libraries create mock summarised result table. function pivotEstimates adds columns containing estimates values combination columns pivotEstimatesBy. instance, following example use columns variable_name, variable_level, estimate_name pivot estimates. argument nameStyle customise names new columns. uses glue package syntax. instance:","code":"library(visOmopResults) library(dplyr) result <- mockSummarisedResult() result |> glimpse() #> Rows: 126 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ cdm_name         <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock… #> $ group_name       <chr> \"cohort_name\", \"cohort_name\", \"cohort_name\", \"cohort_… #> $ group_level      <chr> \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\"… #> $ strata_name      <chr> \"overall\", \"age_group &&& sex\", \"age_group &&& sex\", … #> $ strata_level     <chr> \"overall\", \"<40 &&& Male\", \">=40 &&& Male\", \"<40 &&& … #> $ variable_name    <chr> \"number subjects\", \"number subjects\", \"number subject… #> $ variable_level   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ estimate_name    <chr> \"count\", \"count\", \"count\", \"count\", \"count\", \"count\",… #> $ estimate_type    <chr> \"integer\", \"integer\", \"integer\", \"integer\", \"integer\"… #> $ estimate_value   <chr> \"807501\", \"8343330\", \"6007609\", \"1572084\", \"73994\", \"… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… result |>    pivotEstimates(pivotEstimatesBy = c(\"variable_name\", \"variable_level\", \"estimate_name\")) |>   glimpse() #> Rows: 18 #> Columns: 15 #> $ result_id                          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ cdm_name                           <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mo… #> $ group_name                         <chr> \"cohort_name\", \"cohort_name\", \"coho… #> $ group_level                        <chr> \"cohort1\", \"cohort1\", \"cohort1\", \"c… #> $ strata_name                        <chr> \"overall\", \"age_group &&& sex\", \"ag… #> $ strata_level                       <chr> \"overall\", \"<40 &&& Male\", \">=40 &&… #> $ additional_name                    <chr> \"overall\", \"overall\", \"overall\", \"o… #> $ additional_level                   <chr> \"overall\", \"overall\", \"overall\", \"o… #> $ `number subjects_count`            <int> 807501, 8343330, 6007609, 1572084, … #> $ age_mean                           <dbl> 38.870131, 97.554784, 28.989230, 67… #> $ age_sd                             <dbl> 7.0643384, 9.4857658, 1.8033877, 2.… #> $ Medications_Amoxiciline_count      <int> 49364, 77931, 20418, 71340, 6522, 3… #> $ Medications_Amoxiciline_percentage <dbl> 2.806097, 46.598719, 39.003139, 2.0… #> $ Medications_Ibuprofen_count        <int> 99707, 14904, 51856, 84612, 71827, … #> $ Medications_Ibuprofen_percentage   <dbl> 51.179131, 83.555244, 70.878116, 87… result |>    pivotEstimates(pivotEstimatesBy = \"estimate_name\",                  nameStyle = \"{toupper(estimate_name)}\") |>   glimpse() #> Rows: 72 #> Columns: 14 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ cdm_name         <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock… #> $ group_name       <chr> \"cohort_name\", \"cohort_name\", \"cohort_name\", \"cohort_… #> $ group_level      <chr> \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\"… #> $ strata_name      <chr> \"overall\", \"age_group &&& sex\", \"age_group &&& sex\", … #> $ strata_level     <chr> \"overall\", \"<40 &&& Male\", \">=40 &&& Male\", \"<40 &&& … #> $ variable_name    <chr> \"number subjects\", \"number subjects\", \"number subject… #> $ variable_level   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ COUNT            <int> 807501, 8343330, 6007609, 1572084, 73994, 4663935, 49… #> $ MEAN             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ SD               <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ PERCENTAGE       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tidy.html","id":"settings","dir":"Articles","previous_headings":"","what":"Settings","title":"tidy","text":"function addSettings adds new column settings summarised result, :","code":"mockSummarisedResult() |>   addSettings() |>   glimpse() #> Rows: 126 #> Columns: 16 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ cdm_name         <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock… #> $ group_name       <chr> \"cohort_name\", \"cohort_name\", \"cohort_name\", \"cohort_… #> $ group_level      <chr> \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\"… #> $ strata_name      <chr> \"overall\", \"age_group &&& sex\", \"age_group &&& sex\", … #> $ strata_level     <chr> \"overall\", \"<40 &&& Male\", \">=40 &&& Male\", \"<40 &&& … #> $ variable_name    <chr> \"number subjects\", \"number subjects\", \"number subject… #> $ variable_level   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ estimate_name    <chr> \"count\", \"count\", \"count\", \"count\", \"count\", \"count\",… #> $ estimate_type    <chr> \"integer\", \"integer\", \"integer\", \"integer\", \"integer\"… #> $ estimate_value   <chr> \"4028812\", \"7696302\", \"1194854\", \"1946950\", \"1645692\"… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ result_type      <chr> \"mock_summarised_result\", \"mock_summarised_result\", \"… #> $ package_name     <chr> \"visOmopResults\", \"visOmopResults\", \"visOmopResults\",… #> $ package_version  <chr> \"0.3.0.900\", \"0.3.0.900\", \"0.3.0.900\", \"0.3.0.900\", \"…"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tidy.html","id":"tidy","dir":"Articles","previous_headings":"","what":"Tidy","title":"tidy","text":"Finally, method tidy incorporates splitting pf name-level columns pivotting estimates settings. default, splits group, strata additional, pivots estimates columns “estimate_name” also pivots settings. column pairs split can customised split arguments, pivotEstimatesBy nameStyle pivotting estimates. pivotEstimatesBy NULL character(), estimates modified. Settings always pivotted present.","code":"result <- mockSummarisedResult()  result |>    tidy() |>    glimpse() #> Rows: 72 #> Columns: 13 #> $ cdm_name        <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\"… #> $ cohort_name     <chr> \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\",… #> $ age_group       <chr> \"overall\", \"<40\", \">=40\", \"<40\", \">=40\", \"overall\", \"o… #> $ sex             <chr> \"overall\", \"Male\", \"Male\", \"Female\", \"Female\", \"Male\",… #> $ variable_name   <chr> \"number subjects\", \"number subjects\", \"number subjects… #> $ variable_level  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ count           <int> 7269489, 6376856, 3964100, 9594826, 2986580, 502012, 5… #> $ mean            <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ sd              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ percentage      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ result_type     <chr> \"mock_summarised_result\", \"mock_summarised_result\", \"m… #> $ package_name    <chr> \"visOmopResults\", \"visOmopResults\", \"visOmopResults\", … #> $ package_version <chr> \"0.3.0.900\", \"0.3.0.900\", \"0.3.0.900\", \"0.3.0.900\", \"0…"},{"path":"https://darwin-eu.github.io/visOmopResults/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marti Catala. Author. Núria Mercadé-Besora. Author, maintainer.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Catala M, Mercadé-Besora N (2024). visOmopResults: Graphs Tables OMOP Results. R package version 0.3.0.900, https://darwin-eu.github.io/visOmopResults/.","code":"@Manual{,   title = {visOmopResults: Graphs and Tables for OMOP Results},   author = {Marti Catala and Núria Mercadé-Besora},   year = {2024},   note = {R package version 0.3.0.900},   url = {https://darwin-eu.github.io/visOmopResults/}, }"},{"path":[]},{"path":"https://darwin-eu.github.io/visOmopResults/index.html","id":"package-overview","dir":"","previous_headings":"","what":"Package overview","title":"Graphs and Tables for OMOP Results","text":"visOmopResults contains functions formatting objects class summarised_result (see R package omopgenerics). package simplifies handling objects obtain nice output tables format gt flextable’ report results via Shiny apps, RMarkdown, Quarto, .","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Graphs and Tables for OMOP Results","text":"can install latest version visOmopResults CRAN: can install development version GitHub :","code":"install.packages(\"visOmopResults\") # install.packages(\"devtools\") devtools::install_github(\"darwin-eu/visOmopResults\")"},{"path":"https://darwin-eu.github.io/visOmopResults/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example usage","title":"Graphs and Tables for OMOP Results","text":"First, load package create summarised result object mock results can use function visOmopTable() get nice gt table:  code snipped showed, specified group display estimates formatEstimateName. Also, created header based stratifications header, split name-level paired columns group additional (refer “split unite functions” vignette information splitting).","code":"library(visOmopResults) result <- mockSummarisedResult() visOmopTable(   result,   formatEstimateName = c(\"N%\" = \"<count> (<percentage>)\",                          \"N\" = \"<count>\",                          \"Mean (SD)\" = \"<mean> (<sd>)\"),   header = c(\"Stratifications\", \"strata\"),   split = c(\"group\",\"additional\") )"},{"path":"https://darwin-eu.github.io/visOmopResults/index.html","id":"custom-formatting---example-usage","dir":"","previous_headings":"","what":"Custom formatting - Example usage","title":"Graphs and Tables for OMOP Results","text":"function visOmopTable() wrapped around functions package. can implemented pipeline additional customisation summarised_result.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/index.html","id":"id_1-formatestimatevalue","dir":"","previous_headings":"Custom formatting - Example usage","what":"1. formatEstimateValue()","title":"Graphs and Tables for OMOP Results","text":"utilize function modify estimate_value column. case, apply default settings function, include using 0 decimals integer values, 2 decimals numeric values, 1 decimal percentages, 3 decimals proportions. Additionally, function sets decimal mark ‘.’, thousand/millions separator ‘,’ default.”","code":"result <- result |>    formatEstimateValue(     decimals = c(integer = 0, numeric = 2, percentage = 1, proportion = 3),     decimalMark = \".\",     bigMark = \",\") result |> dplyr::glimpse() #> Rows: 126 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ cdm_name         <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock… #> $ group_name       <chr> \"cohort_name\", \"cohort_name\", \"cohort_name\", \"cohort_… #> $ group_level      <chr> \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\"… #> $ strata_name      <chr> \"overall\", \"age_group &&& sex\", \"age_group &&& sex\", … #> $ strata_level     <chr> \"overall\", \"<40 &&& Male\", \">=40 &&& Male\", \"<40 &&& … #> $ variable_name    <chr> \"number subjects\", \"number subjects\", \"number subject… #> $ variable_level   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ estimate_name    <chr> \"count\", \"count\", \"count\", \"count\", \"count\", \"count\",… #> $ estimate_type    <chr> \"integer\", \"integer\", \"integer\", \"integer\", \"integer\"… #> $ estimate_value   <chr> \"4,392,319\", \"7,536,112\", \"537,318\", \"3,563,375\", \"4,… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"…"},{"path":"https://darwin-eu.github.io/visOmopResults/index.html","id":"id_2-formatestimatename","dir":"","previous_headings":"Custom formatting - Example usage","what":"2. formatEstimateName()","title":"Graphs and Tables for OMOP Results","text":"function can transform estimate_name estimate_value columns. example, allows consolidate one row counts percentages related variable within group strata. ’s worth noting estimate_name enclosed within <…> estimateNameFormat argument.","code":"result <- result |> formatEstimateName(   estimateNameFormat = c(\"N (%)\" = \"<count> (<percentage>%)\",                          \"N\" = \"<count>\",                          \"Mean (SD)\" = \"<mean> (<sd>)\"),   keepNotFormatted = FALSE) result |> dplyr::glimpse() #> Rows: 72 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ cdm_name         <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock… #> $ group_name       <chr> \"cohort_name\", \"cohort_name\", \"cohort_name\", \"cohort_… #> $ group_level      <chr> \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\"… #> $ strata_name      <chr> \"overall\", \"age_group &&& sex\", \"age_group &&& sex\", … #> $ strata_level     <chr> \"overall\", \"<40 &&& Male\", \">=40 &&& Male\", \"<40 &&& … #> $ variable_name    <chr> \"number subjects\", \"number subjects\", \"number subject… #> $ variable_level   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ estimate_name    <chr> \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\"… #> $ estimate_type    <chr> \"character\", \"character\", \"character\", \"character\", \"… #> $ estimate_value   <chr> \"4,392,319\", \"7,536,112\", \"537,318\", \"3,563,375\", \"4,… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"…"},{"path":"https://darwin-eu.github.io/visOmopResults/index.html","id":"id_3-formatheader","dir":"","previous_headings":"Custom formatting - Example usage","what":"3. formatHeader()","title":"Graphs and Tables for OMOP Results","text":"Next step format table transforming gt object. pivot strata_name strata_level columns strata groups columns header “Study strata”.","code":"result <- result |>   formatHeader(header = c(\"Study strata\", \"strata_name\", \"strata_level\"),                delim = \"\\n\",                 includeHeaderName = FALSE,                includeHeaderKey = TRUE) result |> dplyr::glimpse() #> Rows: 8 #> Columns: 19 #> $ result_id                                                                              <int> … #> $ cdm_name                                                                               <chr> … #> $ group_name                                                                             <chr> … #> $ group_level                                                                            <chr> … #> $ variable_name                                                                          <chr> … #> $ variable_level                                                                         <chr> … #> $ estimate_name                                                                          <chr> … #> $ estimate_type                                                                          <chr> … #> $ additional_name                                                                        <chr> … #> $ additional_level                                                                       <chr> … #> $ `[header]Study strata\\n[header_level]overall\\n[header_level]overall`                   <chr> … #> $ `[header]Study strata\\n[header_level]age_group &&& sex\\n[header_level]<40 &&& Male`    <chr> … #> $ `[header]Study strata\\n[header_level]age_group &&& sex\\n[header_level]>=40 &&& Male`   <chr> … #> $ `[header]Study strata\\n[header_level]age_group &&& sex\\n[header_level]<40 &&& Female`  <chr> … #> $ `[header]Study strata\\n[header_level]age_group &&& sex\\n[header_level]>=40 &&& Female` <chr> … #> $ `[header]Study strata\\n[header_level]sex\\n[header_level]Male`                          <chr> … #> $ `[header]Study strata\\n[header_level]sex\\n[header_level]Female`                        <chr> … #> $ `[header]Study strata\\n[header_level]age_group\\n[header_level]<40`                     <chr> … #> $ `[header]Study strata\\n[header_level]age_group\\n[header_level]>=40`                    <chr> …"},{"path":"https://darwin-eu.github.io/visOmopResults/index.html","id":"id_4-gttable","dir":"","previous_headings":"Custom formatting - Example usage","what":"4. gtTable()","title":"Graphs and Tables for OMOP Results","text":"Finally, convert transformed summarised_result object steps 1, 2, 3, nice gt object. use default visOmopResults style. Additionally, separate data groups specified group_level column differentiate cohort1 cohort2.  important notice visOmopTable additional arguments customise output table similar manner pipeline. See vignette “format functions”.","code":"gtResult <- result |>   dplyr::select(-c(\"result_type\", \"package_name\", \"package_version\",                     \"group_name\", \"additional_name\", \"additional_level\",                    \"estimate_type\", \"result_id\")) |>   gtTable(     delim = \"\\n\",     style = \"default\",     na = \"-\",     title = \"My first gt table with visOmopResults!\",     groupColumn = \"group_level\",     groupAsColumn = FALSE,     groupOrder = c(\"cohort1\", \"cohort2\"),     colsToMergeRows = \"all_columns\"     ) gtResult"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/addSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"Add settings columns to a summaries_result object. — addSettings","title":"Add settings columns to a summaries_result object. — addSettings","text":"Add settings columns summaries_result object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/addSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add settings columns to a summaries_result object. — addSettings","text":"","code":"addSettings(   result,   settingsColumns = colnames(settings(result)),   columns = lifecycle::deprecated() )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/addSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add settings columns to a summaries_result object. — addSettings","text":"result summarised_result object. settingsColumns Settings added columns, default settings added. NULL empty character vector, settings added. columns","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/addSettings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add settings columns to a summaries_result object. — addSettings","text":"summarised_result object added setting columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/additionalColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify additional columns in an omop result object — additionalColumns","title":"Identify additional columns in an omop result object — additionalColumns","text":"Identifies returns unique values additional_name column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/additionalColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify additional columns in an omop result object — additionalColumns","text":"","code":"additionalColumns(result)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/additionalColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify additional columns in an omop result object — additionalColumns","text":"result summarised_result.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/additionalColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify additional columns in an omop result object — additionalColumns","text":"Unique values additional name column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/additionalColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify additional columns in an omop result object — additionalColumns","text":"","code":"mockSummarisedResult() |>   additionalColumns() #> character(0)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a summarised_result — filterSettings","title":"Filter a summarised_result — filterSettings","text":"Filter summarised_result","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a summarised_result — filterSettings","text":"","code":"filterSettings(result, ...)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a summarised_result — filterSettings","text":"result summarised_result object. ... Expressions return logical value (columns settings used evaluate expression), defined terms variables .data. multiple expressions included, combined & operator. rows conditions evaluate TRUE kept.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterSettings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter a summarised_result — filterSettings","text":"summarised_result object result_id rows fulfill required specified settings.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter a summarised_result — filterSettings","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(omopgenerics) #>  #> Attaching package: ‘omopgenerics’ #> The following object is masked from ‘package:stats’: #>  #>     filter  x <- tibble(   \"result_id\" = as.integer(c(1, 2)),   \"cdm_name\" = c(\"cprd\", \"eunomia\"),   \"group_name\" = \"sex\",   \"group_level\" = \"male\",   \"strata_name\" = \"sex\",   \"strata_level\" = \"male\",   \"variable_name\" = \"Age group\",   \"variable_level\" = \"10 to 50\",   \"estimate_name\" = \"count\",   \"estimate_type\" = \"numeric\",   \"estimate_value\" = \"5\",   \"additional_name\" = \"overall\",   \"additional_level\" = \"overall\" ) |>   newSummarisedResult(settings = tibble(     \"result_id\" = c(1, 2), \"custom\" = c(\"A\", \"B\")   ))  x #> # A tibble: 2 × 13 #>   result_id cdm_name group_name group_level strata_name strata_level #>       <int> <chr>    <chr>      <chr>       <chr>       <chr>        #> 1         1 cprd     sex        male        sex         male         #> 2         2 eunomia  sex        male        sex         male         #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>  x |> filterSettings(custom == \"A\") #> # A tibble: 1 × 13 #>   result_id cdm_name group_name group_level strata_name strata_level #>       <int> <chr>    <chr>      <chr>       <chr>       <chr>        #> 1         1 cprd     sex        male        sex         male         #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateName.html","id":null,"dir":"Reference","previous_headings":"","what":"Formats estimate_name and estimate_value column — formatEstimateName","title":"Formats estimate_name and estimate_value column — formatEstimateName","text":"Formats estimate_name estimate_value columns changing name estimate name /joining different estimates together single row.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formats estimate_name and estimate_value column — formatEstimateName","text":"","code":"formatEstimateName(   result,   estimateNameFormat = NULL,   keepNotFormatted = TRUE,   useFormatOrder = TRUE )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formats estimate_name and estimate_value column — formatEstimateName","text":"result summarised_result. estimateNameFormat Named list estimate name's join, sorted computation order. Indicate estimate_name's <...>. keepNotFormatted Whether keep rows formatted. useFormatOrder Whether use order estimate names appear estimateNameFormat (TRUE), use order input dataframe (FALSE).","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formats estimate_name and estimate_value column — formatEstimateName","text":"summarised_result object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formats estimate_name and estimate_value column — formatEstimateName","text":"","code":"result <- mockSummarisedResult() result |>   formatEstimateName(     estimateNameFormat = c(       \"N (%)\" = \"<count> (<percentage>%)\", \"N\" = \"<count>\"     ),     keepNotFormatted = FALSE   ) #> # A tibble: 54 × 13 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 44 more rows #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateValue.html","id":null,"dir":"Reference","previous_headings":"","what":"Formats the estimate_value column — formatEstimateValue","title":"Formats the estimate_value column — formatEstimateValue","text":"Formats estimate_value column summarised_result object editing number decimals, decimal thousand/millions separator marks.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateValue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formats the estimate_value column — formatEstimateValue","text":"","code":"formatEstimateValue(   result,   decimals = c(integer = 0, numeric = 2, percentage = 1, proportion = 3),   decimalMark = \".\",   bigMark = \",\" )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateValue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formats the estimate_value column — formatEstimateValue","text":"result summarised_result. decimals Number decimals per estimate type (integer, numeric, percentage, proportion), estimate name, estimate values (introduce number decimals). decimalMark Decimal separator mark. bigMark Thousand millions separator mark.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateValue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formats the estimate_value column — formatEstimateValue","text":"summarised_result.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateValue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formats the estimate_value column — formatEstimateValue","text":"","code":"result <- mockSummarisedResult()  result |> formatEstimateValue(decimals = 1) #> # A tibble: 126 × 13 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 116 more rows #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>  result |> formatEstimateValue(decimals = c(integer = 0, numeric = 1)) #> # A tibble: 126 × 13 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 116 more rows #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>  result |>   formatEstimateValue(decimals = c(numeric = 1, count = 0)) #> # A tibble: 126 × 13 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 116 more rows #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatHeader.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a header for gt and flextable objects. — formatHeader","title":"Create a header for gt and flextable objects. — formatHeader","text":"Pivots summarised_result object based column names header, generating specific column names subsequent header formatting gtTable fxTable functions.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatHeader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a header for gt and flextable objects. — formatHeader","text":"","code":"formatHeader(   result,   header,   delim = \"\\n\",   includeHeaderName = TRUE,   includeHeaderKey = TRUE )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatHeader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a header for gt and flextable objects. — formatHeader","text":"result summarised_result. header Names variables make headers. delim Delimiter use separate headers. includeHeaderName Whether include column name header. includeHeaderKey Whether include header key (header, header_name, header_level) header type column names.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatHeader.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a header for gt and flextable objects. — formatHeader","text":"tibble rows pivotted columns key names subsequent header formatting.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatHeader.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a header for gt and flextable objects. — formatHeader","text":"","code":"result <- mockSummarisedResult()  result |>   formatHeader(     header = c(       \"Study cohorts\", \"group_level\", \"Study strata\", \"strata_name\",       \"strata_level\"     ),     includeHeaderName = FALSE   ) #> # A tibble: 7 × 27 #>   result_id cdm_name group_name  variable_name   variable_level estimate_name #>       <int> <chr>    <chr>       <chr>           <chr>          <chr>         #> 1         1 mock     cohort_name number subjects NA             count         #> 2         1 mock     cohort_name age             NA             mean          #> 3         1 mock     cohort_name age             NA             sd            #> 4         1 mock     cohort_name Medications     Amoxiciline    count         #> 5         1 mock     cohort_name Medications     Amoxiciline    percentage    #> 6         1 mock     cohort_name Medications     Ibuprofen      count         #> 7         1 mock     cohort_name Medications     Ibuprofen      percentage    #> # ℹ 21 more variables: estimate_type <chr>, additional_name <chr>, #> #   additional_level <chr>, #> #   `[header]Study cohorts\\n[header_level]cohort1\\n[header]Study strata\\n[header_level]overall\\n[header_level]overall` <chr>, #> #   `[header]Study cohorts\\n[header_level]cohort1\\n[header]Study strata\\n[header_level]age_group &&& sex\\n[header_level]<40 &&& Male` <chr>, #> #   `[header]Study cohorts\\n[header_level]cohort1\\n[header]Study strata\\n[header_level]age_group &&& sex\\n[header_level]>=40 &&& Male` <chr>, #> #   `[header]Study cohorts\\n[header_level]cohort1\\n[header]Study strata\\n[header_level]age_group &&& sex\\n[header_level]<40 &&& Female` <chr>, #> #   `[header]Study cohorts\\n[header_level]cohort1\\n[header]Study strata\\n[header_level]age_group &&& sex\\n[header_level]>=40 &&& Female` <chr>, …"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a summarised_result object into a gt, flextable or tibble object — formatTable","title":"Format a summarised_result object into a gt, flextable or tibble object — formatTable","text":"formatTable() renamed visOmopTable()","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a summarised_result object into a gt, flextable or tibble object — formatTable","text":"","code":"formatTable(   result,   formatEstimateName,   header,   split,   groupColumn = NULL,   type = \"gt\",   renameColumns = NULL,   minCellCount = lifecycle::deprecated(),   hide = c(\"result_id\", \"estimate_type\"),   .options = list() )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a summarised_result object into a gt, flextable or tibble object — formatTable","text":"result summarised_result. formatEstimateName Named list estimate name's join, sorted computation order. Indicate estimate_name's <...>. header vector containing elements go header order (cdm_name, group, strata, additional, variable, estimate, settings). split vector containing name-level groups split (\"group\", \"strata\", \"additional\"), empty character vector split. groupColumn Columns use group labels. default name new group column names separated \"_\". specify new grouping name enter named list : list(newGroupName = c(\"variable_name\", \"variable_level\")) type Type desired formatted table, possibilities: \"gt\", \"flextable\", \"tibble\". renameColumns Named vector customise column names, instance: c(\"Database name\" = \"cdm_name\")). default column names transformed sentence case. minCellCount Suppression estimates counts < minCellCount done ompogenerics::suppress(). hide Columns drop output table. .options Named list additional formatting options. visOmopResults::optionsVisOmopTable() shows allowed arguments default values.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a summarised_result object into a gt, flextable or tibble object — formatTable","text":"tibble, gt, flextable object.","code":""},{"path":[]},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a summarised_result object into a gt, flextable or tibble object — formatTable","text":"","code":"mockSummarisedResult() |> formatTable(   formatEstimateName = c(\"N%\" = \"<count> (<percentage>)\",                          \"N\" = \"<count>\",                          \"Mean (SD)\" = \"<mean> (<sd>)\"),   header = c(\"group\"),   split = c(\"group\",\"strata\",  \"additional\") ) #> Warning: `formatTable()` was deprecated in visOmopResults 0.3.0. #> ℹ Please use `visOmopTable()` instead. #> ! Results have not been suppressed.     CDM name       Age group       Sex       Variable name       Variable level       Estimate name                Cohort name            Cohort1       Cohort2     mock Overall Overall Number subjects - N 1,163,092 4,414,992 <40 Male Number subjects - N 7,154,231 3,155,947 >=40 Male Number subjects - N 2,261,087 1,013,138 <40 Female Number subjects - N 1,333,485 2,726,462 >=40 Female Number subjects - N 9,272,818 6,536,994 Overall Male Number subjects - N 8,941,227 9,278,701  Female Number subjects - N 2,036,644 266,247 <40 Overall Number subjects - N 2,569,829 5,594,912 >=40 Overall Number subjects - N 6,140,056 8,541,737 Overall Overall Age - Mean (SD) 7.59 (5.24) 72.82 (0.75) <40 Male Age - Mean (SD) 20.58 (4.97) 97.08 (9.70) >=40 Male Age - Mean (SD) 49.59 (0.15) 53.52 (6.49) <40 Female Age - Mean (SD) 26.19 (9.58) 16.65 (9.85) >=40 Female Age - Mean (SD) 41.60 (4.53) 5.82 (5.36) Overall Male Age - Mean (SD) 43.91 (9.82) 45.91 (7.61)  Female Age - Mean (SD) 18.24 (5.45) 62.28 (5.64) <40 Overall Age - Mean (SD) 7.83 (3.60) 59.48 (7.78) >=40 Overall Age - Mean (SD) 1.78 (5.03) 74.30 (6.39) Overall Overall Medications Amoxiciline N% 37,896 (92.15) 82,792 (4.30) <40 Male Medications Amoxiciline N% 35,953 (67.57) 64,307 (68.46) >=40 Male Medications Amoxiciline N% 84,423 (35.06) 70,848 (51.44) <40 Female Medications Amoxiciline N% 45,675 (0.87) 87,073 (94.57) >=40 Female Medications Amoxiciline N% 17,903 (43.09) 28,181 (84.31) Overall Male Medications Amoxiciline N% 96,621 (72.49) 17,322 (6.49)  Female Medications Amoxiciline N% 71,341 (41.23) 10,967 (76.21) <40 Overall Medications Amoxiciline N% 2,489 (55.09) 58,622 (7.84) >=40 Overall Medications Amoxiciline N% 62,646 (15.64) 85,072 (13.35) Overall Overall Medications Ibuprofen N% 80,970 (73.11) 68,080 (61.03) <40 Male Medications Ibuprofen N% 55,938 (85.24) 85,929 (12.11) >=40 Male Medications Ibuprofen N% 73,373 (97.58) 83,863 (62.94) <40 Female Medications Ibuprofen N% 34,970 (11.30) 88,131 (71.20) >=40 Female Medications Ibuprofen N% 98,267 (97.03) 23,770 (61.21) Overall Male Medications Ibuprofen N% 40,885 (64.81) 57,863 (3.44)  Female Medications Ibuprofen N% 36,087 (5.61) 89,790 (66.59) <40 Overall Medications Ibuprofen N% 65,251 (47.31) 34,443 (65.30) >=40 Overall Medications Ibuprofen N% 14,356 (29.46) 76,086 (45.19)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/fxTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a flextable object from a dataframe — fxTable","title":"Creates a flextable object from a dataframe — fxTable","text":"Creates flextable object dataframe using delimiter span header, allows easily customise table style.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/fxTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a flextable object from a dataframe — fxTable","text":"","code":"fxTable(   x,   delim = \"\\n\",   style = \"default\",   na = \"-\",   title = NULL,   subtitle = NULL,   caption = NULL,   groupColumn = NULL,   groupNameCol = lifecycle::deprecated(),   groupAsColumn = FALSE,   groupNameAsColumn = lifecycle::deprecated(),   groupOrder = NULL,   colsToMergeRows = NULL )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/fxTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a flextable object from a dataframe — fxTable","text":"x dataframe. delim Delimiter. style Named list specifies style different parts gt table. Accepted entries : title, subtitle, header, header_name, header_level, column_name, group_label, body. Alternatively, use \"default\" get visOmopResults style, NULL flextable style. na display missing values. title Title table, NULL title. subtitle Subtitle table, NULL subtitle. caption Caption table, NULL caption. Text markdown formatting style (e.g. *caption * caption italics). groupColumn Column use group labels. groupNameCol argument renamed \"groupColumn\" consistency throughout package functions. groupAsColumn Whether display group labels column (TRUE) rows (FALSE). groupNameAsColumn argument renamed \"groupAsColumn\" consistency argument \"groupColumn\". groupOrder Order display group labels. colsToMergeRows Names columns merge vertically consecutive row cells identical values. Alternatively, use \"all_columns\" apply merging columns, use NULL indicate merging.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/fxTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a flextable object from a dataframe — fxTable","text":"flextable object. flextable object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/fxTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a flextable object from a dataframe — fxTable","text":"fxTable example group_level result_id cdm_name group_name variable_name variable_level estimate_name estimate_type additional_name additional_level Study strata overall age_group &&& sex sex age_group overall <40 &&& Male >=40 &&& Male <40 &&& Female >=40 &&& Female Male Female <40 >=40 cohort1 1 mock cohort_name number subjects -- count integer overall overall 5,492,207 6,345,443 1,366,286 9,302,335 6,511,186 5,287,093 2,251,154 9,832,669 1,090,488    age -- mean numeric overall overall 84.8 85.4 80.3 2.4 79.5 88.7 60.0 43.3 92.0      sd numeric overall overall 2.4 8.0 9.5 4.1 5.1 9.8 3.5 4.6 2.2    Medications Amoxiciline count integer overall overall 62,868 45,255 88,802 78,420 13,806 28,131 70,695 44,219 67,770      percentage percentage overall overall 47.6504088379443 96.6159525094554 29.7161926981062 29.0648308349773 85.9722247580066 19.3312666844577 80.9108371380717 36.5486512426287 25.2699653152376     Ibuprofen count integer overall overall 3,350 4,333 79,210 20,270 6,880 86,444 7,709 43,100 97,362      percentage percentage overall overall 94.6558905066922 87.5410763313994 26.0058912448585 65.7298437319696 12.1864625485614 31.8848039023578 62.3061030171812 44.6997430175543 70.8293445874006 cohort2 1 mock cohort_name number subjects -- count integer overall overall 699,455 7,776,455 6,583,222 2,592,027 9,183,378 1,487,103 6,406,805 2,012,384 7,436,213    age -- mean numeric overall overall 61.6 43.6 89.7 76.9 12.8 53.9 12.9 51.1 54.4      sd numeric overall overall 0.8 3.7 1.3 7.4 9.6 6.7 4.7 5.4 3.3    Medications Amoxiciline count integer overall overall 70,071 6,841 95,850 24,448 92,628 50,275 93,552 43,880 35,049      percentage percentage overall overall 85.6081013800576 13.0024369573221 79.1907660430297 35.5901510221884 96.4343837695196 11.8683209177107 45.8160649519414 52.3650436662138 83.7061725789681     Ibuprofen count integer overall overall 57,096 75,441 24,245 62,716 16,841 44,479 16,468 11,828 36,746      percentage percentage overall overall 89.0028999885544 10.4306503897533 63.0411718972027 84.1558910673484 36.4262431394309 62.2922778129578 46.0747514152899 16.3412279449403 51.3866862049326","code":"mockSummarisedResult() |>   formatEstimateValue(decimals = c(integer = 0, numeric = 1)) |>   formatHeader(header = c(\"Study strata\", \"strata_name\", \"strata_level\"),                includeHeaderName = FALSE) |>   fxTable(     style = \"default\",     na = \"--\",     title = \"fxTable example\",     subtitle = NULL,     caption = NULL,     groupColumn = \"group_level\",     groupAsColumn = TRUE,     groupOrder = c(\"cohort1\", \"cohort2\"),     colsToMergeRows = \"all_columns\"  ) .cl-ba06baf0{}.cl-b9fe5a22{font-family:'Arial';font-size:15pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-b9fe5a2c{font-family:'Arial';font-size:10pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-b9fe5a36{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-ba01748c{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-ba017496{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-ba017497{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-ba019818{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.2pt solid rgba(190, 190, 190, 1.00);border-top: 1.2pt solid rgba(190, 190, 190, 1.00);border-left: 1.2pt solid rgba(190, 190, 190, 1.00);border-right: 1.2pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-ba019822{width:0.75in;background-color:rgba(200, 200, 200, 1.00);vertical-align: middle;border-bottom: 1.2pt solid rgba(190, 190, 190, 1.00);border-top: 1.2pt solid rgba(190, 190, 190, 1.00);border-left: 1.2pt solid rgba(190, 190, 190, 1.00);border-right: 1.2pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-ba019823{width:0.75in;background-color:rgba(225, 225, 225, 1.00);vertical-align: middle;border-bottom: 1.2pt solid rgba(190, 190, 190, 1.00);border-top: 1.2pt solid rgba(190, 190, 190, 1.00);border-left: 1.2pt solid rgba(190, 190, 190, 1.00);border-right: 1.2pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-ba019824{width:0.75in;background-color:rgba(233, 233, 233, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 1pt solid rgba(190, 190, 190, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-ba01982c{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-ba019836{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-ba019837{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-ba019840{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-ba019841{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-ba019842{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}fxTable examplegroup_levelresult_idcdm_namegroup_namevariable_namevariable_levelestimate_nameestimate_typeadditional_nameadditional_levelStudy strataoverallage_group &&& sexsexage_groupoverall<40 &&& Male>=40 &&& Male<40 &&& Female>=40 &&& FemaleMaleFemale<40>=40cohort11mockcohort_namenumber subjects--countintegeroveralloverall5,492,2076,345,4431,366,2869,302,3356,511,1865,287,0932,251,1549,832,6691,090,488age--meannumericoveralloverall84.885.480.32.479.588.760.043.392.0sdnumericoveralloverall2.48.09.54.15.19.83.54.62.2MedicationsAmoxicilinecountintegeroveralloverall62,86845,25588,80278,42013,80628,13170,69544,21967,770percentagepercentageoveralloverall47.650408837944396.615952509455429.716192698106229.064830834977385.972224758006619.331266684457780.910837138071736.548651242628725.2699653152376Ibuprofencountintegeroveralloverall3,3504,33379,21020,2706,88086,4447,70943,10097,362percentagepercentageoveralloverall94.655890506692287.541076331399426.005891244858565.729843731969612.186462548561431.884803902357862.306103017181244.699743017554370.8293445874006cohort21mockcohort_namenumber subjects--countintegeroveralloverall699,4557,776,4556,583,2222,592,0279,183,3781,487,1036,406,8052,012,3847,436,213age--meannumericoveralloverall61.643.689.776.912.853.912.951.154.4sdnumericoveralloverall0.83.71.37.49.66.74.75.43.3MedicationsAmoxicilinecountintegeroveralloverall70,0716,84195,85024,44892,62850,27593,55243,88035,049percentagepercentageoveralloverall85.608101380057613.002436957322179.190766043029735.590151022188496.434383769519611.868320917710745.816064951941452.365043666213883.7061725789681Ibuprofencountintegeroveralloverall57,09675,44124,24562,71616,84144,47916,46811,82836,746percentagepercentageoveralloverall89.002899988554410.430650389753363.041171897202784.155891067348436.426243139430962.292277812957846.074751415289916.341227944940351.3866862049326"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/groupColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify group columns in an omop result object — groupColumns","title":"Identify group columns in an omop result object — groupColumns","text":"Identifies returns unique values group_name column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/groupColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify group columns in an omop result object — groupColumns","text":"","code":"groupColumns(result)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/groupColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify group columns in an omop result object — groupColumns","text":"result summarised_result.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/groupColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify group columns in an omop result object — groupColumns","text":"Unique values group name column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/groupColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify group columns in an omop result object — groupColumns","text":"","code":"mockSummarisedResult() |>   groupColumns() #> [1] \"cohort_name\""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/gtTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a gt object from a dataframe — gtTable","title":"Creates a gt object from a dataframe — gtTable","text":"Creates flextable object dataframe using delimiter span header, allows easily customise table style.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/gtTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a gt object from a dataframe — gtTable","text":"","code":"gtTable(   x,   delim = \"\\n\",   style = \"default\",   na = \"-\",   title = NULL,   subtitle = NULL,   caption = NULL,   groupColumn = NULL,   groupNameCol = lifecycle::deprecated(),   groupAsColumn = FALSE,   groupNameAsColumn = lifecycle::deprecated(),   groupOrder = NULL,   colsToMergeRows = NULL )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/gtTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a gt object from a dataframe — gtTable","text":"x dataframe. delim Delimiter. style Named list specifies style different parts gt table. Accepted entries : title, subtitle, header, header_name, header_level, column_name, group_label, body. Alternatively, use \"default\" get visOmopResults style, NULL gt style na display missing values. title Title table, NULL title. subtitle Subtitle table, NULL subtitle. caption Caption table, NULL caption. Text markdown formatting style (e.g. *caption * caption italics). groupColumn Column use group labels. groupNameCol argument renamed \"groupColumn\" consistency throughout package functions. groupAsColumn Whether display group labels column (TRUE) rows (FALSE). groupNameAsColumn argument renamed \"groupAsColumn\" consistency argument \"groupColumn\". groupOrder Order display group labels. colsToMergeRows Names columns merge vertically consecutive row cells identical values. Alternatively, use \"all_columns\" apply merging columns, use NULL indicate merging.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/gtTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a gt object from a dataframe — gtTable","text":"gt object. gt table.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/gtTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a gt object from a dataframe — gtTable","text":"","code":"mockSummarisedResult() |>   formatEstimateValue(decimals = c(integer = 0, numeric = 1)) |>   formatHeader(header = c(\"Study strata\", \"strata_name\", \"strata_level\"),               includeHeaderName = FALSE) |>   gtTable(     style = list(\"header\" = list(       gt::cell_fill(color = \"#d9d9d9\"),       gt::cell_text(weight = \"bold\")),       \"header_level\" = list(gt::cell_fill(color = \"#e1e1e1\"),                             gt::cell_text(weight = \"bold\")),       \"column_name\" = list(gt::cell_text(weight = \"bold\")),       \"title\" = list(gt::cell_text(weight = \"bold\"),                      gt::cell_fill(color = \"#c8c8c8\")),       \"group_label\" = gt::cell_fill(color = \"#e1e1e1\")),     na = \"--\",     title = \"gtTable example\",     subtitle = NULL,     caption = NULL,     groupColumn = \"group_level\",     groupAsColumn = FALSE,     groupOrder = c(\"cohort1\", \"cohort2\"),     colsToMergeRows = \"all_columns\"   )     gtTable example                     Study strata            result_id       cdm_name       group_name       variable_name       variable_level       estimate_name       estimate_type       additional_name       additional_level                overall                       age_group &&& sex                       sex                       age_group            overall       <40 &&& Male       >=40 &&& Male       <40 &&& Female       >=40 &&& Female       Male       Female       <40       >=40     cohort1     1 mock cohort_name number subjects -- count integer overall overall 7,748,016 1,514,956 3,946,066 9,349,984 7,395,896 6,356,681 3,382,199 9,624,163 1,117,899   age -- mean numeric overall overall 85.1 50.1 16.6 36.1 65.2 87.4 72.8 41.2 15.9     sd numeric overall overall 3.6 3.9 9.0 2.8 1.4 4.5 1.1 8.8 5.3   Medications Amoxiciline count integer overall overall 93,417 8,444 3,405 31,096 78,471 28,040 16,528 43,359 81,405     percentage percentage overall overall 2.21170505974442 81.5023199422285 30.3833421086892 93.1795864831656 54.043101449497 25.4818350775167 47.7587363682687 70.4463991336524 0.750555354170501    Ibuprofen count integer overall overall 17,487 32,731 61,475 7,917 51,906 30,628 67,140 39,367 74,785     percentage percentage overall overall 41.1679971730337 74.6071676257998 72.3450553836301 61.4524137461558 47.3980569280684 57.8461039112881 24.159372295253 11.4378662081435 29.8344632610679cohort2     1 mock cohort_name number subjects -- count integer overall overall 6,504,853 9,835,116 1,791,275 1,379,704 565,586 5,463,676 4,665,048 8,963,784 185,314   age -- mean numeric overall overall 84.6 88.4 39.6 3.8 95.1 78.4 21.9 33.1 17.8     sd numeric overall overall 7.4 7.2 2.6 6.7 2.1 6.9 1.9 7.8 0.2   Medications Amoxiciline count integer overall overall 68,651 77,731 9,120 74,262 39,667 29,603 74,292 46,651 77,303     percentage percentage overall overall 77.2408777615055 26.5793564263731 97.104093618691 19.0525120124221 1.96958889719099 61.2376979552209 52.5731408968568 63.4520042454824 39.5447959192097    Ibuprofen count integer overall overall 13,893 37,734 64,138 99,419 36,856 33,735 91,369 90,942 23,838     percentage percentage overall overall 48.4119494911283 56.7406318150461 75.395310902968 54.5425235992298 75.9677961235866 21.2967462604865 83.9265023823828 40.6697055324912 87.3739800183102"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/mockSummarisedResult.html","id":null,"dir":"Reference","previous_headings":"","what":"A summarised_result object filled with mock data — mockSummarisedResult","title":"A summarised_result object filled with mock data — mockSummarisedResult","text":"Creates object class summarised_result mock data illustration purposes.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/mockSummarisedResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A summarised_result object filled with mock data — mockSummarisedResult","text":"","code":"mockSummarisedResult()"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/mockSummarisedResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A summarised_result object filled with mock data — mockSummarisedResult","text":"object class summarised_result mock data.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/mockSummarisedResult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A summarised_result object filled with mock data — mockSummarisedResult","text":"","code":"mockSummarisedResult() #> # A tibble: 126 × 13 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 116 more rows #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/optionsVisOmopTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Additional arguments for the function visOmopTable — optionsVisOmopTable","title":"Additional arguments for the function visOmopTable — optionsVisOmopTable","text":"provides list allowed inputs .option argument visOmopTable given default value.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/optionsVisOmopTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additional arguments for the function visOmopTable — optionsVisOmopTable","text":"","code":"optionsVisOmopTable()"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/optionsVisOmopTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Additional arguments for the function visOmopTable — optionsVisOmopTable","text":"default .options named list.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/optionsVisOmopTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Additional arguments for the function visOmopTable — optionsVisOmopTable","text":"","code":"{ optionsVisOmopTable() } #> $decimals #>    integer percentage    numeric proportion  #>          0          2          2          2  #>  #> $decimalMark #> [1] \".\" #>  #> $bigMark #> [1] \",\" #>  #> $keepNotFormatted #> [1] TRUE #>  #> $useFormatOrder #> [1] TRUE #>  #> $delim #> [1] \"\\n\" #>  #> $includeHeaderKey #> [1] TRUE #>  #> $style #> [1] \"default\" #>  #> $na #> [1] \"-\" #>  #> $title #> NULL #>  #> $subtitle #> NULL #>  #> $caption #> NULL #>  #> $groupAsColumn #> [1] FALSE #>  #> $groupOrder #> NULL #>  #> $colsToMergeRows #> [1] \"all_columns\" #>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/pivotEstimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Set estimates as columns — pivotEstimates","title":"Set estimates as columns — pivotEstimates","text":"Pivot estimates new columns result table.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/pivotEstimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set estimates as columns — pivotEstimates","text":"","code":"pivotEstimates(result, pivotEstimatesBy = \"estimate_name\", nameStyle = NULL)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/pivotEstimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set estimates as columns — pivotEstimates","text":"result summarised_result. pivotEstimatesBy Names pivot wider estimate values. NULL table pivotted. nameStyle Name style (glue package specifications) customise names pivotting estimates. NULL standard tidyr::pivot_wider formatting used.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/pivotEstimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set estimates as columns — pivotEstimates","text":"tibble.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/pivotEstimates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set estimates as columns — pivotEstimates","text":"","code":"result <- mockSummarisedResult() result |> pivotEstimates() #> # A tibble: 72 × 14 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 62 more rows #> # ℹ 8 more variables: variable_name <chr>, variable_level <chr>, #> #   additional_name <chr>, additional_level <chr>, count <int>, mean <dbl>, #> #   sd <dbl>, percentage <dbl>"},{"path":[]},{"path":"https://darwin-eu.github.io/visOmopResults/reference/plotBarplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a bar plot visualisation from a summarised result object. — plotBarplot","text":"","code":"plotBarplot(result, x, y, facet = NULL, colour = NULL)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/plotBarplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a bar plot visualisation from a summarised result object. — plotBarplot","text":"result summarised result object. x Column estimate name used x variable. y Column estimate name used y variable facet Variables facet , formula can provided specify variables used rows ones columns. colour Columns use determine colors.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/plotBarplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a bar plot visualisation from a summarised result object. — plotBarplot","text":"plot object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/plotBarplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a bar plot visualisation from a summarised result object. — plotBarplot","text":"","code":"# \\donttest{ result <- mockSummarisedResult() |> dplyr::filter(variable_name == \"age\")  plotBarplot(   result = result,   x = \"cohort_name\",   y = \"mean\",   facet = c(\"age_group\", \"sex\")) #> Warning: The `columns` argument of `addSettings()` is deprecated as of visOmopResults #> 0.4.0. #> ℹ Please use the `settingsColumns` argument instead. #> ℹ The deprecated feature was likely used in the visOmopResults package. #>   Please report the issue at #>   <https://github.com/darwin-eu/visOmopResults/issues>.  # }"},{"path":[]},{"path":"https://darwin-eu.github.io/visOmopResults/reference/plotBoxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a box plot visualisation from a summarised_result object. — plotBoxplot","text":"","code":"plotBoxplot(   result,   lower = \"q25\",   middle = \"median\",   upper = \"q75\",   ymin = \"min\",   ymax = \"max\",   facet = NULL,   colour = NULL )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/plotBoxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a box plot visualisation from a summarised_result object. — plotBoxplot","text":"result summarised result object. lower Estimate name lower quantile box. middle Estimate name middle line box. upper Estimate name upper quantile box. ymin Estimate name lower limit bars. ymax Estimate name upper limit bars. facet Variables facet , formula can provided specify variables used rows ones columns. colour Columns use determine colors.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/plotBoxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a box plot visualisation from a summarised_result object. — plotBoxplot","text":"ggplot2 object.","code":""},{"path":[]},{"path":"https://darwin-eu.github.io/visOmopResults/reference/plotScatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a scatter plot visualisation from a summarised result object. — plotScatter","text":"","code":"plotScatter(   result,   x,   y,   line,   point,   ribbon,   ymin = NULL,   ymax = NULL,   facet = NULL,   colour = NULL,   group = colour )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/plotScatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a scatter plot visualisation from a summarised result object. — plotScatter","text":"result summarised result object. x Column estimate name used x variable. y Column estimate name used y variable line Whether plot line using geom_line. point Whether plot points using geom_point. ribbon Whether plot ribbon using geom_ribbon. ymin Lower limit error bars, provided plot using geom_errorbar. ymax Upper limit error bars, provided plot using geom_errorbar. facet Variables facet , formula can provided specify variables used rows ones columns. colour Columns use determine colors. group Columns use determine group.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/plotScatter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a scatter plot visualisation from a summarised result object. — plotScatter","text":"plot object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/plotScatter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a scatter plot visualisation from a summarised result object. — plotScatter","text":"","code":"# \\donttest{ result <- mockSummarisedResult() |>   dplyr::filter(variable_name == \"age\")  plotScatter(   result = result,   x = \"cohort_name\",   y = \"mean\",   line = TRUE,   point = TRUE,   ribbon = FALSE,   facet = age_group ~ sex)  # }"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics tidy omopgenerics bind, exportSummarisedResult, importSummarisedResult, suppress","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitAdditional.html","id":null,"dir":"Reference","previous_headings":"","what":"Split additional_name and additional_level columns — splitAdditional","title":"Split additional_name and additional_level columns — splitAdditional","text":"Pivots input dataframe values column additional_name transformed columns contain values additional_level column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitAdditional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split additional_name and additional_level columns — splitAdditional","text":"","code":"splitAdditional(   result,   keep = FALSE,   fill = \"overall\",   overall = lifecycle::deprecated() )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitAdditional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split additional_name and additional_level columns — splitAdditional","text":"result dataframe least columns additional_name additional_level. keep Whether keep original group_name group_level columns. fill Optionally, character specifies value filled missing. overall deprecated.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitAdditional.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split additional_name and additional_level columns — splitAdditional","text":"dataframe.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitAdditional.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split additional_name and additional_level columns — splitAdditional","text":"","code":"mockSummarisedResult() |>   splitAdditional() #> # A tibble: 126 × 11 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 116 more rows #> # ℹ 5 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitAll.html","id":null,"dir":"Reference","previous_headings":"","what":"Split all pairs name-level into columns. — splitAll","title":"Split all pairs name-level into columns. — splitAll","text":"Pivots input dataframe pair name-level columns transformed columns (name) contain values corresponding level.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitAll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split all pairs name-level into columns. — splitAll","text":"","code":"splitAll(   result,   keep = FALSE,   fill = \"overall\",   exclude = \"variable\",   overall = lifecycle::deprecated() )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitAll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split all pairs name-level into columns. — splitAll","text":"result data.frame. keep Whether keep original name-level columns. fill character specifies value filled missing. exclude Name column pair exclude. overall deprecated.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitAll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split all pairs name-level into columns. — splitAll","text":"dataframe group, strata additional columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitAll.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split all pairs name-level into columns. — splitAll","text":"","code":"mockSummarisedResult() |>   splitAll() #> # A tibble: 126 × 10 #>    result_id cdm_name cohort_name age_group sex     variable_name variable_level #>        <int> <chr>    <chr>       <chr>     <chr>   <chr>         <chr>          #>  1         1 mock     cohort1     overall   overall number subje… NA             #>  2         1 mock     cohort1     <40       Male    number subje… NA             #>  3         1 mock     cohort1     >=40      Male    number subje… NA             #>  4         1 mock     cohort1     <40       Female  number subje… NA             #>  5         1 mock     cohort1     >=40      Female  number subje… NA             #>  6         1 mock     cohort1     overall   Male    number subje… NA             #>  7         1 mock     cohort1     overall   Female  number subje… NA             #>  8         1 mock     cohort1     <40       overall number subje… NA             #>  9         1 mock     cohort1     >=40      overall number subje… NA             #> 10         1 mock     cohort2     overall   overall number subje… NA             #> # ℹ 116 more rows #> # ℹ 3 more variables: estimate_name <chr>, estimate_type <chr>, #> #   estimate_value <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Split group_name and group_level columns — splitGroup","title":"Split group_name and group_level columns — splitGroup","text":"Pivots input dataframe values column group_name transformed columns contain values group_level column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split group_name and group_level columns — splitGroup","text":"","code":"splitGroup(   result,   keep = FALSE,   fill = \"overall\",   overall = lifecycle::deprecated() )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split group_name and group_level columns — splitGroup","text":"result dataframe least columns group_name group_level. keep Whether keep original group_name group_level columns. fill Optionally, character specifies value filled missing. overall deprecated.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split group_name and group_level columns — splitGroup","text":"dataframe.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split group_name and group_level columns — splitGroup","text":"","code":"mockSummarisedResult() |>   splitGroup() #> # A tibble: 126 × 12 #>    result_id cdm_name cohort_name strata_name       strata_level   variable_name #>        <int> <chr>    <chr>       <chr>             <chr>          <chr>         #>  1         1 mock     cohort1     overall           overall        number subje… #>  2         1 mock     cohort1     age_group &&& sex <40 &&& Male   number subje… #>  3         1 mock     cohort1     age_group &&& sex >=40 &&& Male  number subje… #>  4         1 mock     cohort1     age_group &&& sex <40 &&& Female number subje… #>  5         1 mock     cohort1     age_group &&& sex >=40 &&& Fema… number subje… #>  6         1 mock     cohort1     sex               Male           number subje… #>  7         1 mock     cohort1     sex               Female         number subje… #>  8         1 mock     cohort1     age_group         <40            number subje… #>  9         1 mock     cohort1     age_group         >=40           number subje… #> 10         1 mock     cohort2     overall           overall        number subje… #> # ℹ 116 more rows #> # ℹ 6 more variables: variable_level <chr>, estimate_name <chr>, #> #   estimate_type <chr>, estimate_value <chr>, additional_name <chr>, #> #   additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitNameLevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Split name and level columns into the columns — splitNameLevel","title":"Split name and level columns into the columns — splitNameLevel","text":"Pivots input dataframe values name columns transformed columns, values come specified level column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitNameLevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split name and level columns into the columns — splitNameLevel","text":"","code":"splitNameLevel(   result,   name = \"group_name\",   level = \"group_level\",   keep = FALSE,   fill = \"overall\",   overall = lifecycle::deprecated() )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitNameLevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split name and level columns into the columns — splitNameLevel","text":"result summarised_result object. name Column names. level Column levels. keep Whether keep original group_name group_level columns. fill Optionally, character specifies value filled missing. overall deprecated.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitNameLevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split name and level columns into the columns — splitNameLevel","text":"dataframe specified name column values columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitNameLevel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split name and level columns into the columns — splitNameLevel","text":"","code":"mockSummarisedResult() |>   splitNameLevel(name = \"group_name\",                  level = \"group_level\",                  keep = FALSE) #> # A tibble: 126 × 12 #>    result_id cdm_name cohort_name strata_name       strata_level   variable_name #>        <int> <chr>    <chr>       <chr>             <chr>          <chr>         #>  1         1 mock     cohort1     overall           overall        number subje… #>  2         1 mock     cohort1     age_group &&& sex <40 &&& Male   number subje… #>  3         1 mock     cohort1     age_group &&& sex >=40 &&& Male  number subje… #>  4         1 mock     cohort1     age_group &&& sex <40 &&& Female number subje… #>  5         1 mock     cohort1     age_group &&& sex >=40 &&& Fema… number subje… #>  6         1 mock     cohort1     sex               Male           number subje… #>  7         1 mock     cohort1     sex               Female         number subje… #>  8         1 mock     cohort1     age_group         <40            number subje… #>  9         1 mock     cohort1     age_group         >=40           number subje… #> 10         1 mock     cohort2     overall           overall        number subje… #> # ℹ 116 more rows #> # ℹ 6 more variables: variable_level <chr>, estimate_name <chr>, #> #   estimate_type <chr>, estimate_value <chr>, additional_name <chr>, #> #   additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitStrata.html","id":null,"dir":"Reference","previous_headings":"","what":"Split strata_name and strata_level columns — splitStrata","title":"Split strata_name and strata_level columns — splitStrata","text":"Pivots input dataframe values column strata_name transformed columns contain values strata_level column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitStrata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split strata_name and strata_level columns — splitStrata","text":"","code":"splitStrata(   result,   keep = FALSE,   fill = \"overall\",   overall = lifecycle::deprecated() )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitStrata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split strata_name and strata_level columns — splitStrata","text":"result dataframe least columns strata_name strata_level. keep Whether keep original group_name group_level columns. fill Optionally, character specifies value filled missing. overall deprecated.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitStrata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split strata_name and strata_level columns — splitStrata","text":"dataframe.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitStrata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split strata_name and strata_level columns — splitStrata","text":"","code":"mockSummarisedResult() |>   splitStrata() #> # A tibble: 126 × 13 #>    result_id cdm_name group_name  group_level age_group sex     variable_name   #>        <int> <chr>    <chr>       <chr>       <chr>     <chr>   <chr>           #>  1         1 mock     cohort_name cohort1     overall   overall number subjects #>  2         1 mock     cohort_name cohort1     <40       Male    number subjects #>  3         1 mock     cohort_name cohort1     >=40      Male    number subjects #>  4         1 mock     cohort_name cohort1     <40       Female  number subjects #>  5         1 mock     cohort_name cohort1     >=40      Female  number subjects #>  6         1 mock     cohort_name cohort1     overall   Male    number subjects #>  7         1 mock     cohort_name cohort1     overall   Female  number subjects #>  8         1 mock     cohort_name cohort1     <40       overall number subjects #>  9         1 mock     cohort_name cohort1     >=40      overall number subjects #> 10         1 mock     cohort_name cohort2     overall   overall number subjects #> # ℹ 116 more rows #> # ℹ 6 more variables: variable_level <chr>, estimate_name <chr>, #> #   estimate_type <chr>, estimate_value <chr>, additional_name <chr>, #> #   additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/strataColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify strata columns in an omop result object — strataColumns","title":"Identify strata columns in an omop result object — strataColumns","text":"Identifies returns unique values strata_name column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/strataColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify strata columns in an omop result object — strataColumns","text":"","code":"strataColumns(result)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/strataColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify strata columns in an omop result object — strataColumns","text":"result summarised_result.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/strataColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify strata columns in an omop result object — strataColumns","text":"Unique values strata name column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/strataColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify strata columns in an omop result object — strataColumns","text":"","code":"mockSummarisedResult() |>   strataColumns() #> [1] \"age_group\" \"sex\""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidy.summarised_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a summarised_result object into a tidy tibble — tidy.summarised_result","title":"Turn a summarised_result object into a tidy tibble — tidy.summarised_result","text":"Provides tools obtaining tidy version summarised_result object. tidy version include settings columns, estimate_value pivotted columns using estimate_name names, group, strata, additional splitted. want customise tidy operations, please use tidySummarisedResult().","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidy.summarised_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a summarised_result object into a tidy tibble — tidy.summarised_result","text":"","code":"# S3 method for class 'summarised_result' tidy(x, ...)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidy.summarised_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a summarised_result object into a tidy tibble — tidy.summarised_result","text":"x summarised_result. ... compatibility (used).","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidy.summarised_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn a summarised_result object into a tidy tibble — tidy.summarised_result","text":"tibble.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidy.summarised_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn a summarised_result object into a tidy tibble — tidy.summarised_result","text":"","code":"result <- mockSummarisedResult() result |> tidy() #> # A tibble: 72 × 13 #>    cdm_name cohort_name age_group sex     variable_name   variable_level   count #>    <chr>    <chr>       <chr>     <chr>   <chr>           <chr>            <int> #>  1 mock     cohort1     overall   overall number subjects NA             4497093 #>  2 mock     cohort1     <40       Male    number subjects NA             5518207 #>  3 mock     cohort1     >=40      Male    number subjects NA             9262120 #>  4 mock     cohort1     <40       Female  number subjects NA             5830144 #>  5 mock     cohort1     >=40      Female  number subjects NA              745444 #>  6 mock     cohort1     overall   Male    number subjects NA             1032387 #>  7 mock     cohort1     overall   Female  number subjects NA             9288374 #>  8 mock     cohort1     <40       overall number subjects NA             2535113 #>  9 mock     cohort1     >=40      overall number subjects NA             2286501 #> 10 mock     cohort2     overall   overall number subjects NA             3285193 #> # ℹ 62 more rows #> # ℹ 6 more variables: mean <dbl>, sd <dbl>, percentage <dbl>, #> #   result_type <chr>, package_name <chr>, package_version <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidySummarisedResult.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a custom tidy visualization of a summarised_result object — tidySummarisedResult","title":"Get a custom tidy visualization of a summarised_result object — tidySummarisedResult","text":"Provides tools obtaining tidy version summarised_result object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidySummarisedResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a custom tidy visualization of a summarised_result object — tidySummarisedResult","text":"","code":"tidySummarisedResult(   result,   splitGroup = TRUE,   splitStrata = TRUE,   splitAdditional = TRUE,   settingsColumns = colnames(settings(result)),   addSettings = lifecycle::deprecated(),   pivotEstimatesBy = \"estimate_name\",   nameStyle = NULL )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidySummarisedResult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a custom tidy visualization of a summarised_result object — tidySummarisedResult","text":"result summarised_result. splitGroup TRUE split group name-level column pair. splitStrata TRUE split group name-level column pair. splitAdditional TRUE split group name-level column pair. settingsColumns Settings added columns, default settings added. NULL empty character vector, settings added. addSettings  pivotEstimatesBy Names pivot wider estimate values. NULL table pivotted. nameStyle Name style (glue package specifications) customise names pivotting estimates. NULL standard tidyr::pivot_wider formatting used.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidySummarisedResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a custom tidy visualization of a summarised_result object — tidySummarisedResult","text":"tibble.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidySummarisedResult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a custom tidy visualization of a summarised_result object — tidySummarisedResult","text":"","code":"{ result <- mockSummarisedResult()  result |> tidySummarisedResult()  result |>   tidySummarisedResult(     settings = character(),     pivotEstimatesBy = c(\"variable_name\", \"variable_level\", \"estimate_name\")   )  result |>   tidySummarisedResult(     settings = character(),     pivotEstimatesBy = c(\"variable_name\", \"variable_level\", \"estimate_name\"),     nameStyle = \"{estimate_name}_{variable_name}_{variable_level}\"   ) } #> # A tibble: 18 × 15 #>    result_id cdm_name cohort_name age_group sex     result_type     package_name #>        <int> <chr>    <chr>       <chr>     <chr>   <chr>           <chr>        #>  1         1 mock     cohort1     overall   overall mock_summarise… visOmopResu… #>  2         1 mock     cohort1     <40       Male    mock_summarise… visOmopResu… #>  3         1 mock     cohort1     >=40      Male    mock_summarise… visOmopResu… #>  4         1 mock     cohort1     <40       Female  mock_summarise… visOmopResu… #>  5         1 mock     cohort1     >=40      Female  mock_summarise… visOmopResu… #>  6         1 mock     cohort1     overall   Male    mock_summarise… visOmopResu… #>  7         1 mock     cohort1     overall   Female  mock_summarise… visOmopResu… #>  8         1 mock     cohort1     <40       overall mock_summarise… visOmopResu… #>  9         1 mock     cohort1     >=40      overall mock_summarise… visOmopResu… #> 10         1 mock     cohort2     overall   overall mock_summarise… visOmopResu… #> 11         1 mock     cohort2     <40       Male    mock_summarise… visOmopResu… #> 12         1 mock     cohort2     >=40      Male    mock_summarise… visOmopResu… #> 13         1 mock     cohort2     <40       Female  mock_summarise… visOmopResu… #> 14         1 mock     cohort2     >=40      Female  mock_summarise… visOmopResu… #> 15         1 mock     cohort2     overall   Male    mock_summarise… visOmopResu… #> 16         1 mock     cohort2     overall   Female  mock_summarise… visOmopResu… #> 17         1 mock     cohort2     <40       overall mock_summarise… visOmopResu… #> 18         1 mock     cohort2     >=40      overall mock_summarise… visOmopResu… #> # ℹ 8 more variables: package_version <chr>, `count_number subjects` <int>, #> #   mean_age <dbl>, sd_age <dbl>, count_Medications_Amoxiciline <int>, #> #   percentage_Medications_Amoxiciline <dbl>, #> #   count_Medications_Ibuprofen <int>, percentage_Medications_Ibuprofen <dbl>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteAdditional.html","id":null,"dir":"Reference","previous_headings":"","what":"Unite one or more columns in additional_name-additional_level format — uniteAdditional","title":"Unite one or more columns in additional_name-additional_level format — uniteAdditional","text":"Unites targeted table columns additional_name-additional_level columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteAdditional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unite one or more columns in additional_name-additional_level format — uniteAdditional","text":"","code":"uniteAdditional(   x,   cols = character(0),   keep = FALSE,   ignore = c(NA, \"overall\") )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteAdditional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unite one or more columns in additional_name-additional_level format — uniteAdditional","text":"x Tibble dataframe. cols Columns aggregate. keep Whether keep original columns. ignore Level values ignore.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteAdditional.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unite one or more columns in additional_name-additional_level format — uniteAdditional","text":"tibble new columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteAdditional.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unite one or more columns in additional_name-additional_level format — uniteAdditional","text":"","code":"x <- dplyr::tibble(   variable = \"number subjects\",   value = c(10, 15, 40, 78),   sex = c(\"Male\", \"Female\", \"Male\", \"Female\"),   age_group = c(\"<40\", \">40\", \">40\", \"<40\") )  x |>   uniteAdditional(c(\"sex\", \"age_group\")) #> # A tibble: 4 × 4 #>   variable        value additional_name   additional_level #>   <chr>           <dbl> <chr>             <chr>            #> 1 number subjects    10 sex &&& age_group Male &&& <40     #> 2 number subjects    15 sex &&& age_group Female &&& >40   #> 3 number subjects    40 sex &&& age_group Male &&& >40     #> 4 number subjects    78 sex &&& age_group Female &&& <40"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Unite one or more columns in group_name-group_level format — uniteGroup","title":"Unite one or more columns in group_name-group_level format — uniteGroup","text":"Unites targeted table columns group_name-group_level columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unite one or more columns in group_name-group_level format — uniteGroup","text":"","code":"uniteGroup(x, cols = character(0), keep = FALSE, ignore = c(NA, \"overall\"))"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unite one or more columns in group_name-group_level format — uniteGroup","text":"x Tibble dataframe. cols Columns aggregate. keep Whether keep original columns. ignore Level values ignore.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unite one or more columns in group_name-group_level format — uniteGroup","text":"tibble new columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unite one or more columns in group_name-group_level format — uniteGroup","text":"","code":"x <- dplyr::tibble(   variable = \"number subjects\",   value = c(10, 15, 40, 78),   sex = c(\"Male\", \"Female\", \"Male\", \"Female\"),   age_group = c(\"<40\", \">40\", \">40\", \"<40\") )  x |>   uniteGroup(c(\"sex\", \"age_group\")) #> # A tibble: 4 × 4 #>   variable        value group_name        group_level    #>   <chr>           <dbl> <chr>             <chr>          #> 1 number subjects    10 sex &&& age_group Male &&& <40   #> 2 number subjects    15 sex &&& age_group Female &&& >40 #> 3 number subjects    40 sex &&& age_group Male &&& >40   #> 4 number subjects    78 sex &&& age_group Female &&& <40"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteNameLevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Unite one or more columns in name-level format — uniteNameLevel","title":"Unite one or more columns in name-level format — uniteNameLevel","text":"Unites targeted table columns pair name-level columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteNameLevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unite one or more columns in name-level format — uniteNameLevel","text":"","code":"uniteNameLevel(   x,   cols = character(0),   name = \"group_name\",   level = \"group_level\",   keep = FALSE,   ignore = c(NA, \"overall\") )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteNameLevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unite one or more columns in name-level format — uniteNameLevel","text":"x dataframe. cols Columns aggregate. name Column name name column. level Column name level column. keep Whether keep original columns. ignore Level values ignore.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteNameLevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unite one or more columns in name-level format — uniteNameLevel","text":"tibble new columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteNameLevel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unite one or more columns in name-level format — uniteNameLevel","text":"","code":"x <- dplyr::tibble(   variable = \"number subjects\",   value = c(10, 15, 40, 78),   sex = c(\"Male\", \"Female\", \"Male\", \"Female\"),   age_group = c(\"<40\", \">40\", \">40\", \"<40\") )  x |>   uniteNameLevel(     cols = c(\"sex\", \"age_group\"),     name = \"new_column_name\",     level = \"new_column_level\"   ) #> # A tibble: 4 × 4 #>   variable        value new_column_name   new_column_level #>   <chr>           <dbl> <chr>             <chr>            #> 1 number subjects    10 sex &&& age_group Male &&& <40     #> 2 number subjects    15 sex &&& age_group Female &&& >40   #> 3 number subjects    40 sex &&& age_group Male &&& >40     #> 4 number subjects    78 sex &&& age_group Female &&& <40"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteStrata.html","id":null,"dir":"Reference","previous_headings":"","what":"Unite one or more columns in strata_name-strata_level format — uniteStrata","title":"Unite one or more columns in strata_name-strata_level format — uniteStrata","text":"Unites targeted table columns strata_name-strata_level columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteStrata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unite one or more columns in strata_name-strata_level format — uniteStrata","text":"","code":"uniteStrata(x, cols = character(0), keep = FALSE, ignore = c(NA, \"overall\"))"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteStrata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unite one or more columns in strata_name-strata_level format — uniteStrata","text":"x Tibble dataframe. cols Columns aggregate. keep Whether keep original columns. ignore Level values ignore.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteStrata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unite one or more columns in strata_name-strata_level format — uniteStrata","text":"tibble new columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteStrata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unite one or more columns in strata_name-strata_level format — uniteStrata","text":"","code":"x <- dplyr::tibble(   variable = \"number subjects\",   value = c(10, 15, 40, 78),   sex = c(\"Male\", \"Female\", \"Male\", \"Female\"),   age_group = c(\"<40\", \">40\", \">40\", \"<40\") )  x |>   uniteStrata(c(\"sex\", \"age_group\")) #> # A tibble: 4 × 4 #>   variable        value strata_name       strata_level   #>   <chr>           <dbl> <chr>             <chr>          #> 1 number subjects    10 sex &&& age_group Male &&& <40   #> 2 number subjects    15 sex &&& age_group Female &&& >40 #> 3 number subjects    40 sex &&& age_group Male &&& >40   #> 4 number subjects    78 sex &&& age_group Female &&& <40"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visOmopResults-package.html","id":null,"dir":"Reference","previous_headings":"","what":"visOmopResults: Graphs and Tables for OMOP Results — visOmopResults-package","title":"visOmopResults: Graphs and Tables for OMOP Results — visOmopResults-package","text":"Provides methods transform omop_result objects formatted tables figures, facilitating visualization study results working Observational Medical Outcomes Partnership (OMOP) Common Data Model.","code":""},{"path":[]},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visOmopResults-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"visOmopResults: Graphs and Tables for OMOP Results — visOmopResults-package","text":"Maintainer: Núria Mercadé-Besora nuria.mercadebesora@ndorms.ox.ac.uk (ORCID) Authors: Marti Catala marti.catalasabate@ndorms.ox.ac.uk (ORCID)","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visOmopTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a summarised_result object into a gt, flextable or tibble object — visOmopTable","title":"Format a summarised_result object into a gt, flextable or tibble object — visOmopTable","text":"Format summarised_result object gt, flextable tibble object","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visOmopTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a summarised_result object into a gt, flextable or tibble object — visOmopTable","text":"","code":"visOmopTable(   result,   formatEstimateName,   header,   split,   groupColumn = NULL,   type = \"gt\",   renameColumns = NULL,   showMinCellCount = TRUE,   minCellCount = lifecycle::deprecated(),   hide = c(\"result_id\", \"estimate_type\"),   .options = list() )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visOmopTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a summarised_result object into a gt, flextable or tibble object — visOmopTable","text":"result summarised_result. formatEstimateName Named list estimate name's join, sorted computation order. Indicate estimate_name's <...>. header vector containing elements go header order (cdm_name, group, strata, additional, variable, estimate, settings). split vector containing name-level groups split (\"group\", \"strata\", \"additional\"), empty character vector split. groupColumn Columns use group labels. default name new group column names separated \"_\". specify new grouping name enter named list : list(newGroupName = c(\"variable_name\", \"variable_level\")) type Type desired formatted table, possibilities: \"gt\", \"flextable\", \"tibble\". renameColumns Named vector customise column names, instance: c(\"Database name\" = \"cdm_name\")). default column names transformed sentence case. showMinCellCount TRUE, suppressed estimates indicated \"<{minCellCount}\", otherwise default na defined .options used. minCellCount Suppression estimates counts < minCellCount done ompogenerics::suppress(). hide Columns drop output table. .options Named list additional formatting options. visOmopResults::optionsVisOmopTable() shows allowed arguments default values.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visOmopTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a summarised_result object into a gt, flextable or tibble object — visOmopTable","text":"tibble, gt, flextable object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visOmopTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a summarised_result object into a gt, flextable or tibble object — visOmopTable","text":"","code":"mockSummarisedResult() |> visOmopTable(   formatEstimateName = c(\"N%\" = \"<count> (<percentage>)\",                          \"N\" = \"<count>\",                          \"Mean (SD)\" = \"<mean> (<sd>)\"),   header = c(\"group\"),   split = c(\"group\",\"strata\",  \"additional\") ) #> ! Results have not been suppressed.     CDM name       Age group       Sex       Variable name       Variable level       Estimate name                Cohort name            Cohort1       Cohort2     mock Overall Overall Number subjects - N 2,463,778 3,634,426 <40 Male Number subjects - N 3,757,580 6,686,055 >=40 Male Number subjects - N 1,368,529 7,204,168 <40 Female Number subjects - N 986,021 5,419,602 >=40 Female Number subjects - N 6,423,973 3,933,305 Overall Male Number subjects - N 8,174,897 3,998,490  Female Number subjects - N 1,567,231 2,749,445 <40 Overall Number subjects - N 5,118,733 1,644,105 >=40 Overall Number subjects - N 7,105,515 8,670,615 Overall Overall Age - Mean (SD) 65.33 (6.54) 7.86 (4.54) <40 Male Age - Mean (SD) 39.22 (6.09) 73.13 (1.25) >=40 Male Age - Mean (SD) 84.49 (6.28) 17.59 (9.18) <40 Female Age - Mean (SD) 88.51 (3.45) 89.05 (3.93) >=40 Female Age - Mean (SD) 73.61 (0.72) 92.42 (0.70) Overall Male Age - Mean (SD) 64.33 (6.00) 56.26 (6.76)  Female Age - Mean (SD) 31.44 (2.12) 92.58 (4.66) <40 Overall Age - Mean (SD) 22.75 (1.04) 92.02 (4.93) >=40 Overall Age - Mean (SD) 6.35 (6.81) 15.20 (7.08) Overall Overall Medications Amoxiciline N% 29,405 (68.63) 3,969 (8.16) <40 Male Medications Amoxiciline N% 20,595 (80.69) 10,504 (84.46) >=40 Male Medications Amoxiciline N% 80,943 (82.04) 34,921 (45.10) <40 Female Medications Amoxiciline N% 70,153 (60.69) 15,005 (85.40) >=40 Female Medications Amoxiciline N% 77,060 (16.22) 77,466 (95.12) Overall Male Medications Amoxiciline N% 41,081 (73.67) 48,826 (47.15)  Female Medications Amoxiciline N% 43,455 (6.80) 73,696 (27.82) <40 Overall Medications Amoxiciline N% 56,295 (78.39) 39,168 (82.96) >=40 Overall Medications Amoxiciline N% 22,634 (79.38) 63,896 (76.58) Overall Overall Medications Ibuprofen N% 35,048 (29.89) 39,478 (67.60) <40 Male Medications Ibuprofen N% 14,800 (60.58) 36,579 (70.03) >=40 Male Medications Ibuprofen N% 33,806 (68.42) 73,651 (59.73) <40 Female Medications Ibuprofen N% 95,087 (70.11) 64,000 (21.30) >=40 Female Medications Ibuprofen N% 31,908 (92.18) 43,092 (62.89) Overall Male Medications Ibuprofen N% 13,645 (75.40) 51,922 (59.68)  Female Medications Ibuprofen N% 4,550 (46.81) 34,744 (61.72) <40 Overall Medications Ibuprofen N% 30,289 (79.74) 87,080 (21.79) >=40 Overall Medications Ibuprofen N% 17,220 (34.67) 36,884 (31.01)"}]
