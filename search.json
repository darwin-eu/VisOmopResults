[{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://darwin-eu.github.io/visOmopResults/articles/formatFunctions.html","id":"formatting-functions-in-a-pipeline","dir":"Articles","previous_headings":"","what":"Formatting functions in a pipeline","title":"format functions","text":"First, load relevant libraries generate summarised_result mock results.","code":"library(visOmopResults) library(dplyr) mock_sr <- mockSummarisedResult() mock_sr |> glimpse() #> Rows: 126 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ cdm_name         <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock… #> $ group_name       <chr> \"cohort_name\", \"cohort_name\", \"cohort_name\", \"cohort_… #> $ group_level      <chr> \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\"… #> $ strata_name      <chr> \"overall\", \"age_group &&& sex\", \"age_group &&& sex\", … #> $ strata_level     <chr> \"overall\", \"<40 &&& Male\", \">=40 &&& Male\", \"<40 &&& … #> $ variable_name    <chr> \"number subjects\", \"number subjects\", \"number subject… #> $ variable_level   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ estimate_name    <chr> \"count\", \"count\", \"count\", \"count\", \"count\", \"count\",… #> $ estimate_type    <chr> \"integer\", \"integer\", \"integer\", \"integer\", \"integer\"… #> $ estimate_value   <chr> \"807501\", \"8343330\", \"6007609\", \"1572084\", \"73994\", \"… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"…"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/formatFunctions.html","id":"formatestimatevalue","dir":"Articles","previous_headings":"Formatting functions in a pipeline","what":"1. formatEstimateValue()","title":"format functions","text":"function provides tools format estimate_value column: choose number decimals display estimate_type estimate_name (decimals), change change decimal thousand/million separator mark (decimalMark bigMark respectively) default, decimals integer values set 0, numeric 2, percentage 1, proportion 3. defaulted decimal mark “.” thousand/million separator “,”. want number decimals estimates, instead named vector decimal argument can numeric pointing number decimals.","code":"mock_sr <- mock_sr |> formatEstimateValue() mock_sr |> glimpse() #> Rows: 126 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ cdm_name         <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock… #> $ group_name       <chr> \"cohort_name\", \"cohort_name\", \"cohort_name\", \"cohort_… #> $ group_level      <chr> \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\"… #> $ strata_name      <chr> \"overall\", \"age_group &&& sex\", \"age_group &&& sex\", … #> $ strata_level     <chr> \"overall\", \"<40 &&& Male\", \">=40 &&& Male\", \"<40 &&& … #> $ variable_name    <chr> \"number subjects\", \"number subjects\", \"number subject… #> $ variable_level   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ estimate_name    <chr> \"count\", \"count\", \"count\", \"count\", \"count\", \"count\",… #> $ estimate_type    <chr> \"integer\", \"integer\", \"integer\", \"integer\", \"integer\"… #> $ estimate_value   <chr> \"807,501\", \"8,343,330\", \"6,007,609\", \"1,572,084\", \"73… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"…"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/formatFunctions.html","id":"formatestimatename","dir":"Articles","previous_headings":"Formatting functions in a pipeline","what":"2. formatEstimateName()","title":"format functions","text":"can customise estimate display changing estimate name joining different estimates row. instance, can display counts percentages together “N (%)”. estimateNameFormat combinations can specified. Values estimate_name’s column specified <…>. new estimate_name names vector, value named. Additional input arguments keepNotFormatted specify whether formatted rows returned dropped. useFormatOrder TRUE, estimates presented order given estimateNameFormat, FALSE, original order kept (one estimate, new position first estimates merged).","code":"mock_sr <- mock_sr |>    formatEstimateName(     estimateNameFormat = c(       \"N (%)\" = \"<count> (<percentage>%)\",        \"N\" = \"<count>\",       \"Mean (SD)\" = \"<mean> (<sd>)\"     ),     keepNotFormatted = FALSE,     useFormatOrder = FALSE   ) mock_sr |> glimpse() #> Rows: 72 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ cdm_name         <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock… #> $ group_name       <chr> \"cohort_name\", \"cohort_name\", \"cohort_name\", \"cohort_… #> $ group_level      <chr> \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\"… #> $ strata_name      <chr> \"overall\", \"age_group &&& sex\", \"age_group &&& sex\", … #> $ strata_level     <chr> \"overall\", \"<40 &&& Male\", \">=40 &&& Male\", \"<40 &&& … #> $ variable_name    <chr> \"number subjects\", \"number subjects\", \"number subject… #> $ variable_level   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ estimate_name    <chr> \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\"… #> $ estimate_type    <chr> \"character\", \"character\", \"character\", \"character\", \"… #> $ estimate_value   <chr> \"807,501\", \"8,343,330\", \"6,007,609\", \"1,572,084\", \"73… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"…"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/formatFunctions.html","id":"formatheader","dir":"Articles","previous_headings":"Formatting functions in a pipeline","what":"3. formatHeader()","title":"format functions","text":"function helps create nice header flextable gt table. instance, instead column specifying group name level, might one header. Header keys: 3 different types headers, identified keys “header”, “header_name”, “header_level”. header: Header labels passed header part input table (columns names values). header_name: Header labels come column names input table. header_level: Header labels come values selected columns input table. instance, might want pivot “group_level” upper header called “Names cohorts”. proceed follows: label keys can removed includeHeaderKey set FALSE. However, keys header allow style separately different header types next step (fxTable gtTable). wish remove header pointing column name (group_level), can set includeHeaderName FALSE. Continuing example, want pivot strata (name level), , want column names (, strata_name strata_level) appear header: Notice, substitute keyWord “&&&” “”, get nice header.","code":"mock_sr |>   formatHeader(     header = c(\"Names of the cohorts\", \"group_level\"),     delim = \"\\n\",     includeHeaderName = TRUE,     includeHeaderKey = TRUE   ) |>   glimpse() #> Rows: 36 #> Columns: 13 #> $ result_id                                                                       <int> … #> $ cdm_name                                                                        <chr> … #> $ group_name                                                                      <chr> … #> $ strata_name                                                                     <chr> … #> $ strata_level                                                                    <chr> … #> $ variable_name                                                                   <chr> … #> $ variable_level                                                                  <chr> … #> $ estimate_name                                                                   <chr> … #> $ estimate_type                                                                   <chr> … #> $ additional_name                                                                 <chr> … #> $ additional_level                                                                <chr> … #> $ `[header]Names of the cohorts\\n[header_name]group_level\\n[header_level]cohort1` <chr> … #> $ `[header]Names of the cohorts\\n[header_name]group_level\\n[header_level]cohort2` <chr> … mock_sr <- mock_sr |>   mutate(across(c(\"strata_name\", \"strata_level\"), ~ gsub(\"&&&\", \"and\", .x))) |>   formatHeader(     header = c(\"Stratifications\", \"strata_name\", \"strata_level\"),     delim = \"\\n\",     includeHeaderName = FALSE,     includeHeaderKey = TRUE   )   mock_sr |> glimpse() #> Rows: 8 #> Columns: 19 #> $ result_id                                                                                 <int> … #> $ cdm_name                                                                                  <chr> … #> $ group_name                                                                                <chr> … #> $ group_level                                                                               <chr> … #> $ variable_name                                                                             <chr> … #> $ variable_level                                                                            <chr> … #> $ estimate_name                                                                             <chr> … #> $ estimate_type                                                                             <chr> … #> $ additional_name                                                                           <chr> … #> $ additional_level                                                                          <chr> … #> $ `[header]Stratifications\\n[header_level]overall\\n[header_level]overall`                   <chr> … #> $ `[header]Stratifications\\n[header_level]age_group and sex\\n[header_level]<40 and Male`    <chr> … #> $ `[header]Stratifications\\n[header_level]age_group and sex\\n[header_level]>=40 and Male`   <chr> … #> $ `[header]Stratifications\\n[header_level]age_group and sex\\n[header_level]<40 and Female`  <chr> … #> $ `[header]Stratifications\\n[header_level]age_group and sex\\n[header_level]>=40 and Female` <chr> … #> $ `[header]Stratifications\\n[header_level]sex\\n[header_level]Male`                          <chr> … #> $ `[header]Stratifications\\n[header_level]sex\\n[header_level]Female`                        <chr> … #> $ `[header]Stratifications\\n[header_level]age_group\\n[header_level]<40`                     <chr> … #> $ `[header]Stratifications\\n[header_level]age_group\\n[header_level]>=40`                    <chr> …"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/formatFunctions.html","id":"gttable-and-fxtable","dir":"Articles","previous_headings":"Formatting functions in a pipeline","what":"4. gtTable() and fxTable()","title":"format functions","text":"Finally, functions gtTable fxTable transform tibble gt flextable object respectively. functions provide several tools personalise formatted table.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/formatFunctions.html","id":"gttable","dir":"Articles","previous_headings":"Formatting functions in a pipeline > 4. gtTable() and fxTable()","what":"gtTable()","title":"format functions","text":"Let’s start manipulating dataframe columns want display, use gtTable default values: Now, want group results “cohort_name”. specifically want row name cohort results cohort, cohort1 comes cohort2. Additionally, want merge rows contain information columns. get table use gtTable follows: might also want modify default style table. instance, might want highlight cohort_name labels blue background, body text red, use combination orange yellow header. can style argument:","code":"# first we select the columns we want: mock_sr <- mock_sr |>   splitGroup() |>   select(!all_of(c(     \"cdm_name\", \"estimate_type\", \"result_id\",\"additional_name\",      \"additional_level\"   )))  mock_sr |>  gtTable() mock_sr |>     gtTable(     groupColumn = \"cohort_name\",     groupAsColumn = FALSE,     groupOrder = c(\"cohort1\", \"cohort2\"),     colsToMergeRows = \"all_columns\"   ) mock_sr |>     gtTable(     style = list(       \"header\" = list(gt::cell_text(weight = \"bold\"),                        gt::cell_fill(color = \"orange\")),       \"header_level\" = list(gt::cell_text(weight = \"bold\"),                        gt::cell_fill(color = \"yellow\")),       \"column_name\" = gt::cell_text(weight = \"bold\"),       \"group_label\" = list(gt::cell_fill(color = \"blue\"),                            gt::cell_text(color = \"white\", weight = \"bold\")),       \"body\" = gt::cell_text(color = \"red\")     ),     groupColumn = \"cohort_name\",     groupAsColumn = FALSE,     groupOrder = c(\"cohort1\", \"cohort2\"),     colsToMergeRows = \"all_columns\"   )"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/formatFunctions.html","id":"fxtable","dir":"Articles","previous_headings":"Formatting functions in a pipeline > 4. gtTable() and fxTable()","what":"fxTable()","title":"format functions","text":"obtain similar result flextable object, can use fxTable arguments , however, style must adapted use officer package since accepted flextable. cohort_name variable_name variable_level estimate_name Stratifications overall age_group sex sex age_group overall <40 Male >=40 Male <40 Female >=40 Female Male Female <40 >=40 cohort1   number subjects - N 807,501 8,343,330 6,007,609 1,572,084 73,994 4,663,935 4,977,774 2,897,672 7,328,820  age - Mean (SD) 38.87 (7.06) 97.55 (9.49) 28.99 (1.80) 67.84 (2.17) 73.53 (6.80) 19.60 (4.99) 98.05 (6.42) 74.15 (6.60) 5.14 (0.96)  Medications Amoxiciline N (%) 49,364 (2.8%) 77,931 (46.6%) 20,418 (39.0%) 71,340 (2.0%) 6,522 (37.7%) 35,421 (56.0%) 82,520 (85.7%) 27,382 (38.5%) 57,004 (52.8%)   Ibuprofen N (%) 99,707 (51.2%) 14,904 (83.6%) 51,856 (70.9%) 84,612 (87.4%) 71,827 (1.1%) 24,131 (88.8%) 54,704 (99.6%) 83,480 (50.0%) 2,796 (35.9%) cohort2   number subjects - N 7,725,215 8,746,007 1,749,406 342,413 3,203,857 4,023,282 1,956,698 4,035,381 636,615  age - Mean (SD) 53.02 (7.66) 69.58 (7.70) 68.86 (9.91) 3.12 (9.71) 22.56 (3.89) 30.08 (4.61) 63.65 (3.15) 47.90 (1.75) 43.22 (5.32)  Medications Amoxiciline N (%) 33,572 (60.1%) 59,626 (26.1%) 19,152 (29.0%) 94,776 (48.0%) 54,248 (92.0%) 54,460 (40.1%) 27,860 (21.3%) 44,670 (67.2%) 37,151 (5.9%)   Ibuprofen N (%) 46,938 (77.5%) 80,568 (58.4%) 81,405 (63.4%) 40,391 (85.9%) 21,843 (56.7%) 41,836 (25.3%) 66,887 (91.9%) 50,765 (86.7%) 66,036 (24.9%)","code":"mock_sr |>     fxTable(     style = list(       \"header\" = list(         \"cell\" = officer::fp_cell(background.color = \"orange\"),         \"text\" = officer::fp_text(bold = TRUE)),       \"header_level\" = list(         \"cell\" = officer::fp_cell(background.color = \"yellow\"),         \"text\" = officer::fp_text(bold = TRUE)),       \"column_name\" = list(\"text\" = officer::fp_text(bold = TRUE)),       \"group_label\" = list(         \"cell\" = officer::fp_cell(background.color = \"blue\"),         \"text\" = officer::fp_text(bold = TRUE, color = \"white\")),       \"body\" = list(\"text\" = officer::fp_text(color = \"red\"))     ),     groupColumn = \"cohort_name\",     groupAsColumn = FALSE,     groupOrder = c(\"cohort1\", \"cohort2\"),     colsToMergeRows = \"all_columns\"   )"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/formatFunctions.html","id":"visomoptable-all-at-once","dir":"Articles","previous_headings":"","what":"visOmopTable(): all at once","title":"format functions","text":"function wraps tools seen far format summarised result . convenient one function, level table manipulation allowed less pipeline. First, create new mock summarised result: instance, want flextable strata header, write “strata” header instead strata_name strata_level. , can input header keys (e.g. “Stratifications” example ). split argument points name-level columns split (group, strata /additional). Refer vignette split unite information functionality. default, returns gt table, can changed “flextable” “tibble” type argument. groupColumn can used create groups table body. instance, looking previous table, might want group cohort name: Additional options can specified .options argument. options taken format functions gt/fx table functions seen . see list allowed arguments default values use optionsTable():","code":"mock_sr2 <- mockSummarisedResult() mock_sr2 |> visOmopTable(   formatEstimateName = c(\"N%\" = \"<count> (<percentage>)\",                          \"N\" = \"<count>\",                          \"Mean (SD)\" = \"<mean> (<sd>)\"),   header = c(\"Stratifications\", \"strata\") ) mock_sr2 |> visOmopTable(   formatEstimateName = c(\"N%\" = \"<count> (<percentage>)\",                          \"N\" = \"<count>\",                          \"Mean (SD)\" = \"<mean> (<sd>)\"),   header = c(\"Stratifications\", \"strata\"),   split = c(\"group\",\"additional\"),   groupColumn = \"cohort_name\" ) optionsTable() #> $decimals #>    integer percentage    numeric proportion  #>          0          2          2          2  #>  #> $decimalMark #> [1] \".\" #>  #> $bigMark #> [1] \",\" #>  #> $keepNotFormatted #> [1] TRUE #>  #> $useFormatOrder #> [1] TRUE #>  #> $delim #> [1] \"\\n\" #>  #> $includeHeaderName #> [1] TRUE #>  #> $includeHeaderKey #> [1] TRUE #>  #> $style #> [1] \"default\" #>  #> $na #> [1] \"-\" #>  #> $title #> NULL #>  #> $subtitle #> NULL #>  #> $caption #> NULL #>  #> $groupAsColumn #> [1] FALSE #>  #> $groupOrder #> NULL #>  #> $colsToMergeRows #> [1] \"all_columns\""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/plots.html","id":"plotting-with-a","dir":"Articles","previous_headings":"","what":"Plotting with a","title":"Plotting tools","text":"purpose vignette turn summarise dataset penguins palmerpenguins package using PatientProfiles::summariseResult()","code":"library(PatientProfiles) library(palmerpenguins) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  summariseIsland <- function(island) {   penguins |>     filter(.data$island == .env$island) |>     summariseResult(       group = \"species\",       includeOverallGroup = TRUE,       strata = list(\"year\", \"sex\", c(\"year\", \"sex\")),       variables = c(         \"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\",          \"sex\"),       estimates = c(         \"median\", \"q25\", \"q75\", \"min\", \"max\", \"count_missing\", \"count\",          \"percentage\", \"density\")     ) |>     suppressMessages() |>     mutate(cdm_name = island) }  penguinsSummary <- bind(   summariseIsland(\"Torgersen\"),    summariseIsland(\"Biscoe\"),    summariseIsland(\"Dream\") )"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/plots.html","id":"plotting-principles","dir":"Articles","previous_headings":"Plotting with a","what":"Plotting principles","title":"Plotting tools","text":"Although input visOmopResult plot function can  referring inputs, use columns shown tidy format: column names seen  format: ’s important thing aware , otherwise populating arguments becomes bit tricky. always subset  variable_name interest calling plotting functions. advised combine results different variables don’t share common estimates want plot tidy form NAs created.","code":"tidyColumns(penguinsSummary) #>  [1] \"cdm_name\"        \"species\"         \"year\"            \"sex\"             #>  [5] \"variable_name\"   \"variable_level\"  \"count\"           \"median\"          #>  [9] \"q25\"             \"q75\"             \"min\"             \"max\"             #> [13] \"count_missing\"   \"density_x\"       \"density_y\"       \"percentage\"      #> [17] \"result_type\"     \"package_name\"    \"package_version\" colnames(penguinsSummary) #>  [1] \"result_id\"        \"cdm_name\"         \"group_name\"       \"group_level\"      #>  [5] \"strata_name\"      \"strata_level\"     \"variable_name\"    \"variable_level\"   #>  [9] \"estimate_name\"    \"estimate_type\"    \"estimate_value\"   \"additional_name\"  #> [13] \"additional_level\""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/plots.html","id":"scatter-plot","dir":"Articles","previous_headings":"Plotting with a","what":"Scatter plot","title":"Plotting tools","text":"can create simple scatter plots using plotScatter() let’s see examples:","code":"penguinsSummary |>   filter(variable_name == \"bill_depth_mm\") |>   filterStrata(year != \"overall\", sex == \"overall\") |>   scatterPlot(     x = \"year\",      y = \"median\",     line = TRUE,      point = TRUE,     ribbon = FALSE,     facet = \"cdm_name\",     colour = \"species\"   ) penguinsSummary |>   filter(variable_name %in% c(\"bill_length_mm\", \"bill_depth_mm\"))|>   filterStrata(year == \"overall\", sex == \"overall\") |>   filterGroup(species != \"overall\") |>   scatterPlot(     x = \"density_x\",      y = \"density_y\",     line = TRUE,      point = FALSE,     ribbon = FALSE,     facet = cdm_name ~ variable_name,     colour = \"species\"   ) +   ggplot2::facet_grid(cdm_name ~ variable_name, scales = \"free_x\") penguinsSummary |>   filter(variable_name == \"flipper_length_mm\") |>   filterStrata(year != \"overall\", sex %in% c(\"female\", \"male\")) |>   scatterPlot(     x = c(\"year\", \"sex\"),      y = \"median\",     ymin = \"q25\",     ymax = \"q75\",     line = FALSE,      point = TRUE,     ribbon = FALSE,     facet = cdm_name ~ species,     colour = \"sex\",     group = c(\"year\", \"sex\")   ) +   ggplot2::coord_flip() +   ggplot2::labs(y = \"Flipper length (mm)\") penguinsSummary |>   filter(variable_name %in% c(     \"flipper_length_mm\", \"bill_length_mm\", \"bill_depth_mm\")) |>   filterStrata(sex == \"overall\") |>   scatterPlot(     x = \"year\",      y = \"median\",     ymin = \"min\",     ymax = \"max\",     line = FALSE,      point = TRUE,     ribbon = TRUE,     facet = cdm_name ~ species,     colour = \"variable_name\",     group = c(\"variable_name\")   )"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/plots.html","id":"bar-plot","dir":"Articles","previous_headings":"Plotting with a","what":"Bar plot","title":"Plotting tools","text":"Let’s create simple bar plots:","code":"penguinsSummary |>   filter(variable_name == \"number records\") |>   filterGroup(species != \"overall\") |>   filterStrata(sex != \"overall\", year != \"overall\") |>   barPlot(     x = \"year\",     y = \"count\",     colour = \"sex\",     facet = cdm_name ~ species   )"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/plots.html","id":"box-plot","dir":"Articles","previous_headings":"Plotting with a","what":"Box plot","title":"Plotting tools","text":"Let’s create box plots body mass:  can specify want facet using formula:  Arguments ~ specify rows, arguments columns, see another example faceting also sex columns. case colouring year:  Note didnt specify x levels x axis, box plots produced anyway.","code":"penguinsSummary |>   filter(variable_name == \"body_mass_g\") |>   boxPlot(x = \"year\", facet = c(\"cdm_name\", \"species\"), colour = \"sex\") penguinsSummary |>   filter(variable_name == \"body_mass_g\") |>   boxPlot(x = \"year\", facet = cdm_name ~ species, colour = \"sex\") penguinsSummary |>   filter(variable_name == \"body_mass_g\") |>   filterGroup(species != \"overall\") |>   filterStrata(sex %in% c(\"female\", \"male\"), year != \"overall\") |>   boxPlot(facet = cdm_name ~ species + sex, colour = \"year\")"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/plots.html","id":"plotting-with-a-data-frame","dir":"Articles","previous_headings":"","what":"Plotting with a <data.frame>","title":"Plotting tools","text":"Plotting functions can also used normal <data.frame>. case use tidy format penguinsSummary. can seen normal data.frame: can custom plotting, example replicating last plot tidy format:","code":"penguinsTidy <- penguinsSummary |>   filter(!estimate_name %in% c(\"density_x\", \"density_y\")) |> # remove density for simplicity   tidy() penguinsTidy |> glimpse() #> Rows: 720 #> Columns: 17 #> $ cdm_name        <chr> \"Torgersen\", \"Torgersen\", \"Torgersen\", \"Torgersen\", \"T… #> $ species         <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\",… #> $ year            <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\",… #> $ sex             <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\",… #> $ variable_name   <chr> \"number records\", \"bill_length_mm\", \"bill_depth_mm\", \"… #> $ variable_level  <chr> NA, NA, NA, NA, NA, \"female\", \"male\", NA, NA, NA, NA, … #> $ count           <int> 52, NA, NA, NA, NA, 24, 23, 5, 20, 16, 16, NA, NA, NA,… #> $ median          <int> NA, 38, 18, 191, 3700, NA, NA, NA, NA, NA, NA, 38, 38,… #> $ q25             <int> NA, 36, 17, 187, 3338, NA, NA, NA, NA, NA, NA, 37, 35,… #> $ q75             <int> NA, 41, 19, 195, 4000, NA, NA, NA, NA, NA, NA, 39, 41,… #> $ min             <int> NA, 33, 15, 176, 2900, NA, NA, NA, NA, NA, NA, 34, 33,… #> $ max             <int> NA, 46, 21, 210, 4700, NA, NA, NA, NA, NA, NA, 46, 45,… #> $ count_missing   <int> NA, 1, 1, 1, 1, NA, NA, NA, NA, NA, NA, 1, 0, 0, 1, 0,… #> $ percentage      <dbl> NA, NA, NA, NA, NA, 46.153846, 44.230769, 9.615385, NA… #> $ result_type     <chr> \"summarise_table\", \"summarise_table\", \"summarise_table… #> $ package_name    <chr> \"PatientProfiles\", \"PatientProfiles\", \"PatientProfiles… #> $ package_version <chr> \"1.2.0\", \"1.2.0\", \"1.2.0\", \"1.2.0\", \"1.2.0\", \"1.2.0\", … penguinsTidy |> class() #> [1] \"tbl_df\"     \"tbl\"        \"data.frame\" penguinsTidy |>   filter(     variable_name == \"body_mass_g\",     species != \"overall\",     sex %in% c(\"female\", \"male\"),     year != \"overall\"   ) |>   boxPlot(facet = cdm_name ~ species + sex, colour = \"year\")"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/plots.html","id":"custom-plotting","dir":"Articles","previous_headings":"","what":"Custom plotting","title":"Plotting tools","text":"tidy format useful apply custom ggplot2 function may interested :","code":"library(ggplot2) penguinsSummary |>   filter(variable_name == \"number records\") |>   tidy() |>   ggplot(aes(x = year, y = sex, fill = count, label = count)) +   geom_tile() +   scale_fill_viridis_c(trans = \"log\") +    geom_text() +   facet_grid(cdm_name ~ species)"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/plots.html","id":"combine-with-ggplot2","dir":"Articles","previous_headings":"","what":"Combine with ggplot2","title":"Plotting tools","text":"plotting functions wrapper around ggplot2 package, outputs plotting functions can later customised ggplot2 similar tools. example can use ggplot2::labs() change labels ggplot2::theme() move location legend.  can also use ggplot2::ggsave() later save one plots ‘.png’ file.","code":"penguinsSummary |>   filter(     group_level != \"overall\",     strata_name == \"year &&& sex\",     !grepl(\"NA\", strata_level),     variable_name == \"body_mass_g\") |>   boxPlot(facet = cdm_name ~ species + sex, colour = \"year\") +   ylim(c(0, 6500)) +   labs(x = \"My custom x label\") +   theme(legend.position = \"top\") ggsave(   \"figure8.png\", plot = last_plot(), device = \"png\", width = 15, height = 12,    units = \"cm\", dpi = 300)"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/plots.html","id":"combine-with-plotly","dir":"Articles","previous_headings":"","what":"Combine with plotly","title":"Plotting tools","text":"Although package currently provide plotly functionality ggplots can easily converted <plotly> ones using function plotly::ggplotly(). can make interactivity plots better.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/splitAndUnite.html","id":"summarised_result","dir":"Articles","previous_headings":"","what":"summarised_result","title":"split and unite functions","text":"First, let’s load relevant libraries generate mock summarised_result object use following examples. summarised_result contains 3 types name-level paired columns targeted set unite split functions. group columns typically can contain information cohorts, strata columns data stratification group, finally additional columns include information covered group strata.","code":"library(visOmopResults) library(dplyr) mock_sr <- mockSummarisedResult() mock_sr |> glimpse() #> Rows: 126 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ cdm_name         <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock… #> $ group_name       <chr> \"cohort_name\", \"cohort_name\", \"cohort_name\", \"cohort_… #> $ group_level      <chr> \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\"… #> $ strata_name      <chr> \"overall\", \"age_group &&& sex\", \"age_group &&& sex\", … #> $ strata_level     <chr> \"overall\", \"<40 &&& Male\", \">=40 &&& Male\", \"<40 &&& … #> $ variable_name    <chr> \"number subjects\", \"number subjects\", \"number subject… #> $ variable_level   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ estimate_name    <chr> \"count\", \"count\", \"count\", \"count\", \"count\", \"count\",… #> $ estimate_type    <chr> \"integer\", \"integer\", \"integer\", \"integer\", \"integer\"… #> $ estimate_value   <chr> \"807501\", \"8343330\", \"6007609\", \"1572084\", \"73994\", \"… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"…"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/splitAndUnite.html","id":"split-functions","dir":"Articles","previous_headings":"","what":"Split functions","title":"split and unite functions","text":"idea split functions pivot “name” (e.g. group_name) column split value column column dataframe, values taken “level” (e.g. group_level) column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/splitAndUnite.html","id":"splitgroup-splitstrata-and-splitadditional","dir":"Articles","previous_headings":"Split functions","what":"splitGroup(), splitStrata(), and splitAdditional()","title":"split and unite functions","text":"instance, splitGroup function target group_name-group_level columns seen . Similar splitStrata, functions splitGroup split group_name group_level columns, splitAdditional split additional name-level pair. Finally, function splitAll split group, strata, additional . Note using splitStrata summarised_result object, longer strata_name-strata_level pair, instead two new columns corresponding stratifications, age_group sex.","code":"mock_sr |> splitGroup() |> glimpse() #> Rows: 126 #> Columns: 12 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ cdm_name         <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock… #> $ cohort_name      <chr> \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\"… #> $ strata_name      <chr> \"overall\", \"age_group &&& sex\", \"age_group &&& sex\", … #> $ strata_level     <chr> \"overall\", \"<40 &&& Male\", \">=40 &&& Male\", \"<40 &&& … #> $ variable_name    <chr> \"number subjects\", \"number subjects\", \"number subject… #> $ variable_level   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ estimate_name    <chr> \"count\", \"count\", \"count\", \"count\", \"count\", \"count\",… #> $ estimate_type    <chr> \"integer\", \"integer\", \"integer\", \"integer\", \"integer\"… #> $ estimate_value   <chr> \"807501\", \"8343330\", \"6007609\", \"1572084\", \"73994\", \"… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… mock_sr |> splitStrata() |> glimpse() #> Rows: 126 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ cdm_name         <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock… #> $ group_name       <chr> \"cohort_name\", \"cohort_name\", \"cohort_name\", \"cohort_… #> $ group_level      <chr> \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\"… #> $ age_group        <chr> \"overall\", \"<40\", \">=40\", \"<40\", \">=40\", \"overall\", \"… #> $ sex              <chr> \"overall\", \"Male\", \"Male\", \"Female\", \"Female\", \"Male\"… #> $ variable_name    <chr> \"number subjects\", \"number subjects\", \"number subject… #> $ variable_level   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ estimate_name    <chr> \"count\", \"count\", \"count\", \"count\", \"count\", \"count\",… #> $ estimate_type    <chr> \"integer\", \"integer\", \"integer\", \"integer\", \"integer\"… #> $ estimate_value   <chr> \"807501\", \"8343330\", \"6007609\", \"1572084\", \"73994\", \"… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… mock_sr |> splitAdditional() |> glimpse() #> Rows: 126 #> Columns: 11 #> $ result_id      <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… #> $ cdm_name       <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\",… #> $ group_name     <chr> \"cohort_name\", \"cohort_name\", \"cohort_name\", \"cohort_na… #> $ group_level    <chr> \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", … #> $ strata_name    <chr> \"overall\", \"age_group &&& sex\", \"age_group &&& sex\", \"a… #> $ strata_level   <chr> \"overall\", \"<40 &&& Male\", \">=40 &&& Male\", \"<40 &&& Fe… #> $ variable_name  <chr> \"number subjects\", \"number subjects\", \"number subjects\"… #> $ variable_level <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ estimate_name  <chr> \"count\", \"count\", \"count\", \"count\", \"count\", \"count\", \"… #> $ estimate_type  <chr> \"integer\", \"integer\", \"integer\", \"integer\", \"integer\", … #> $ estimate_value <chr> \"807501\", \"8343330\", \"6007609\", \"1572084\", \"73994\", \"46… mock_sr |> splitAll() |> glimpse() #> Rows: 126 #> Columns: 10 #> $ result_id      <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… #> $ cdm_name       <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\",… #> $ cohort_name    <chr> \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", … #> $ age_group      <chr> \"overall\", \"<40\", \">=40\", \"<40\", \">=40\", \"overall\", \"ov… #> $ sex            <chr> \"overall\", \"Male\", \"Male\", \"Female\", \"Female\", \"Male\", … #> $ variable_name  <chr> \"number subjects\", \"number subjects\", \"number subjects\"… #> $ variable_level <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… #> $ estimate_name  <chr> \"count\", \"count\", \"count\", \"count\", \"count\", \"count\", \"… #> $ estimate_type  <chr> \"integer\", \"integer\", \"integer\", \"integer\", \"integer\", … #> $ estimate_value <chr> \"807501\", \"8343330\", \"6007609\", \"1572084\", \"73994\", \"46…"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/splitAndUnite.html","id":"keyword","dir":"Articles","previous_headings":"Split functions > splitGroup(), splitStrata(), and splitAdditional()","what":"!! Keyword: &&&","title":"split and unite functions","text":"Looking results , observe splitting done values “name” column, also among values containing key word “&&&”. , “sex &&& age_group” splitted sex age_group columns, instead generating column called “sex &&& age_group”.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/splitAndUnite.html","id":"splitnamelevel","dir":"Articles","previous_headings":"Split functions","what":"splitNameLevel()","title":"split and unite functions","text":"function splitNameLevel provides tailored splitting dataframe. function can take dataframe restrictions naming name-level pair columns, since can specified name level arguments. instance let’s use following table: function splitNameLevel, additionally argument overall previously seen, argument keep set whether want keep columns splitting.","code":"data_to_split <- tibble(   denominator = \"general_population\",   outcome = \"stroke\",   input_arguments = c(\"wash_out &&& previous_observation\"),   input_arguments_values = c(\"60 &&& 180\") ) data_to_split  #> # A tibble: 1 × 4 #>   denominator        outcome input_arguments              input_arguments_values #>   <chr>              <chr>   <chr>                        <chr>                  #> 1 general_population stroke  wash_out &&& previous_obser… 60 &&& 180 data_to_split |>   splitNameLevel(     name = \"input_arguments\",     level = \"input_arguments_values\"   ) #> # A tibble: 1 × 4 #>   denominator        outcome wash_out previous_observation #>   <chr>              <chr>   <chr>    <chr>                #> 1 general_population stroke  60       180"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/splitAndUnite.html","id":"unite-functions","dir":"Articles","previous_headings":"","what":"Unite functions","title":"split and unite functions","text":"unite functions complementary split ones. meant generate name-level pair columns targeted columns within dataframe.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/articles/splitAndUnite.html","id":"unitegroup-unitestrata-and-uniteadditional","dir":"Articles","previous_headings":"Unite functions","what":"uniteGroup(), uniteStrata(), and uniteAdditional()","title":"split and unite functions","text":"work summarised_result objects, uniteGroup, uniteStrata, uniteAdditional functions generate group, strata, additional name-level columns respectively given set columns. instance, following example want create group_name group_level columns: part columns unite argument (cols), argument ignore, default: ignore = c(NA, \"overall\"). means , levels within ignore ignored. example case ignore obtain NA output: default (ignore = c(NA, \"overall\")) obtain output names levels non-NA values returned, rows values NA uses “overall”.","code":"to_unite_group <- tibble(   denominator_cohort_name = c(\"general_population\", \"older_than_60\", \"younger_than_60\"),   outcome_cohort_name = c(\"stroke\", \"stroke\", \"stroke\") )  to_unite_group |>   uniteGroup(cols = c(\"denominator_cohort_name\", \"outcome_cohort_name\")) #> # A tibble: 3 × 2 #>   group_name                                      group_level                   #>   <chr>                                           <chr>                         #> 1 denominator_cohort_name &&& outcome_cohort_name general_population &&& stroke #> 2 denominator_cohort_name &&& outcome_cohort_name older_than_60 &&& stroke      #> 3 denominator_cohort_name &&& outcome_cohort_name younger_than_60 &&& stroke to_unite_strata <- tibble(     age = c(NA, \">40\", \"<=40\", NA, NA, NA, NA, NA, \">40\", \"<=40\"),     sex = c(NA, NA, NA, \"F\", \"M\", NA, NA, NA, \"F\", \"M\"),     region = c(NA, NA, NA, NA, NA, \"North\", \"South\", \"Center\", NA, NA)   )  to_unite_strata |>   uniteStrata(cols = c(\"age\", \"sex\", \"region\"),               ignore = character()) #> # A tibble: 10 × 2 #>    strata_name            strata_level         #>    <chr>                  <chr>                #>  1 age &&& sex &&& region NA &&& NA &&& NA     #>  2 age &&& sex &&& region >40 &&& NA &&& NA    #>  3 age &&& sex &&& region <=40 &&& NA &&& NA   #>  4 age &&& sex &&& region NA &&& F &&& NA      #>  5 age &&& sex &&& region NA &&& M &&& NA      #>  6 age &&& sex &&& region NA &&& NA &&& North  #>  7 age &&& sex &&& region NA &&& NA &&& South  #>  8 age &&& sex &&& region NA &&& NA &&& Center #>  9 age &&& sex &&& region >40 &&& F &&& NA     #> 10 age &&& sex &&& region <=40 &&& M &&& NA to_unite_strata |>   uniteStrata(cols = c(\"age\", \"sex\", \"region\")) #> # A tibble: 10 × 2 #>    strata_name strata_level #>    <chr>       <chr>        #>  1 overall     overall      #>  2 age         >40          #>  3 age         <=40         #>  4 sex         F            #>  5 sex         M            #>  6 region      North        #>  7 region      South        #>  8 region      Center       #>  9 age &&& sex >40 &&& F    #> 10 age &&& sex <=40 &&& M"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/splitAndUnite.html","id":"unitenamelevel","dir":"Articles","previous_headings":"Unite functions","what":"uniteNameLevel()","title":"split and unite functions","text":"Lastly, function uniteNameLevel, idem splitNameLevel, provides flexibility name-level column naming, addition keep argument (FALSE default) choose whether keep targeted columns. instance, repeat previous example keep set TRUE obtain following output:","code":"to_unite_strata |>   uniteNameLevel(cols = c(\"age\", \"sex\", \"region\"),                  name = \"name\",                  level = \"level\",                  keep = TRUE) #> # A tibble: 10 × 5 #>    age   sex   region name        level      #>    <chr> <chr> <chr>  <chr>       <chr>      #>  1 NA    NA    NA     overall     overall    #>  2 >40   NA    NA     age         >40        #>  3 <=40  NA    NA     age         <=40       #>  4 NA    F     NA     sex         F          #>  5 NA    M     NA     sex         M          #>  6 NA    NA    North  region      North      #>  7 NA    NA    South  region      South      #>  8 NA    NA    Center region      Center     #>  9 >40   F     NA     age &&& sex >40 &&& F  #> 10 <=40  M     NA     age &&& sex <=40 &&& M"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tidy.html","id":"estimates","dir":"Articles","previous_headings":"","what":"Estimates","title":"tidy","text":"First, let’s load relevant libraries create mock summarised result table. function pivotEstimates adds columns containing estimates values combination columns pivotEstimatesBy. instance, following example use columns variable_name, variable_level, estimate_name pivot estimates. argument nameStyle customise names new columns. uses glue package syntax. instance:","code":"library(visOmopResults) library(dplyr) result <- mockSummarisedResult() result |> glimpse() #> Rows: 126 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ cdm_name         <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock… #> $ group_name       <chr> \"cohort_name\", \"cohort_name\", \"cohort_name\", \"cohort_… #> $ group_level      <chr> \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\"… #> $ strata_name      <chr> \"overall\", \"age_group &&& sex\", \"age_group &&& sex\", … #> $ strata_level     <chr> \"overall\", \"<40 &&& Male\", \">=40 &&& Male\", \"<40 &&& … #> $ variable_name    <chr> \"number subjects\", \"number subjects\", \"number subject… #> $ variable_level   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ estimate_name    <chr> \"count\", \"count\", \"count\", \"count\", \"count\", \"count\",… #> $ estimate_type    <chr> \"integer\", \"integer\", \"integer\", \"integer\", \"integer\"… #> $ estimate_value   <chr> \"807501\", \"8343330\", \"6007609\", \"1572084\", \"73994\", \"… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… result |>    pivotEstimates(pivotEstimatesBy = c(\"variable_name\", \"variable_level\", \"estimate_name\")) |>   glimpse() #> Rows: 18 #> Columns: 15 #> $ result_id                          <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ cdm_name                           <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mo… #> $ group_name                         <chr> \"cohort_name\", \"cohort_name\", \"coho… #> $ group_level                        <chr> \"cohort1\", \"cohort1\", \"cohort1\", \"c… #> $ strata_name                        <chr> \"overall\", \"age_group &&& sex\", \"ag… #> $ strata_level                       <chr> \"overall\", \"<40 &&& Male\", \">=40 &&… #> $ additional_name                    <chr> \"overall\", \"overall\", \"overall\", \"o… #> $ additional_level                   <chr> \"overall\", \"overall\", \"overall\", \"o… #> $ `number subjects_count`            <int> 807501, 8343330, 6007609, 1572084, … #> $ age_mean                           <dbl> 38.870131, 97.554784, 28.989230, 67… #> $ age_sd                             <dbl> 7.0643384, 9.4857658, 1.8033877, 2.… #> $ Medications_Amoxiciline_count      <int> 49364, 77931, 20418, 71340, 6522, 3… #> $ Medications_Amoxiciline_percentage <dbl> 2.806097, 46.598719, 39.003139, 2.0… #> $ Medications_Ibuprofen_count        <int> 99707, 14904, 51856, 84612, 71827, … #> $ Medications_Ibuprofen_percentage   <dbl> 51.179131, 83.555244, 70.878116, 87… result |>    pivotEstimates(pivotEstimatesBy = \"estimate_name\",                  nameStyle = \"{toupper(estimate_name)}\") |>   glimpse() #> Rows: 72 #> Columns: 14 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ cdm_name         <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock… #> $ group_name       <chr> \"cohort_name\", \"cohort_name\", \"cohort_name\", \"cohort_… #> $ group_level      <chr> \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\"… #> $ strata_name      <chr> \"overall\", \"age_group &&& sex\", \"age_group &&& sex\", … #> $ strata_level     <chr> \"overall\", \"<40 &&& Male\", \">=40 &&& Male\", \"<40 &&& … #> $ variable_name    <chr> \"number subjects\", \"number subjects\", \"number subject… #> $ variable_level   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ COUNT            <int> 807501, 8343330, 6007609, 1572084, 73994, 4663935, 49… #> $ MEAN             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ SD               <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ PERCENTAGE       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tidy.html","id":"settings","dir":"Articles","previous_headings":"","what":"Settings","title":"tidy","text":"function addSettings adds new column settings summarised result, :","code":"mockSummarisedResult() |>   addSettings() |>   glimpse() #> Rows: 126 #> Columns: 16 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ cdm_name         <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock… #> $ group_name       <chr> \"cohort_name\", \"cohort_name\", \"cohort_name\", \"cohort_… #> $ group_level      <chr> \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\"… #> $ strata_name      <chr> \"overall\", \"age_group &&& sex\", \"age_group &&& sex\", … #> $ strata_level     <chr> \"overall\", \"<40 &&& Male\", \">=40 &&& Male\", \"<40 &&& … #> $ variable_name    <chr> \"number subjects\", \"number subjects\", \"number subject… #> $ variable_level   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ estimate_name    <chr> \"count\", \"count\", \"count\", \"count\", \"count\", \"count\",… #> $ estimate_type    <chr> \"integer\", \"integer\", \"integer\", \"integer\", \"integer\"… #> $ estimate_value   <chr> \"4028812\", \"7696302\", \"1194854\", \"1946950\", \"1645692\"… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ result_type      <chr> \"mock_summarised_result\", \"mock_summarised_result\", \"… #> $ package_name     <chr> \"visOmopResults\", \"visOmopResults\", \"visOmopResults\",… #> $ package_version  <chr> \"0.3.0.900\", \"0.3.0.900\", \"0.3.0.900\", \"0.3.0.900\", \"…"},{"path":"https://darwin-eu.github.io/visOmopResults/articles/tidy.html","id":"tidy","dir":"Articles","previous_headings":"","what":"Tidy","title":"tidy","text":"Finally, method tidy incorporates splitting pf name-level columns pivotting estimates settings. default, splits group, strata additional, pivots estimates columns “estimate_name” also pivots settings. column pairs split can customised split arguments, pivotEstimatesBy nameStyle pivotting estimates. pivotEstimatesBy NULL character(), estimates modified. Settings always pivotted present.","code":"result <- mockSummarisedResult()  result |>    tidy() |>    glimpse() #> Rows: 72 #> Columns: 13 #> $ cdm_name        <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\"… #> $ cohort_name     <chr> \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\",… #> $ age_group       <chr> \"overall\", \"<40\", \">=40\", \"<40\", \">=40\", \"overall\", \"o… #> $ sex             <chr> \"overall\", \"Male\", \"Male\", \"Female\", \"Female\", \"Male\",… #> $ variable_name   <chr> \"number subjects\", \"number subjects\", \"number subjects… #> $ variable_level  <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ count           <int> 7269489, 6376856, 3964100, 9594826, 2986580, 502012, 5… #> $ mean            <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ sd              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ percentage      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… #> $ result_type     <chr> \"mock_summarised_result\", \"mock_summarised_result\", \"m… #> $ package_name    <chr> \"visOmopResults\", \"visOmopResults\", \"visOmopResults\", … #> $ package_version <chr> \"0.3.0.900\", \"0.3.0.900\", \"0.3.0.900\", \"0.3.0.900\", \"0…"},{"path":"https://darwin-eu.github.io/visOmopResults/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martí Català. Author. Núria Mercadé-Besora. Author, maintainer.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Català M, Mercadé-Besora N (2024). visOmopResults: Graphs Tables OMOP Results. R package version 0.3.0.900, https://darwin-eu.github.io/visOmopResults/.","code":"@Manual{,   title = {visOmopResults: Graphs and Tables for OMOP Results},   author = {Martí Català and Núria Mercadé-Besora},   year = {2024},   note = {R package version 0.3.0.900},   url = {https://darwin-eu.github.io/visOmopResults/}, }"},{"path":[]},{"path":"https://darwin-eu.github.io/visOmopResults/index.html","id":"package-overview","dir":"","previous_headings":"","what":"Package overview","title":"Graphs and Tables for OMOP Results","text":"visOmopResults contains functions formatting objects class summarised_result (see R package omopgenerics). package simplifies handling objects obtain nice output tables format gt flextable’ report results via Shiny apps, RMarkdown, Quarto, .","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Graphs and Tables for OMOP Results","text":"can install latest version visOmopResults CRAN: can install development version GitHub :","code":"install.packages(\"visOmopResults\") # install.packages(\"devtools\") devtools::install_github(\"darwin-eu/visOmopResults\")"},{"path":"https://darwin-eu.github.io/visOmopResults/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example usage","title":"Graphs and Tables for OMOP Results","text":"First, load package create summarised result object mock results can use function visOmopTable() get nice gt table:  code snipped showed, specified group display estimates formatEstimateName. Also, created header based stratifications header, split name-level paired columns group additional (refer “split unite functions” vignette information splitting).","code":"library(visOmopResults) result <- mockSummarisedResult() visOmopTable(   result,   formatEstimateName = c(\"N%\" = \"<count> (<percentage>)\",                          \"N\" = \"<count>\",                          \"Mean (SD)\" = \"<mean> (<sd>)\"),   header = c(\"Stratifications\", \"strata\"),   split = c(\"group\",\"additional\") )"},{"path":"https://darwin-eu.github.io/visOmopResults/index.html","id":"custom-formatting---example-usage","dir":"","previous_headings":"","what":"Custom formatting - Example usage","title":"Graphs and Tables for OMOP Results","text":"function visOmopTable() wrapped around functions package. can implemented pipeline additional customisation summarised_result.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/index.html","id":"id_1-formatestimatevalue","dir":"","previous_headings":"Custom formatting - Example usage","what":"1. formatEstimateValue()","title":"Graphs and Tables for OMOP Results","text":"utilize function modify estimate_value column. case, apply default settings function, include using 0 decimals integer values, 2 decimals numeric values, 1 decimal percentages, 3 decimals proportions. Additionally, function sets decimal mark ‘.’, thousand/millions separator ‘,’ default.”","code":"result <- result |>    formatEstimateValue(     decimals = c(integer = 0, numeric = 2, percentage = 1, proportion = 3),     decimalMark = \".\",     bigMark = \",\") result |> dplyr::glimpse() #> Rows: 126 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ cdm_name         <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock… #> $ group_name       <chr> \"cohort_name\", \"cohort_name\", \"cohort_name\", \"cohort_… #> $ group_level      <chr> \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\"… #> $ strata_name      <chr> \"overall\", \"age_group &&& sex\", \"age_group &&& sex\", … #> $ strata_level     <chr> \"overall\", \"<40 &&& Male\", \">=40 &&& Male\", \"<40 &&& … #> $ variable_name    <chr> \"number subjects\", \"number subjects\", \"number subject… #> $ variable_level   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ estimate_name    <chr> \"count\", \"count\", \"count\", \"count\", \"count\", \"count\",… #> $ estimate_type    <chr> \"integer\", \"integer\", \"integer\", \"integer\", \"integer\"… #> $ estimate_value   <chr> \"4,392,319\", \"7,536,112\", \"537,318\", \"3,563,375\", \"4,… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"…"},{"path":"https://darwin-eu.github.io/visOmopResults/index.html","id":"id_2-formatestimatename","dir":"","previous_headings":"Custom formatting - Example usage","what":"2. formatEstimateName()","title":"Graphs and Tables for OMOP Results","text":"function can transform estimate_name estimate_value columns. example, allows consolidate one row counts percentages related variable within group strata. ’s worth noting estimate_name enclosed within <…> estimateNameFormat argument.","code":"result <- result |> formatEstimateName(   estimateNameFormat = c(\"N (%)\" = \"<count> (<percentage>%)\",                          \"N\" = \"<count>\",                          \"Mean (SD)\" = \"<mean> (<sd>)\"),   keepNotFormatted = FALSE) result |> dplyr::glimpse() #> Rows: 72 #> Columns: 13 #> $ result_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… #> $ cdm_name         <chr> \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock\", \"mock… #> $ group_name       <chr> \"cohort_name\", \"cohort_name\", \"cohort_name\", \"cohort_… #> $ group_level      <chr> \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\", \"cohort1\"… #> $ strata_name      <chr> \"overall\", \"age_group &&& sex\", \"age_group &&& sex\", … #> $ strata_level     <chr> \"overall\", \"<40 &&& Male\", \">=40 &&& Male\", \"<40 &&& … #> $ variable_name    <chr> \"number subjects\", \"number subjects\", \"number subject… #> $ variable_level   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… #> $ estimate_name    <chr> \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\", \"N\"… #> $ estimate_type    <chr> \"character\", \"character\", \"character\", \"character\", \"… #> $ estimate_value   <chr> \"4,392,319\", \"7,536,112\", \"537,318\", \"3,563,375\", \"4,… #> $ additional_name  <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"… #> $ additional_level <chr> \"overall\", \"overall\", \"overall\", \"overall\", \"overall\"…"},{"path":"https://darwin-eu.github.io/visOmopResults/index.html","id":"id_3-formatheader","dir":"","previous_headings":"Custom formatting - Example usage","what":"3. formatHeader()","title":"Graphs and Tables for OMOP Results","text":"Next step format table transforming gt object. pivot strata_name strata_level columns strata groups columns header “Study strata”.","code":"result <- result |>   formatHeader(header = c(\"Study strata\", \"strata_name\", \"strata_level\"),                delim = \"\\n\",                 includeHeaderName = FALSE,                includeHeaderKey = TRUE) result |> dplyr::glimpse() #> Rows: 8 #> Columns: 19 #> $ result_id                                                                              <int> … #> $ cdm_name                                                                               <chr> … #> $ group_name                                                                             <chr> … #> $ group_level                                                                            <chr> … #> $ variable_name                                                                          <chr> … #> $ variable_level                                                                         <chr> … #> $ estimate_name                                                                          <chr> … #> $ estimate_type                                                                          <chr> … #> $ additional_name                                                                        <chr> … #> $ additional_level                                                                       <chr> … #> $ `[header]Study strata\\n[header_level]overall\\n[header_level]overall`                   <chr> … #> $ `[header]Study strata\\n[header_level]age_group &&& sex\\n[header_level]<40 &&& Male`    <chr> … #> $ `[header]Study strata\\n[header_level]age_group &&& sex\\n[header_level]>=40 &&& Male`   <chr> … #> $ `[header]Study strata\\n[header_level]age_group &&& sex\\n[header_level]<40 &&& Female`  <chr> … #> $ `[header]Study strata\\n[header_level]age_group &&& sex\\n[header_level]>=40 &&& Female` <chr> … #> $ `[header]Study strata\\n[header_level]sex\\n[header_level]Male`                          <chr> … #> $ `[header]Study strata\\n[header_level]sex\\n[header_level]Female`                        <chr> … #> $ `[header]Study strata\\n[header_level]age_group\\n[header_level]<40`                     <chr> … #> $ `[header]Study strata\\n[header_level]age_group\\n[header_level]>=40`                    <chr> …"},{"path":"https://darwin-eu.github.io/visOmopResults/index.html","id":"id_4-gttable","dir":"","previous_headings":"Custom formatting - Example usage","what":"4. gtTable()","title":"Graphs and Tables for OMOP Results","text":"Finally, convert transformed summarised_result object steps 1, 2, 3, nice gt object. use default visOmopResults style. Additionally, separate data groups specified group_level column differentiate cohort1 cohort2.  important notice visOmopTable additional arguments customise output table similar manner pipeline. See vignette “format functions”.","code":"gtResult <- result |>   dplyr::select(-c(\"result_type\", \"package_name\", \"package_version\",                     \"group_name\", \"additional_name\", \"additional_level\",                    \"estimate_type\", \"result_id\")) |>   gtTable(     delim = \"\\n\",     style = \"default\",     na = \"-\",     title = \"My first gt table with visOmopResults!\",     groupColumn = \"group_level\",     groupAsColumn = FALSE,     groupOrder = c(\"cohort1\", \"cohort2\"),     colsToMergeRows = \"all_columns\"     ) gtResult"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/addSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"Add settings columns to a summaries_result object. — addSettings","title":"Add settings columns to a summaries_result object. — addSettings","text":"Add settings columns summaries_result object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/addSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add settings columns to a summaries_result object. — addSettings","text":"","code":"addSettings(   result,   settingsColumns = colnames(settings(result)),   columns = lifecycle::deprecated() )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/addSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add settings columns to a summaries_result object. — addSettings","text":"result summarised_result object. settingsColumns Settings added columns, default settings added. NULL empty character vector, settings added. columns","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/addSettings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add settings columns to a summaries_result object. — addSettings","text":"summarised_result object added setting columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/addSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add settings columns to a summaries_result object. — addSettings","text":"","code":"library(visOmopResults) mockSummarisedResult() |>   addSettings(settingsColumns = c(\"result_type\")) #> # A tibble: 126 × 14 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 116 more rows #> # ℹ 8 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>, result_type <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/additionalColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify variables in additional_name column — additionalColumns","title":"Identify variables in additional_name column — additionalColumns","text":"Identifies returns unique values additional_name column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/additionalColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify variables in additional_name column — additionalColumns","text":"","code":"additionalColumns(result)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/additionalColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify variables in additional_name column — additionalColumns","text":"result tibble.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/additionalColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify variables in additional_name column — additionalColumns","text":"Unique values additional name column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/additionalColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify variables in additional_name column — additionalColumns","text":"","code":"mockSummarisedResult() |>   additionalColumns() #> character(0)"},{"path":[]},{"path":"https://darwin-eu.github.io/visOmopResults/reference/barPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a bar plot visualisation from a summarised result object. — barPlot","text":"","code":"barPlot(result, x, y, facet = NULL, colour = NULL)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/barPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a bar plot visualisation from a summarised result object. — barPlot","text":"result summarised result object. x Column estimate name used x variable. y Column estimate name used y variable facet Variables facet , formula can provided specify variables used rows ones columns. colour Columns use determine colors.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/barPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a bar plot visualisation from a summarised result object. — barPlot","text":"plot object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/barPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a bar plot visualisation from a summarised result object. — barPlot","text":"","code":"# \\donttest{ result <- mockSummarisedResult() |> dplyr::filter(variable_name == \"age\")  barPlot(   result = result,   x = \"cohort_name\",   y = \"mean\",   facet = c(\"age_group\", \"sex\"),   colour = \"sex\")  # }"},{"path":[]},{"path":"https://darwin-eu.github.io/visOmopResults/reference/boxPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a box plot visualisation from a summarised_result object. — boxPlot","text":"","code":"boxPlot(   result,   x = NULL,   lower = \"q25\",   middle = \"median\",   upper = \"q75\",   ymin = \"min\",   ymax = \"max\",   facet = NULL,   colour = NULL )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/boxPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a box plot visualisation from a summarised_result object. — boxPlot","text":"result summarised result object. x Columns use x axes. lower Estimate name lower quantile box. middle Estimate name middle line box. upper Estimate name upper quantile box. ymin Estimate name lower limit bars. ymax Estimate name upper limit bars. facet Variables facet , formula can provided specify variables used rows ones columns. colour Columns use determine colors.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/boxPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a box plot visualisation from a summarised_result object. — boxPlot","text":"ggplot2 object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterAdditional.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the additional_name-additional_level pair in a summarised_result — filterAdditional","title":"Filter the additional_name-additional_level pair in a summarised_result — filterAdditional","text":"Filter additional_name-additional_level pair summarised_result","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterAdditional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the additional_name-additional_level pair in a summarised_result — filterAdditional","text":"","code":"filterAdditional(result, ...)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterAdditional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter the additional_name-additional_level pair in a summarised_result — filterAdditional","text":"result summarised_result object. ... Expressions return logical value (additionalColumns() used evaluate expression), defined terms variables .data. multiple expressions included, combined & operator. rows conditions evaluate TRUE kept.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterAdditional.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the additional_name-additional_level pair in a summarised_result — filterAdditional","text":"summarised_result object rows fulfill required specified additional.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterAdditional.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter the additional_name-additional_level pair in a summarised_result — filterAdditional","text":"","code":"library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(omopgenerics) #>  #> Attaching package: ‘omopgenerics’ #> The following object is masked from ‘package:stats’: #>  #>     filter  x <- tibble(   \"result_id\" = 1L,   \"cdm_name\" = \"eunomia\",   \"group_name\" = \"cohort_name\",   \"group_level\" = c(\"cohort1\", \"cohort2\", \"cohort3\"),   \"strata_name\" = \"sex\",   \"strata_level\" = \"Female\",   \"variable_name\" = \"number subjects\",   \"variable_level\" = NA_character_,   \"estimate_name\" = \"count\",   \"estimate_type\" = \"integer\",   \"estimate_value\" = c(\"100\", \"44\", \"14\"),   \"additional_name\" = c(\"year\", \"time_step\", \"year &&& time_step\"),   \"additional_level\" = c(\"2010\", \"4\", \"2015 &&& 5\") ) |>   newSummarisedResult()  x |>   filterAdditional(year == \"2010\") #> # A tibble: 1 × 13 #>   result_id cdm_name group_name  group_level strata_name strata_level #>       <int> <chr>    <chr>       <chr>       <chr>       <chr>        #> 1         1 eunomia  cohort_name cohort1     sex         Female       #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the group_name-group_level pair in a summarised_result — filterGroup","title":"Filter the group_name-group_level pair in a summarised_result — filterGroup","text":"Filter group_name-group_level pair summarised_result","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the group_name-group_level pair in a summarised_result — filterGroup","text":"","code":"filterGroup(result, ...)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter the group_name-group_level pair in a summarised_result — filterGroup","text":"result summarised_result object. ... Expressions return logical value (groupColumns() used evaluate expression), defined terms variables .data. multiple expressions included, combined & operator. rows conditions evaluate TRUE kept.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the group_name-group_level pair in a summarised_result — filterGroup","text":"summarised_result object rows fulfill required specified group.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter the group_name-group_level pair in a summarised_result — filterGroup","text":"","code":"library(dplyr) library(omopgenerics)  x <- tibble(   \"result_id\" = 1L,   \"cdm_name\" = \"eunomia\",   \"group_name\" = c(\"cohort_name\", \"age_group &&& cohort_name\", \"age_group\"),   \"group_level\" = c(\"my_cohort\", \">40 &&& second_cohort\", \"<40\"),   \"strata_name\" = \"sex\",   \"strata_level\" = \"Female\",   \"variable_name\" = \"number subjects\",   \"variable_level\" = NA_character_,   \"estimate_name\" = \"count\",   \"estimate_type\" = \"integer\",   \"estimate_value\" = c(\"100\", \"44\", \"14\"),   \"additional_name\" = \"overall\",   \"additional_level\" = \"overall\" ) |>   newSummarisedResult()  x |>   filterGroup(cohort_name == \"second_cohort\") #> # A tibble: 1 × 13 #>   result_id cdm_name group_name             group_level strata_name strata_level #>       <int> <chr>    <chr>                  <chr>       <chr>       <chr>        #> 1         1 eunomia  age_group &&& cohort_… >40 &&& se… sex         Female       #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterSettings.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a summarised_result using the settings. — filterSettings","title":"Filter a summarised_result using the settings. — filterSettings","text":"Filter summarised_result using settings.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterSettings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a summarised_result using the settings. — filterSettings","text":"","code":"filterSettings(result, ...)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterSettings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a summarised_result using the settings. — filterSettings","text":"result summarised_result object. ... Expressions return logical value (columns settings used evaluate expression), defined terms variables .data. multiple expressions included, combined & operator. rows conditions evaluate TRUE kept.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterSettings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter a summarised_result using the settings. — filterSettings","text":"summarised_result object result_id rows fulfill required specified settings.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterSettings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter a summarised_result using the settings. — filterSettings","text":"","code":"library(dplyr) library(omopgenerics)  x <- tibble(   \"result_id\" = as.integer(c(1, 2)),   \"cdm_name\" = c(\"cprd\", \"eunomia\"),   \"group_name\" = \"sex\",   \"group_level\" = \"male\",   \"strata_name\" = \"sex\",   \"strata_level\" = \"male\",   \"variable_name\" = \"Age group\",   \"variable_level\" = \"10 to 50\",   \"estimate_name\" = \"count\",   \"estimate_type\" = \"numeric\",   \"estimate_value\" = \"5\",   \"additional_name\" = \"overall\",   \"additional_level\" = \"overall\" ) |>   newSummarisedResult(settings = tibble(     \"result_id\" = c(1, 2), \"custom\" = c(\"A\", \"B\")   ))  x #> # A tibble: 2 × 13 #>   result_id cdm_name group_name group_level strata_name strata_level #>       <int> <chr>    <chr>      <chr>       <chr>       <chr>        #> 1         1 cprd     sex        male        sex         male         #> 2         2 eunomia  sex        male        sex         male         #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>  x |> filterSettings(custom == \"A\") #> # A tibble: 1 × 13 #>   result_id cdm_name group_name group_level strata_name strata_level #>       <int> <chr>    <chr>      <chr>       <chr>       <chr>        #> 1         1 cprd     sex        male        sex         male         #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterStrata.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the strata_name-strata_level pair in a summarised_result — filterStrata","title":"Filter the strata_name-strata_level pair in a summarised_result — filterStrata","text":"Filter strata_name-strata_level pair summarised_result","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterStrata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the strata_name-strata_level pair in a summarised_result — filterStrata","text":"","code":"filterStrata(result, ...)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterStrata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter the strata_name-strata_level pair in a summarised_result — filterStrata","text":"result summarised_result object. ... Expressions return logical value (strataColumns() used evaluate expression), defined terms variables .data. multiple expressions included, combined & operator. rows conditions evaluate TRUE kept.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterStrata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the strata_name-strata_level pair in a summarised_result — filterStrata","text":"summarised_result object rows fulfill required specified strata.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/filterStrata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter the strata_name-strata_level pair in a summarised_result — filterStrata","text":"","code":"library(dplyr) library(omopgenerics)  x <- tibble(   \"result_id\" = 1L,   \"cdm_name\" = \"eunomia\",   \"group_name\" = \"cohort_name\",   \"group_level\" = \"my_cohort\",   \"strata_name\" = c(\"sex\", \"sex &&& age_group\", \"sex &&& year\"),   \"strata_level\" = c(\"Female\", \"Male &&& <40\", \"Female &&& 2010\"),   \"variable_name\" = \"number subjects\",   \"variable_level\" = NA_character_,   \"estimate_name\" = \"count\",   \"estimate_type\" = \"integer\",   \"estimate_value\" = c(\"100\", \"44\", \"14\"),   \"additional_name\" = \"overall\",   \"additional_level\" = \"overall\" ) |>   newSummarisedResult()  x |>   filterStrata(sex == \"Female\") #> # A tibble: 2 × 13 #>   result_id cdm_name group_name  group_level strata_name  strata_level    #>       <int> <chr>    <chr>       <chr>       <chr>        <chr>           #> 1         1 eunomia  cohort_name my_cohort   sex          Female          #> 2         1 eunomia  cohort_name my_cohort   sex &&& year Female &&& 2010 #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateName.html","id":null,"dir":"Reference","previous_headings":"","what":"Formats estimate_name and estimate_value column — formatEstimateName","title":"Formats estimate_name and estimate_value column — formatEstimateName","text":"Formats estimate_name estimate_value columns changing name estimate name /joining different estimates together single row.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formats estimate_name and estimate_value column — formatEstimateName","text":"","code":"formatEstimateName(   result,   estimateNameFormat = NULL,   keepNotFormatted = TRUE,   useFormatOrder = TRUE )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formats estimate_name and estimate_value column — formatEstimateName","text":"result summarised_result. estimateNameFormat Named list estimate name's join, sorted computation order. Indicate estimate_name's <...>. keepNotFormatted Whether keep rows formatted. useFormatOrder Whether use order estimate names appear estimateNameFormat (TRUE), use order input dataframe (FALSE).","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formats estimate_name and estimate_value column — formatEstimateName","text":"summarised_result object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formats estimate_name and estimate_value column — formatEstimateName","text":"","code":"result <- mockSummarisedResult() result |>   formatEstimateName(     estimateNameFormat = c(       \"N (%)\" = \"<count> (<percentage>%)\", \"N\" = \"<count>\"     ),     keepNotFormatted = FALSE   ) #> # A tibble: 54 × 13 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 44 more rows #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateValue.html","id":null,"dir":"Reference","previous_headings":"","what":"Formats the estimate_value column — formatEstimateValue","title":"Formats the estimate_value column — formatEstimateValue","text":"Formats estimate_value column summarised_result object editing number decimals, decimal thousand/millions separator marks.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateValue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formats the estimate_value column — formatEstimateValue","text":"","code":"formatEstimateValue(   result,   decimals = c(integer = 0, numeric = 2, percentage = 1, proportion = 3),   decimalMark = \".\",   bigMark = \",\" )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateValue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formats the estimate_value column — formatEstimateValue","text":"result summarised_result. decimals Number decimals per estimate type (integer, numeric, percentage, proportion), estimate name, estimate values (introduce number decimals). decimalMark Decimal separator mark. bigMark Thousand millions separator mark.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateValue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formats the estimate_value column — formatEstimateValue","text":"summarised_result.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatEstimateValue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formats the estimate_value column — formatEstimateValue","text":"","code":"result <- mockSummarisedResult()  result |> formatEstimateValue(decimals = 1) #> # A tibble: 126 × 13 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 116 more rows #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>  result |> formatEstimateValue(decimals = c(integer = 0, numeric = 1)) #> # A tibble: 126 × 13 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 116 more rows #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>  result |>   formatEstimateValue(decimals = c(numeric = 1, count = 0)) #> # A tibble: 126 × 13 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 116 more rows #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatHeader.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a header for gt and flextable objects. — formatHeader","title":"Create a header for gt and flextable objects. — formatHeader","text":"Pivots summarised_result object based column names header, generating specific column names subsequent header formatting gtTable fxTable functions.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatHeader.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a header for gt and flextable objects. — formatHeader","text":"","code":"formatHeader(   result,   header,   delim = \"\\n\",   includeHeaderName = TRUE,   includeHeaderKey = TRUE )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatHeader.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a header for gt and flextable objects. — formatHeader","text":"result summarised_result. header Names variables make headers. delim Delimiter use separate headers. includeHeaderName Whether include column name header. includeHeaderKey Whether include header key (header, header_name, header_level) header type column names.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatHeader.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a header for gt and flextable objects. — formatHeader","text":"tibble rows pivotted columns key names subsequent header formatting.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatHeader.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a header for gt and flextable objects. — formatHeader","text":"","code":"result <- mockSummarisedResult()  result |>   formatHeader(     header = c(       \"Study cohorts\", \"group_level\", \"Study strata\", \"strata_name\",       \"strata_level\"     ),     includeHeaderName = FALSE   ) #> # A tibble: 7 × 27 #>   result_id cdm_name group_name  variable_name   variable_level estimate_name #>       <int> <chr>    <chr>       <chr>           <chr>          <chr>         #> 1         1 mock     cohort_name number subjects NA             count         #> 2         1 mock     cohort_name age             NA             mean          #> 3         1 mock     cohort_name age             NA             sd            #> 4         1 mock     cohort_name Medications     Amoxiciline    count         #> 5         1 mock     cohort_name Medications     Amoxiciline    percentage    #> 6         1 mock     cohort_name Medications     Ibuprofen      count         #> 7         1 mock     cohort_name Medications     Ibuprofen      percentage    #> # ℹ 21 more variables: estimate_type <chr>, additional_name <chr>, #> #   additional_level <chr>, #> #   `[header]Study cohorts\\n[header_level]cohort1\\n[header]Study strata\\n[header_level]overall\\n[header_level]overall` <chr>, #> #   `[header]Study cohorts\\n[header_level]cohort1\\n[header]Study strata\\n[header_level]age_group &&& sex\\n[header_level]<40 &&& Male` <chr>, #> #   `[header]Study cohorts\\n[header_level]cohort1\\n[header]Study strata\\n[header_level]age_group &&& sex\\n[header_level]>=40 &&& Male` <chr>, #> #   `[header]Study cohorts\\n[header_level]cohort1\\n[header]Study strata\\n[header_level]age_group &&& sex\\n[header_level]<40 &&& Female` <chr>, #> #   `[header]Study cohorts\\n[header_level]cohort1\\n[header]Study strata\\n[header_level]age_group &&& sex\\n[header_level]>=40 &&& Female` <chr>, …"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a formatted table from a data.table — formatTable","title":"Generate a formatted table from a data.table — formatTable","text":"function combines functionalities formatEstimateValue(), formatEstimateName(), formatHeader(), gtTable(), fxTable() single function. require input table summarised_result, expect specific fields apply formatting.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a formatted table from a data.table — formatTable","text":"","code":"formatTable(   result,   formatEstimateName = character(),   header = character(),   groupColumn = character(),   renameColumns = character(),   type = \"gt\",   hide = character(),   .options = list() )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a formatted table from a data.table — formatTable","text":"result table format. formatEstimateName named list estimate names join, sorted computation order. Use <...> indicate estimate names. argument requires table estimate_name estimate_value columns. header vector specifying elements include header. order elements matters, first topmost header. vector elements can column names labels overall headers. table must contain estimate_value column pivot headers. groupColumn Columns use group labels. default, name new group tidy* column names separated \";\". specify custom group name, use named list : list(\"newGroupName\" = c(\"variable_name\", \"variable_level\")). *tidy: tidy format applied column names replaces \"_\" space converts sentence case. Use renameColumns customize specific column names. renameColumns named vector customize column names, e.g., c(\"Database name\" = \"cdm_name\"). function rename column names specified tidy* format. type desired format output table. Options : \"gt\", \"flextable\", \"tibble\". hide Columns drop output table. .options named list additional formatting options. visOmopResults::optionsTable() shows allowed arguments default values.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a formatted table from a data.table — formatTable","text":"tibble, gt, flextable object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/formatTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a formatted table from a data.table — formatTable","text":"","code":"result <- mockSummarisedResult() result |>   formatTable(     formatEstimateName = c(\"N%\" = \"<count> (<percentage>)\",                            \"N\" = \"<count>\",                            \"Mean (SD)\" = \"<mean> (<sd>)\"),     header = c(\"Estimate\"),     renameColumns = c(\"Database name\" = \"cdm_name\"),     groupColumn = c(\"strata_name\", \"strata_level\"),     hide = c(\"additional_name\", \"additional_level\", \"estimate_type\", \"result_type\")   )     Result id       Database name       Group name       Group level       Variable name       Variable level       Estimate name       Estimate     overall; overall     1 mock cohort_name cohort1 number subjects - N 6,502,987   cohort2 number subjects - N 3,979,936   cohort1 age - Mean (SD) 24.05 (1.68)   cohort2 age - Mean (SD) 93.03 (9.24)   cohort1 Medications Amoxiciline N% 25,575 (71.93)   cohort2 Medications Amoxiciline N% 56,974 (41.80)   cohort1 Medications Ibuprofen N% 80,930 (54.59)   cohort2 Medications Ibuprofen N% 29,359 (7.30)age_group &&& sex; <40 &&& Male     1 mock cohort_name cohort1 number subjects - N 1,552,945   cohort2 number subjects - N 6,320,929   cohort1 age - Mean (SD) 63.89 (2.26)   cohort2 age - Mean (SD) 41.95 (9.82)   cohort1 Medications Amoxiciline N% 55,232 (93.64)   cohort2 Medications Amoxiciline N% 69,649 (76.39)   cohort1 Medications Ibuprofen N% 92,256 (94.73)   cohort2 Medications Ibuprofen N% 22,477 (35.63)age_group &&& sex; >=40 &&& Male     1 mock cohort_name cohort1 number subjects - N 5,083,099   cohort2 number subjects - N 9,485,788   cohort1 age - Mean (SD) 50.34 (8.46)   cohort2 age - Mean (SD) 49.56 (4.05)   cohort1 Medications Amoxiciline N% 25,158 (42.94)   cohort2 Medications Amoxiciline N% 70,077 (79.45)   cohort1 Medications Ibuprofen N% 67,502 (3.85)   cohort2 Medications Ibuprofen N% 69,092 (57.16)age_group &&& sex; <40 &&& Female     1 mock cohort_name cohort1 number subjects - N 858,704   cohort2 number subjects - N 3,401,192   cohort1 age - Mean (SD) 25.05 (3.46)   cohort2 age - Mean (SD) 35.27 (2.70)   cohort1 Medications Amoxiciline N% 62,845 (28.62)   cohort2 Medications Amoxiciline N% 3,994 (24.26)   cohort1 Medications Ibuprofen N% 9,397 (64.76)   cohort2 Medications Ibuprofen N% 31,233 (67.80)age_group &&& sex; >=40 &&& Female     1 mock cohort_name cohort1 number subjects - N 5,030,267   cohort2 number subjects - N 6,273,660   cohort1 age - Mean (SD) 97.90 (0.67)   cohort2 age - Mean (SD) 24.87 (4.88)   cohort1 Medications Amoxiciline N% 31,612 (77.06)   cohort2 Medications Amoxiciline N% 43,152 (75.92)   cohort1 Medications Ibuprofen N% 19,746 (7.96)   cohort2 Medications Ibuprofen N% 48,330 (69.07)sex; Male     1 mock cohort_name cohort1 number subjects - N 385,719   cohort2 number subjects - N 8,249,154   cohort1 age - Mean (SD) 65.66 (0.27)   cohort2 age - Mean (SD) 95.87 (0.51)   cohort1 Medications Amoxiciline N% 92,452 (61.65)   cohort2 Medications Amoxiciline N% 81,423 (2.91)   cohort1 Medications Ibuprofen N% 47,555 (43.29)   cohort2 Medications Ibuprofen N% 12,180 (37.34)sex; Female     1 mock cohort_name cohort1 number subjects - N 8,240,329   cohort2 number subjects - N 1,451,154   cohort1 age - Mean (SD) 8.98 (1.18)   cohort2 age - Mean (SD) 36.00 (0.02)   cohort1 Medications Amoxiciline N% 90,649 (15.93)   cohort2 Medications Amoxiciline N% 56,659 (43.73)   cohort1 Medications Ibuprofen N% 71,437 (76.09)   cohort2 Medications Ibuprofen N% 69,001 (9.80)age_group; <40     1 mock cohort_name cohort1 number subjects - N 2,859,856   cohort2 number subjects - N 9,671,391   cohort1 age - Mean (SD) 63.05 (0.14)   cohort2 age - Mean (SD) 19.90 (4.96)   cohort1 Medications Amoxiciline N% 9,197 (40.16)   cohort2 Medications Amoxiciline N% 58,825 (53.04)   cohort1 Medications Ibuprofen N% 53,808 (29.38)   cohort2 Medications Ibuprofen N% 31,573 (9.90)age_group; >=40     1 mock cohort_name cohort1 number subjects - N 2,467,509   cohort2 number subjects - N 860,390   cohort1 age - Mean (SD) 87.68 (7.36)   cohort2 age - Mean (SD) 72.63 (2.44)   cohort1 Medications Amoxiciline N% 73,780 (0.16)   cohort2 Medications Amoxiciline N% 88,031 (42.98)   cohort1 Medications Ibuprofen N% 87,538 (10.73)   cohort2 Medications Ibuprofen N% 81,619 (77.48)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/fxTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a flextable object from a dataframe — fxTable","title":"Creates a flextable object from a dataframe — fxTable","text":"Creates flextable object dataframe using delimiter span header, allows easily customise table style.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/fxTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a flextable object from a dataframe — fxTable","text":"","code":"fxTable(   x,   delim = \"\\n\",   style = \"default\",   na = \"-\",   title = NULL,   subtitle = NULL,   caption = NULL,   groupColumn = NULL,   groupNameCol = lifecycle::deprecated(),   groupAsColumn = FALSE,   groupNameAsColumn = lifecycle::deprecated(),   groupOrder = NULL,   colsToMergeRows = NULL )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/fxTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a flextable object from a dataframe — fxTable","text":"x dataframe. delim Delimiter. style Named list specifies style different parts gt table. Accepted entries : title, subtitle, header, header_name, header_level, column_name, group_label, body. Alternatively, use \"default\" get visOmopResults style, NULL flextable style. na display missing values. title Title table, NULL title. subtitle Subtitle table, NULL subtitle. caption Caption table, NULL caption. Text markdown formatting style (e.g. *caption * caption italics). groupColumn Specifies columns use group labels. default, new group name combination column names, joined \"_\". assign custom group name, provide named list : list(newGroupName = c(\"variable_name\", \"variable_level\")) groupNameCol  groupAsColumn Whether display group labels column (TRUE) rows (FALSE). groupNameAsColumn  groupOrder Order display group labels. colsToMergeRows Names columns merge vertically consecutive row cells identical values. Alternatively, use \"all_columns\" apply merging columns, use NULL indicate merging.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/fxTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a flextable object from a dataframe — fxTable","text":"flextable object. flextable object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/fxTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a flextable object from a dataframe — fxTable","text":"fxTable example group_level result_id cdm_name group_name variable_name variable_level estimate_name estimate_type additional_name additional_level Study strata overall age_group &&& sex sex age_group overall <40 &&& Male >=40 &&& Male <40 &&& Female >=40 &&& Female Male Female <40 >=40 cohort1 1 mock cohort_name number subjects -- count integer overall overall 185,314 8,509,742 5,014,234 1,661,618 3,610,061 6,520,002 8,741,768 7,283,057 4,124,729    age -- mean numeric overall overall 17.8 36.3 39.1 90.4 27.6 13.9 45.1 11.0 88.1      sd numeric overall overall 0.2 9.3 0.8 0.3 3.1 7.8 2.8 1.7 4.3    Medications Amoxiciline count integer overall overall 77,303 2,212 81,502 30,383 93,180 54,043 25,482 47,759 70,446      percentage percentage overall overall 39.5447959192097 17.4868220463395 32.7313161687925 61.4753181813285 7.91664109565318 51.9060970284045 30.6281309342012 67.1395304379985 39.3671740312129     Ibuprofen count integer overall overall 23,838 41,168 74,607 72,345 61,452 47,398 57,846 24,159 11,438      percentage percentage overall overall 87.3739800183102 88.2156537845731 10.7689367607236 57.4544371105731 99.6033379342407 85.0553432479501 43.7655055196956 32.6429924694821 33.596885856241 cohort2 1 mock cohort_name number subjects -- count integer overall overall 1,592,293 8,457,036 8,843,691 3,959,981 381,408 9,513,960 7,837,275 2,194,397 3,309,320    age -- mean numeric overall overall 53.4 73.9 72.0 26.4 67.4 21.0 69.0 19.5 78.2      sd numeric overall overall 8.1 6.9 7.8 0.9 7.4 4.0 3.0 7.4 4.7    Medications Amoxiciline count integer overall overall 751 77,241 26,579 97,104 19,053 1,970 61,238 52,573 63,452      percentage percentage overall overall 74.7848246712238 13.8926521642134 37.7343045547605 64.1383435344324 99.4194674305618 36.8559058057144 33.7348550790921 91.3685443112627 90.9420361043885     Ibuprofen count integer overall overall 29,834 48,412 56,741 75,395 54,543 75,968 21,297 83,927 40,670      percentage percentage overall overall 23.927381564863 42.137112445198 51.2136830715463 18.5446366202086 32.6400522142649 81.7073642974719 74.8737998073921 53.1741869403049 96.1571368388832","code":"mockSummarisedResult() |>   formatEstimateValue(decimals = c(integer = 0, numeric = 1)) |>   formatHeader(     header = c(\"Study strata\", \"strata_name\", \"strata_level\"),     includeHeaderName = FALSE   ) |>   fxTable(     style = \"default\",     na = \"--\",     title = \"fxTable example\",     subtitle = NULL,     caption = NULL,     groupColumn = \"group_level\",     groupAsColumn = TRUE,     groupOrder = c(\"cohort1\", \"cohort2\"),     colsToMergeRows = \"all_columns\"   ) .cl-0375c22a{}.cl-036c0424{font-family:'Arial';font-size:15pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-036c042e{font-family:'Arial';font-size:10pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-036c0438{font-family:'DejaVu Sans';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-036f2938{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-036f2942{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-036f294c{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-036f4e68{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1.2pt solid rgba(190, 190, 190, 1.00);border-top: 1.2pt solid rgba(190, 190, 190, 1.00);border-left: 1.2pt solid rgba(190, 190, 190, 1.00);border-right: 1.2pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-036f4e72{width:0.75in;background-color:rgba(200, 200, 200, 1.00);vertical-align: middle;border-bottom: 1.2pt solid rgba(190, 190, 190, 1.00);border-top: 1.2pt solid rgba(190, 190, 190, 1.00);border-left: 1.2pt solid rgba(190, 190, 190, 1.00);border-right: 1.2pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-036f4e7c{width:0.75in;background-color:rgba(225, 225, 225, 1.00);vertical-align: middle;border-bottom: 1.2pt solid rgba(190, 190, 190, 1.00);border-top: 1.2pt solid rgba(190, 190, 190, 1.00);border-left: 1.2pt solid rgba(190, 190, 190, 1.00);border-right: 1.2pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-036f4e7d{width:0.75in;background-color:rgba(233, 233, 233, 1.00);vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 1pt solid rgba(190, 190, 190, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-036f4e7e{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-036f4e86{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-036f4e87{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-036f4e90{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-036f4e91{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-036f4e9a{width:0.75in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(190, 190, 190, 1.00);border-top: 1pt solid rgba(190, 190, 190, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 1pt solid rgba(190, 190, 190, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}fxTable examplegroup_levelresult_idcdm_namegroup_namevariable_namevariable_levelestimate_nameestimate_typeadditional_nameadditional_levelStudy strataoverallage_group &&& sexsexage_groupoverall<40 &&& Male>=40 &&& Male<40 &&& Female>=40 &&& FemaleMaleFemale<40>=40cohort11mockcohort_namenumber subjects--countintegeroveralloverall185,3148,509,7425,014,2341,661,6183,610,0616,520,0028,741,7687,283,0574,124,729age--meannumericoveralloverall17.836.339.190.427.613.945.111.088.1sdnumericoveralloverall0.29.30.80.33.17.82.81.74.3MedicationsAmoxicilinecountintegeroveralloverall77,3032,21281,50230,38393,18054,04325,48247,75970,446percentagepercentageoveralloverall39.544795919209717.486822046339532.731316168792561.47531818132857.9166410956531851.906097028404530.628130934201267.139530437998539.3671740312129Ibuprofencountintegeroveralloverall23,83841,16874,60772,34561,45247,39857,84624,15911,438percentagepercentageoveralloverall87.373980018310288.215653784573110.768936760723657.454437110573199.603337934240785.055343247950143.765505519695632.642992469482133.596885856241cohort21mockcohort_namenumber subjects--countintegeroveralloverall1,592,2938,457,0368,843,6913,959,981381,4089,513,9607,837,2752,194,3973,309,320age--meannumericoveralloverall53.473.972.026.467.421.069.019.578.2sdnumericoveralloverall8.16.97.80.97.44.03.07.44.7MedicationsAmoxicilinecountintegeroveralloverall75177,24126,57997,10419,0531,97061,23852,57363,452percentagepercentageoveralloverall74.784824671223813.892652164213437.734304554760564.138343534432499.419467430561836.855905805714433.734855079092191.368544311262790.9420361043885Ibuprofencountintegeroveralloverall29,83448,41256,74175,39554,54375,96821,29783,92740,670percentagepercentageoveralloverall23.92738156486342.13711244519851.213683071546318.544636620208632.640052214264981.707364297471974.873799807392153.174186940304996.1571368388832"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/groupColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify variables in group_name column — groupColumns","title":"Identify variables in group_name column — groupColumns","text":"Identifies returns unique values group_name column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/groupColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify variables in group_name column — groupColumns","text":"","code":"groupColumns(result)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/groupColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify variables in group_name column — groupColumns","text":"result tibble.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/groupColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify variables in group_name column — groupColumns","text":"Unique values group name column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/groupColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify variables in group_name column — groupColumns","text":"","code":"mockSummarisedResult() |>   groupColumns() #> [1] \"cohort_name\""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/gtTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a gt object from a dataframe — gtTable","title":"Creates a gt object from a dataframe — gtTable","text":"Creates flextable object dataframe using delimiter span header, allows easily customise table style.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/gtTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a gt object from a dataframe — gtTable","text":"","code":"gtTable(   x,   delim = \"\\n\",   style = \"default\",   na = \"-\",   title = NULL,   subtitle = NULL,   caption = NULL,   groupColumn = NULL,   groupNameCol = lifecycle::deprecated(),   groupAsColumn = FALSE,   groupNameAsColumn = lifecycle::deprecated(),   groupOrder = NULL,   colsToMergeRows = NULL )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/gtTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a gt object from a dataframe — gtTable","text":"x dataframe. delim Delimiter. style Named list specifies style different parts gt table. Accepted entries : title, subtitle, header, header_name, header_level, column_name, group_label, body. Alternatively, use \"default\" get visOmopResults style, NULL gt style na display missing values. title Title table, NULL title. subtitle Subtitle table, NULL subtitle. caption Caption table, NULL caption. Text markdown formatting style (e.g. *caption * caption italics). groupColumn Specifies columns use group labels. default, new group name combination column names, joined \"_\". assign custom group name, provide named list : list(newGroupName = c(\"variable_name\", \"variable_level\")) groupNameCol  groupAsColumn Whether display group labels column (TRUE) rows (FALSE). groupNameAsColumn  groupOrder Order display group labels. colsToMergeRows Names columns merge vertically consecutive row cells identical values. Alternatively, use \"all_columns\" apply merging columns, use NULL indicate merging.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/gtTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a gt object from a dataframe — gtTable","text":"gt object. gt table.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/gtTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a gt object from a dataframe — gtTable","text":"","code":"mockSummarisedResult() |>   formatEstimateValue(decimals = c(integer = 0, numeric = 1)) |>   formatHeader(header = c(\"Study strata\", \"strata_name\", \"strata_level\"),               includeHeaderName = FALSE) |>   gtTable(     style = list(\"header\" = list(       gt::cell_fill(color = \"#d9d9d9\"),       gt::cell_text(weight = \"bold\")),       \"header_level\" = list(gt::cell_fill(color = \"#e1e1e1\"),                             gt::cell_text(weight = \"bold\")),       \"column_name\" = list(gt::cell_text(weight = \"bold\")),       \"title\" = list(gt::cell_text(weight = \"bold\"),                      gt::cell_fill(color = \"#c8c8c8\")),       \"group_label\" = gt::cell_fill(color = \"#e1e1e1\")),     na = \"--\",     title = \"gtTable example\",     subtitle = NULL,     caption = NULL,     groupColumn = \"group_level\",     groupAsColumn = FALSE,     groupOrder = c(\"cohort1\", \"cohort2\"),     colsToMergeRows = \"all_columns\"   )     gtTable example                     Study strata            result_id       cdm_name       group_name       variable_name       variable_level       estimate_name       estimate_type       additional_name       additional_level                overall                       age_group &&& sex                       sex                       age_group            overall       <40 &&& Male       >=40 &&& Male       <40 &&& Female       >=40 &&& Female       Male       Female       <40       >=40     cohort1     1 mock cohort_name number subjects -- count integer overall overall 4,621,038 9,392,060 62,914 3,494,275 5,662,714 5,289,571 6,370,154 3,507,959 9,241,712   age -- mean numeric overall overall 93.6 67.2 37.1 56.7 47.9 56.8 28.7 76.0 22.8     sd numeric overall overall 0.3 7.4 5.9 6.9 7.4 4.6 6.6 0.0 9.8   Medications Amoxiciline count integer overall overall 21,325 79,201 59,263 60,626 11,077 19,561 707 94,087 6,821     percentage percentage overall overall 19.4796363823116 67.9479371290654 74.7466302476823 64.9537714431062 7.75806771125644 59.9653656128794 87.9010812146589 73.2037156121805 8.00530861597508    Ibuprofen count integer overall overall 48,522 47,024 79,105 31,298 30,876 34,516 82,844 27,400 43,084     percentage percentage overall overall 12.5297799473628 56.5557193476707 12.7641106490046 62.7597616286948 7.53239539917558 28.5451323958114 31.0602429090068 14.6727561717853 79.9770513316616cohort2     1 mock cohort_name number subjects -- count integer overall overall 4,740,412 7,781,341 7,987,365 8,784,999 9,098,439 4,455,378 2,895,593 3,033,107 9,190,243   age -- mean numeric overall overall 42.7 45.7 71.0 28.7 77.3 57.5 2.2 77.3 5.9     sd numeric overall overall 2.2 3.1 7.3 1.3 1.0 1.7 6.2 6.8 7.9   Medications Amoxiciline count integer overall overall 13,693 33,282 48,969 17,295 6,494 45,167 37,940 90,930 2,995     percentage percentage overall overall 83.2749811932445 86.4705697866157 71.2964971549809 75.7407110882923 12.2433916199952 19.3697881884873 31.4178289379925 13.7532982043922 84.7802880220115    Ibuprofen count integer overall overall 41,690 13,431 68,634 17,208 92,349 61,374 31,563 80,973 90,237     percentage percentage overall overall 17.1996079385281 78.5683812340721 47.0035764155909 43.2957729091868 57.4532859958708 72.9969945270568 89.4187148427591 22.030636924319 29.1596438270062"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/mockSummarisedResult.html","id":null,"dir":"Reference","previous_headings":"","what":"A summarised_result object filled with mock data — mockSummarisedResult","title":"A summarised_result object filled with mock data — mockSummarisedResult","text":"Creates object class summarised_result mock data illustration purposes.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/mockSummarisedResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A summarised_result object filled with mock data — mockSummarisedResult","text":"","code":"mockSummarisedResult()"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/mockSummarisedResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A summarised_result object filled with mock data — mockSummarisedResult","text":"object class summarised_result mock data.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/mockSummarisedResult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A summarised_result object filled with mock data — mockSummarisedResult","text":"","code":"mockSummarisedResult() #> # A tibble: 126 × 13 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 116 more rows #> # ℹ 7 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/optionsTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Additional arguments for the function visOmopTable — optionsTable","title":"Additional arguments for the function visOmopTable — optionsTable","text":"provides list allowed inputs .option argument visOmopTable given default value.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/optionsTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additional arguments for the function visOmopTable — optionsTable","text":"","code":"optionsTable()"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/optionsTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Additional arguments for the function visOmopTable — optionsTable","text":"default .options named list.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/optionsTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Additional arguments for the function visOmopTable — optionsTable","text":"","code":"{ optionsTable() } #> $decimals #>    integer percentage    numeric proportion  #>          0          2          2          2  #>  #> $decimalMark #> [1] \".\" #>  #> $bigMark #> [1] \",\" #>  #> $keepNotFormatted #> [1] TRUE #>  #> $useFormatOrder #> [1] TRUE #>  #> $delim #> [1] \"\\n\" #>  #> $includeHeaderName #> [1] TRUE #>  #> $includeHeaderKey #> [1] TRUE #>  #> $style #> [1] \"default\" #>  #> $na #> [1] \"-\" #>  #> $title #> NULL #>  #> $subtitle #> NULL #>  #> $caption #> NULL #>  #> $groupAsColumn #> [1] FALSE #>  #> $groupOrder #> NULL #>  #> $colsToMergeRows #> [1] \"all_columns\" #>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/pivotEstimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Set estimates as columns — pivotEstimates","title":"Set estimates as columns — pivotEstimates","text":"Pivot estimates new columns result table.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/pivotEstimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set estimates as columns — pivotEstimates","text":"","code":"pivotEstimates(result, pivotEstimatesBy = \"estimate_name\", nameStyle = NULL)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/pivotEstimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set estimates as columns — pivotEstimates","text":"result summarised_result. pivotEstimatesBy Names pivot wider estimate values. NULL table pivotted. nameStyle Name style (glue package specifications) customise names pivotting estimates. NULL standard tidyr::pivot_wider formatting used.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/pivotEstimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set estimates as columns — pivotEstimates","text":"tibble.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/pivotEstimates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set estimates as columns — pivotEstimates","text":"","code":"result <- mockSummarisedResult() result |> pivotEstimates() #> # A tibble: 72 × 14 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 62 more rows #> # ℹ 8 more variables: variable_name <chr>, variable_level <chr>, #> #   additional_name <chr>, additional_level <chr>, count <int>, mean <dbl>, #> #   sd <dbl>, percentage <dbl>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics tidy omopgenerics bind, exportSummarisedResult, importSummarisedResult, suppress","code":""},{"path":[]},{"path":"https://darwin-eu.github.io/visOmopResults/reference/scatterPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a scatter plot visualisation from a summarised result object. — scatterPlot","text":"","code":"scatterPlot(   result,   x,   y,   line,   point,   ribbon,   ymin = NULL,   ymax = NULL,   facet = NULL,   colour = NULL,   group = colour )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/scatterPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a scatter plot visualisation from a summarised result object. — scatterPlot","text":"result summarised result object. x Column estimate name used x variable. y Column estimate name used y variable line Whether plot line using geom_line. point Whether plot points using geom_point. ribbon Whether plot ribbon using geom_ribbon. ymin Lower limit error bars, provided plot using geom_errorbar. ymax Upper limit error bars, provided plot using geom_errorbar. facet Variables facet , formula can provided specify variables used rows ones columns. colour Columns use determine colors. group Columns use determine group.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/scatterPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a scatter plot visualisation from a summarised result object. — scatterPlot","text":"plot object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/scatterPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a scatter plot visualisation from a summarised result object. — scatterPlot","text":"","code":"# \\donttest{ result <- mockSummarisedResult() |>   dplyr::filter(variable_name == \"age\")  scatterPlot(   result = result,   x = \"cohort_name\",   y = \"mean\",   line = TRUE,   point = TRUE,   ribbon = FALSE,   facet = age_group ~ sex)  # }"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/settingsColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify settings columns of a summarised_result — settingsColumns","title":"Identify settings columns of a summarised_result — settingsColumns","text":"Identifies returns columns settings table obtained using settings() summarised_result object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/settingsColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify settings columns of a summarised_result — settingsColumns","text":"","code":"settingsColumns(result)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/settingsColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify settings columns of a summarised_result — settingsColumns","text":"result summarised_result.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/settingsColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify settings columns of a summarised_result — settingsColumns","text":"Vector names settings columns","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/settingsColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify settings columns of a summarised_result — settingsColumns","text":"","code":"mockSummarisedResult() |>   settingsColumns() #> # A tibble: 1 × 4 #>   result_id result_type            package_name   package_version #>       <int> <chr>                  <chr>          <chr>           #> 1         1 mock_summarised_result visOmopResults 0.3.0.900"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitAdditional.html","id":null,"dir":"Reference","previous_headings":"","what":"Split additional_name and additional_level columns — splitAdditional","title":"Split additional_name and additional_level columns — splitAdditional","text":"Pivots input dataframe values column additional_name transformed columns contain values additional_level column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitAdditional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split additional_name and additional_level columns — splitAdditional","text":"","code":"splitAdditional(result, keep = FALSE, fill = \"overall\")"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitAdditional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split additional_name and additional_level columns — splitAdditional","text":"result dataframe least columns additional_name additional_level. keep Whether keep original group_name group_level columns. fill Optionally, character specifies value filled missing.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitAdditional.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split additional_name and additional_level columns — splitAdditional","text":"dataframe.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitAdditional.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split additional_name and additional_level columns — splitAdditional","text":"","code":"mockSummarisedResult() |>   splitAdditional() #> # A tibble: 126 × 11 #>    result_id cdm_name group_name  group_level strata_name       strata_level    #>        <int> <chr>    <chr>       <chr>       <chr>             <chr>           #>  1         1 mock     cohort_name cohort1     overall           overall         #>  2         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Male    #>  3         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Male   #>  4         1 mock     cohort_name cohort1     age_group &&& sex <40 &&& Female  #>  5         1 mock     cohort_name cohort1     age_group &&& sex >=40 &&& Female #>  6         1 mock     cohort_name cohort1     sex               Male            #>  7         1 mock     cohort_name cohort1     sex               Female          #>  8         1 mock     cohort_name cohort1     age_group         <40             #>  9         1 mock     cohort_name cohort1     age_group         >=40            #> 10         1 mock     cohort_name cohort2     overall           overall         #> # ℹ 116 more rows #> # ℹ 5 more variables: variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitAll.html","id":null,"dir":"Reference","previous_headings":"","what":"Split all pairs name-level into columns. — splitAll","title":"Split all pairs name-level into columns. — splitAll","text":"Pivots input dataframe pair name-level columns transformed columns (name) contain values corresponding level.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitAll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split all pairs name-level into columns. — splitAll","text":"","code":"splitAll(result, keep = FALSE, fill = \"overall\", exclude = \"variable\")"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitAll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split all pairs name-level into columns. — splitAll","text":"result data.frame. keep Whether keep original name-level columns. fill character specifies value filled missing. exclude Name column pair exclude.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitAll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split all pairs name-level into columns. — splitAll","text":"dataframe group, strata additional columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitAll.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split all pairs name-level into columns. — splitAll","text":"","code":"mockSummarisedResult() |>   splitAll() #> # A tibble: 126 × 10 #>    result_id cdm_name cohort_name age_group sex     variable_name variable_level #>        <int> <chr>    <chr>       <chr>     <chr>   <chr>         <chr>          #>  1         1 mock     cohort1     overall   overall number subje… NA             #>  2         1 mock     cohort1     <40       Male    number subje… NA             #>  3         1 mock     cohort1     >=40      Male    number subje… NA             #>  4         1 mock     cohort1     <40       Female  number subje… NA             #>  5         1 mock     cohort1     >=40      Female  number subje… NA             #>  6         1 mock     cohort1     overall   Male    number subje… NA             #>  7         1 mock     cohort1     overall   Female  number subje… NA             #>  8         1 mock     cohort1     <40       overall number subje… NA             #>  9         1 mock     cohort1     >=40      overall number subje… NA             #> 10         1 mock     cohort2     overall   overall number subje… NA             #> # ℹ 116 more rows #> # ℹ 3 more variables: estimate_name <chr>, estimate_type <chr>, #> #   estimate_value <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Split group_name and group_level columns — splitGroup","title":"Split group_name and group_level columns — splitGroup","text":"Pivots input dataframe values column group_name transformed columns contain values group_level column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split group_name and group_level columns — splitGroup","text":"","code":"splitGroup(result, keep = FALSE, fill = \"overall\")"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split group_name and group_level columns — splitGroup","text":"result dataframe least columns group_name group_level. keep Whether keep original group_name group_level columns. fill Optionally, character specifies value filled missing.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split group_name and group_level columns — splitGroup","text":"dataframe.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split group_name and group_level columns — splitGroup","text":"","code":"mockSummarisedResult() |>   splitGroup() #> # A tibble: 126 × 12 #>    result_id cdm_name cohort_name strata_name       strata_level   variable_name #>        <int> <chr>    <chr>       <chr>             <chr>          <chr>         #>  1         1 mock     cohort1     overall           overall        number subje… #>  2         1 mock     cohort1     age_group &&& sex <40 &&& Male   number subje… #>  3         1 mock     cohort1     age_group &&& sex >=40 &&& Male  number subje… #>  4         1 mock     cohort1     age_group &&& sex <40 &&& Female number subje… #>  5         1 mock     cohort1     age_group &&& sex >=40 &&& Fema… number subje… #>  6         1 mock     cohort1     sex               Male           number subje… #>  7         1 mock     cohort1     sex               Female         number subje… #>  8         1 mock     cohort1     age_group         <40            number subje… #>  9         1 mock     cohort1     age_group         >=40           number subje… #> 10         1 mock     cohort2     overall           overall        number subje… #> # ℹ 116 more rows #> # ℹ 6 more variables: variable_level <chr>, estimate_name <chr>, #> #   estimate_type <chr>, estimate_value <chr>, additional_name <chr>, #> #   additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitNameLevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Split name and level columns into the columns — splitNameLevel","title":"Split name and level columns into the columns — splitNameLevel","text":"Pivots input dataframe values name columns transformed columns, values come specified level column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitNameLevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split name and level columns into the columns — splitNameLevel","text":"","code":"splitNameLevel(   result,   name = \"group_name\",   level = \"group_level\",   keep = FALSE,   fill = \"overall\" )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitNameLevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split name and level columns into the columns — splitNameLevel","text":"result summarised_result object. name Column names. level Column levels. keep Whether keep original group_name group_level columns. fill Optionally, character specifies value filled missing.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitNameLevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split name and level columns into the columns — splitNameLevel","text":"dataframe specified name column values columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitNameLevel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split name and level columns into the columns — splitNameLevel","text":"","code":"mockSummarisedResult() |>   splitNameLevel(name = \"group_name\",                  level = \"group_level\",                  keep = FALSE) #> # A tibble: 126 × 12 #>    result_id cdm_name cohort_name strata_name       strata_level   variable_name #>        <int> <chr>    <chr>       <chr>             <chr>          <chr>         #>  1         1 mock     cohort1     overall           overall        number subje… #>  2         1 mock     cohort1     age_group &&& sex <40 &&& Male   number subje… #>  3         1 mock     cohort1     age_group &&& sex >=40 &&& Male  number subje… #>  4         1 mock     cohort1     age_group &&& sex <40 &&& Female number subje… #>  5         1 mock     cohort1     age_group &&& sex >=40 &&& Fema… number subje… #>  6         1 mock     cohort1     sex               Male           number subje… #>  7         1 mock     cohort1     sex               Female         number subje… #>  8         1 mock     cohort1     age_group         <40            number subje… #>  9         1 mock     cohort1     age_group         >=40           number subje… #> 10         1 mock     cohort2     overall           overall        number subje… #> # ℹ 116 more rows #> # ℹ 6 more variables: variable_level <chr>, estimate_name <chr>, #> #   estimate_type <chr>, estimate_value <chr>, additional_name <chr>, #> #   additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitStrata.html","id":null,"dir":"Reference","previous_headings":"","what":"Split strata_name and strata_level columns — splitStrata","title":"Split strata_name and strata_level columns — splitStrata","text":"Pivots input dataframe values column strata_name transformed columns contain values strata_level column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitStrata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split strata_name and strata_level columns — splitStrata","text":"","code":"splitStrata(result, keep = FALSE, fill = \"overall\")"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitStrata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split strata_name and strata_level columns — splitStrata","text":"result dataframe least columns strata_name strata_level. keep Whether keep original group_name group_level columns. fill Optionally, character specifies value filled missing.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitStrata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split strata_name and strata_level columns — splitStrata","text":"dataframe.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/splitStrata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split strata_name and strata_level columns — splitStrata","text":"","code":"mockSummarisedResult() |>   splitStrata() #> # A tibble: 126 × 13 #>    result_id cdm_name group_name  group_level age_group sex     variable_name   #>        <int> <chr>    <chr>       <chr>       <chr>     <chr>   <chr>           #>  1         1 mock     cohort_name cohort1     overall   overall number subjects #>  2         1 mock     cohort_name cohort1     <40       Male    number subjects #>  3         1 mock     cohort_name cohort1     >=40      Male    number subjects #>  4         1 mock     cohort_name cohort1     <40       Female  number subjects #>  5         1 mock     cohort_name cohort1     >=40      Female  number subjects #>  6         1 mock     cohort_name cohort1     overall   Male    number subjects #>  7         1 mock     cohort_name cohort1     overall   Female  number subjects #>  8         1 mock     cohort_name cohort1     <40       overall number subjects #>  9         1 mock     cohort_name cohort1     >=40      overall number subjects #> 10         1 mock     cohort_name cohort2     overall   overall number subjects #> # ℹ 116 more rows #> # ℹ 6 more variables: variable_level <chr>, estimate_name <chr>, #> #   estimate_type <chr>, estimate_value <chr>, additional_name <chr>, #> #   additional_level <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/strataColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify variables in strata_name column — strataColumns","title":"Identify variables in strata_name column — strataColumns","text":"Identifies returns unique values strata_name column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/strataColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify variables in strata_name column — strataColumns","text":"","code":"strataColumns(result)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/strataColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify variables in strata_name column — strataColumns","text":"result tibble.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/strataColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify variables in strata_name column — strataColumns","text":"Unique values strata name column.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/strataColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify variables in strata_name column — strataColumns","text":"","code":"mockSummarisedResult() |>   strataColumns() #> [1] \"age_group\" \"sex\""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidy.summarised_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a summarised_result object into a tidy tibble — tidy.summarised_result","title":"Turn a summarised_result object into a tidy tibble — tidy.summarised_result","text":"Provides tools obtaining tidy version summarised_result object. tidy version include settings columns, estimate_value pivotted columns using estimate_name names, group, strata, additional splitted. want customise tidy operations, please use tidySummarisedResult().","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidy.summarised_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a summarised_result object into a tidy tibble — tidy.summarised_result","text":"","code":"# S3 method for class 'summarised_result' tidy(x, ...)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidy.summarised_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a summarised_result object into a tidy tibble — tidy.summarised_result","text":"x summarised_result. ... compatibility (used).","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidy.summarised_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn a summarised_result object into a tidy tibble — tidy.summarised_result","text":"tibble.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidy.summarised_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn a summarised_result object into a tidy tibble — tidy.summarised_result","text":"","code":"result <- mockSummarisedResult() result |> tidy() #> # A tibble: 72 × 13 #>    cdm_name cohort_name age_group sex     variable_name   variable_level   count #>    <chr>    <chr>       <chr>     <chr>   <chr>           <chr>            <int> #>  1 mock     cohort1     overall   overall number subjects NA             8670615 #>  2 mock     cohort1     <40       Male    number subjects NA             6532899 #>  3 mock     cohort1     >=40      Male    number subjects NA             3921747 #>  4 mock     cohort1     <40       Female  number subjects NA             8449240 #>  5 mock     cohort1     >=40      Female  number subjects NA             8851111 #>  6 mock     cohort1     overall   Male    number subjects NA             7361248 #>  7 mock     cohort1     overall   Female  number subjects NA             6432766 #>  8 mock     cohort1     <40       overall number subjects NA             3144065 #>  9 mock     cohort1     >=40      overall number subjects NA             2274590 #> 10 mock     cohort2     overall   overall number subjects NA              634634 #> # ℹ 62 more rows #> # ℹ 6 more variables: mean <dbl>, sd <dbl>, percentage <dbl>, #> #   result_type <chr>, package_name <chr>, package_version <chr>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidyColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify tidy columns of a summarised_result — tidyColumns","title":"Identify tidy columns of a summarised_result — tidyColumns","text":"Identifies returns columns tidy version summarised_result .","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidyColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify tidy columns of a summarised_result — tidyColumns","text":"","code":"tidyColumns(result)"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidyColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify tidy columns of a summarised_result — tidyColumns","text":"result summarised_result.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidyColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify tidy columns of a summarised_result — tidyColumns","text":"Table columns applying tidy() function summarisd result.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidyColumns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify tidy columns of a summarised_result — tidyColumns","text":"","code":"mockSummarisedResult() |>   tidyColumns() #>  [1] \"cdm_name\"        \"cohort_name\"     \"age_group\"       \"sex\"             #>  [5] \"variable_name\"   \"variable_level\"  \"count\"           \"mean\"            #>  [9] \"sd\"              \"percentage\"      \"result_type\"     \"package_name\"    #> [13] \"package_version\""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidySummarisedResult.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a custom tidy visualization of a summarised_result object — tidySummarisedResult","title":"Get a custom tidy visualization of a summarised_result object — tidySummarisedResult","text":"Provides tools obtaining tidy version summarised_result object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidySummarisedResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a custom tidy visualization of a summarised_result object — tidySummarisedResult","text":"","code":"tidySummarisedResult(   result,   splitGroup = TRUE,   splitStrata = TRUE,   splitAdditional = TRUE,   settingsColumns = colnames(settings(result)),   addSettings = lifecycle::deprecated(),   pivotEstimatesBy = \"estimate_name\",   nameStyle = NULL )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidySummarisedResult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a custom tidy visualization of a summarised_result object — tidySummarisedResult","text":"result summarised_result. splitGroup TRUE split group name-level column pair. splitStrata TRUE split group name-level column pair. splitAdditional TRUE split group name-level column pair. settingsColumns Settings added columns, default settings added. NULL empty character vector, settings added. addSettings  pivotEstimatesBy Names pivot wider estimate values. NULL table pivotted. nameStyle Name style (glue package specifications) customise names pivotting estimates. NULL standard tidyr::pivot_wider formatting used.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidySummarisedResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a custom tidy visualization of a summarised_result object — tidySummarisedResult","text":"tibble.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/tidySummarisedResult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a custom tidy visualization of a summarised_result object — tidySummarisedResult","text":"","code":"{ result <- mockSummarisedResult()  result |> tidySummarisedResult()  result |>   tidySummarisedResult(     settings = character(),     pivotEstimatesBy = c(\"variable_name\", \"variable_level\", \"estimate_name\")   )  result |>   tidySummarisedResult(     settings = character(),     pivotEstimatesBy = c(\"variable_name\", \"variable_level\", \"estimate_name\"),     nameStyle = \"{estimate_name}_{variable_name}_{variable_level}\"   ) } #> # A tibble: 18 × 12 #>    result_id cdm_name cohort_name age_group sex     `count_number subjects` #>        <int> <chr>    <chr>       <chr>     <chr>                     <int> #>  1         1 mock     cohort1     overall   overall                 7642874 #>  2         1 mock     cohort1     <40       Male                    6267808 #>  3         1 mock     cohort1     >=40      Male                    5345031 #>  4         1 mock     cohort1     <40       Female                  2033205 #>  5         1 mock     cohort1     >=40      Female                  9183192 #>  6         1 mock     cohort1     overall   Male                    9184110 #>  7         1 mock     cohort1     overall   Female                  3837050 #>  8         1 mock     cohort1     <40       overall                 4240499 #>  9         1 mock     cohort1     >=40      overall                 3046179 #> 10         1 mock     cohort2     overall   overall                 6072955 #> 11         1 mock     cohort2     <40       Male                    6449619 #> 12         1 mock     cohort2     >=40      Male                    1397020 #> 13         1 mock     cohort2     <40       Female                  9989548 #> 14         1 mock     cohort2     >=40      Female                    99190 #> 15         1 mock     cohort2     overall   Male                    1999574 #> 16         1 mock     cohort2     overall   Female                  2912880 #> 17         1 mock     cohort2     <40       overall                 2244196 #> 18         1 mock     cohort2     >=40      overall                 4710702 #> # ℹ 6 more variables: mean_age <dbl>, sd_age <dbl>, #> #   count_Medications_Amoxiciline <int>, #> #   percentage_Medications_Amoxiciline <dbl>, #> #   count_Medications_Ibuprofen <int>, percentage_Medications_Ibuprofen <dbl>"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteAdditional.html","id":null,"dir":"Reference","previous_headings":"","what":"Unite one or more columns in additional_name-additional_level format — uniteAdditional","title":"Unite one or more columns in additional_name-additional_level format — uniteAdditional","text":"Unites targeted table columns additional_name-additional_level columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteAdditional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unite one or more columns in additional_name-additional_level format — uniteAdditional","text":"","code":"uniteAdditional(   x,   cols = character(0),   keep = FALSE,   ignore = c(NA, \"overall\") )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteAdditional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unite one or more columns in additional_name-additional_level format — uniteAdditional","text":"x Tibble dataframe. cols Columns aggregate. keep Whether keep original columns. ignore Level values ignore.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteAdditional.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unite one or more columns in additional_name-additional_level format — uniteAdditional","text":"tibble new columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteAdditional.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unite one or more columns in additional_name-additional_level format — uniteAdditional","text":"","code":"x <- dplyr::tibble(   variable = \"number subjects\",   value = c(10, 15, 40, 78),   sex = c(\"Male\", \"Female\", \"Male\", \"Female\"),   age_group = c(\"<40\", \">40\", \">40\", \"<40\") )  x |>   uniteAdditional(c(\"sex\", \"age_group\")) #> # A tibble: 4 × 4 #>   variable        value additional_name   additional_level #>   <chr>           <dbl> <chr>             <chr>            #> 1 number subjects    10 sex &&& age_group Male &&& <40     #> 2 number subjects    15 sex &&& age_group Female &&& >40   #> 3 number subjects    40 sex &&& age_group Male &&& >40     #> 4 number subjects    78 sex &&& age_group Female &&& <40"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteGroup.html","id":null,"dir":"Reference","previous_headings":"","what":"Unite one or more columns in group_name-group_level format — uniteGroup","title":"Unite one or more columns in group_name-group_level format — uniteGroup","text":"Unites targeted table columns group_name-group_level columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteGroup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unite one or more columns in group_name-group_level format — uniteGroup","text":"","code":"uniteGroup(x, cols = character(0), keep = FALSE, ignore = c(NA, \"overall\"))"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteGroup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unite one or more columns in group_name-group_level format — uniteGroup","text":"x Tibble dataframe. cols Columns aggregate. keep Whether keep original columns. ignore Level values ignore.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteGroup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unite one or more columns in group_name-group_level format — uniteGroup","text":"tibble new columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteGroup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unite one or more columns in group_name-group_level format — uniteGroup","text":"","code":"x <- dplyr::tibble(   variable = \"number subjects\",   value = c(10, 15, 40, 78),   sex = c(\"Male\", \"Female\", \"Male\", \"Female\"),   age_group = c(\"<40\", \">40\", \">40\", \"<40\") )  x |>   uniteGroup(c(\"sex\", \"age_group\")) #> # A tibble: 4 × 4 #>   variable        value group_name        group_level    #>   <chr>           <dbl> <chr>             <chr>          #> 1 number subjects    10 sex &&& age_group Male &&& <40   #> 2 number subjects    15 sex &&& age_group Female &&& >40 #> 3 number subjects    40 sex &&& age_group Male &&& >40   #> 4 number subjects    78 sex &&& age_group Female &&& <40"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteNameLevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Unite one or more columns in name-level format — uniteNameLevel","title":"Unite one or more columns in name-level format — uniteNameLevel","text":"Unites targeted table columns pair name-level columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteNameLevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unite one or more columns in name-level format — uniteNameLevel","text":"","code":"uniteNameLevel(   x,   cols = character(0),   name = \"group_name\",   level = \"group_level\",   keep = FALSE,   ignore = c(NA, \"overall\") )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteNameLevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unite one or more columns in name-level format — uniteNameLevel","text":"x dataframe. cols Columns aggregate. name Column name name column. level Column name level column. keep Whether keep original columns. ignore Level values ignore.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteNameLevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unite one or more columns in name-level format — uniteNameLevel","text":"tibble new columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteNameLevel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unite one or more columns in name-level format — uniteNameLevel","text":"","code":"x <- dplyr::tibble(   variable = \"number subjects\",   value = c(10, 15, 40, 78),   sex = c(\"Male\", \"Female\", \"Male\", \"Female\"),   age_group = c(\"<40\", \">40\", \">40\", \"<40\") )  x |>   uniteNameLevel(     cols = c(\"sex\", \"age_group\"),     name = \"new_column_name\",     level = \"new_column_level\"   ) #> # A tibble: 4 × 4 #>   variable        value new_column_name   new_column_level #>   <chr>           <dbl> <chr>             <chr>            #> 1 number subjects    10 sex &&& age_group Male &&& <40     #> 2 number subjects    15 sex &&& age_group Female &&& >40   #> 3 number subjects    40 sex &&& age_group Male &&& >40     #> 4 number subjects    78 sex &&& age_group Female &&& <40"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteStrata.html","id":null,"dir":"Reference","previous_headings":"","what":"Unite one or more columns in strata_name-strata_level format — uniteStrata","title":"Unite one or more columns in strata_name-strata_level format — uniteStrata","text":"Unites targeted table columns strata_name-strata_level columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteStrata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unite one or more columns in strata_name-strata_level format — uniteStrata","text":"","code":"uniteStrata(x, cols = character(0), keep = FALSE, ignore = c(NA, \"overall\"))"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteStrata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unite one or more columns in strata_name-strata_level format — uniteStrata","text":"x Tibble dataframe. cols Columns aggregate. keep Whether keep original columns. ignore Level values ignore.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteStrata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unite one or more columns in strata_name-strata_level format — uniteStrata","text":"tibble new columns.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/uniteStrata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unite one or more columns in strata_name-strata_level format — uniteStrata","text":"","code":"x <- dplyr::tibble(   variable = \"number subjects\",   value = c(10, 15, 40, 78),   sex = c(\"Male\", \"Female\", \"Male\", \"Female\"),   age_group = c(\"<40\", \">40\", \">40\", \"<40\") )  x |>   uniteStrata(c(\"sex\", \"age_group\")) #> # A tibble: 4 × 4 #>   variable        value strata_name       strata_level   #>   <chr>           <dbl> <chr>             <chr>          #> 1 number subjects    10 sex &&& age_group Male &&& <40   #> 2 number subjects    15 sex &&& age_group Female &&& >40 #> 3 number subjects    40 sex &&& age_group Male &&& >40   #> 4 number subjects    78 sex &&& age_group Female &&& <40"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visOmopResults-package.html","id":null,"dir":"Reference","previous_headings":"","what":"visOmopResults: Graphs and Tables for OMOP Results — visOmopResults-package","title":"visOmopResults: Graphs and Tables for OMOP Results — visOmopResults-package","text":"Provides methods transform omop_result objects formatted tables figures, facilitating visualization study results working Observational Medical Outcomes Partnership (OMOP) Common Data Model.","code":""},{"path":[]},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visOmopResults-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"visOmopResults: Graphs and Tables for OMOP Results — visOmopResults-package","text":"Maintainer: Núria Mercadé-Besora nuria.mercadebesora@ndorms.ox.ac.uk (ORCID) Authors: Martí Català marti.catalasabate@ndorms.ox.ac.uk (ORCID)","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visOmopTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a summarised_result object into a gt, flextable, or tibble object. — visOmopTable","title":"Format a summarised_result object into a gt, flextable, or tibble object. — visOmopTable","text":"function combines functionalities formatEstimateValue(), formatEstimateName(), formatHeader(), gtTable(), fxTable() single function specifically summarised_result objects.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visOmopTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a summarised_result object into a gt, flextable, or tibble object. — visOmopTable","text":"","code":"visOmopTable(   result,   formatEstimateName = character(),   header = character(),   settingsColumns = character(),   groupColumn = character(),   renameColumns = character(),   type = \"gt\",   hide = character(),   showMinCellCount = TRUE,   .options = list(),   split = lifecycle::deprecated(),   minCellCount = lifecycle::deprecated() )"},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visOmopTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a summarised_result object into a gt, flextable, or tibble object. — visOmopTable","text":"result summarised_result object. formatEstimateName named list estimate names join, sorted computation order. Use <...> indicate estimate names. header vector specifying elements include header. order elements matters, first topmost header. input vector elements can : Column names split summarised result generated splitAll() Settings specified settingsColumns argument group, strata, additional, variable, estimate, /settings refer columns within groups input create overall header labels specified location. settingsColumns character vector names settings include table. groupColumn Columns use group labels. default, name new group tidy* column names separated \";\". specify custom group name, use named list : list(\"newGroupName\" = c(\"variable_name\", \"variable_level\")). *tidy: tidy format applied column names replaces \"_\" space converts sentence case. Use renameColumns customize specific column names. renameColumns named vector customize column names, e.g., c(\"Database name\" = \"cdm_name\"). function renames column names specified tidy* format. type type desired formatted table. Options : \"gt\", \"flextable\", \"tibble\". hide Columns drop output table. default, result_id estimate_type always dropped. showMinCellCount TRUE, suppressed estimates indicated \"<{min_cell_count}\", otherwise, default na defined .options used. .options named list additional formatting options. visOmopResults::optionsTable() shows allowed arguments default values. split  minCellCount","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visOmopTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a summarised_result object into a gt, flextable, or tibble object. — visOmopTable","text":"tibble, gt, flextable object.","code":""},{"path":"https://darwin-eu.github.io/visOmopResults/reference/visOmopTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a summarised_result object into a gt, flextable, or tibble object. — visOmopTable","text":"","code":"result <- mockSummarisedResult() result |>   visOmopTable(     formatEstimateName = c(\"N%\" = \"<count> (<percentage>)\",                            \"N\" = \"<count>\",                            \"Mean (SD)\" = \"<mean> (<sd>)\"),     header = c(\"group\"),     renameColumns = c(\"Database name\" = \"cdm_name\"),     groupColumn = strataColumns(result)   ) #> ! Results have not been suppressed.     Database name       Variable name       Variable level       Estimate name                Cohort name            cohort1       cohort2     overall; overall     mock number subjects - N 9,774,459 3,928,787 age - Mean (SD) 54.50 (3.24) 13.25 (7.22) Medications Amoxiciline N% 91,718 (25.36) 26,115 (58.94)  Ibuprofen N% 11,175 (97.17) 5,990 (63.95)<40; Male     mock number subjects - N 8,831,078 8,108,000 age - Mean (SD) 47.05 (4.96) 43.34 (6.02) Medications Amoxiciline N% 2,748 (65.61) 77,458 (88.68)  Ibuprofen N% 61,946 (27.96) 16,950 (99.25)>=40; Male     mock number subjects - N 5,873,406 3,768,728 age - Mean (SD) 60.19 (9.98) 19.99 (3.35) Medications Amoxiciline N% 82,491 (83.93) 94,141 (30.33)  Ibuprofen N% 69,556 (63.07) 53,725 (70.90)<40; Female     mock number subjects - N 4,810,418 497,417 age - Mean (SD) 76.25 (0.02) 22.59 (4.11) Medications Amoxiciline N% 6,248 (83.43) 86,287 (62.78)  Ibuprofen N% 31,686 (42.33) 62,064 (75.34)>=40; Female     mock number subjects - N 2,219,612 3,873,241 age - Mean (SD) 28.12 (7.32) 6.63 (7.37) Medications Amoxiciline N% 90,344 (42.49) 7,365 (20.50)  Ibuprofen N% 87,919 (32.76) 35,683 (51.53)overall; Male     mock number subjects - N 7,843,372 5,951,709 age - Mean (SD) 54.96 (5.08) 27.68 (6.58) Medications Amoxiciline N% 13,248 (28.11) 88,939 (45.64)  Ibuprofen N% 40,466 (39.38) 53,646 (61.39)overall; Female     mock number subjects - N 1,317,417 2,108,602 age - Mean (SD) 48.29 (0.00) 38.82 (2.81) Medications Amoxiciline N% 62,851 (35.79) 21,432 (63.10)  Ibuprofen N% 63,478 (63.20) 44,852 (5.37)<40; overall     mock number subjects - N 8,783,310 168,998 age - Mean (SD) 90.26 (4.61) 9.31 (5.30) Medications Amoxiciline N% 94,496 (94.57) 33,862 (51.36)  Ibuprofen N% 79,507 (52.94) 17,454 (44.60)>=40; overall     mock number subjects - N 8,463,641 4,623,340 age - Mean (SD) 77.48 (4.83) 51.71 (4.33) Medications Amoxiciline N% 12,301 (56.96) 30,696 (46.28)  Ibuprofen N% 70,879 (84.33) 65,829 (14.69)"}]
